
ADC_CURRENT_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005910  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005ad4  08005ad4  00015ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005af4  08005af4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005af4  08005af4  00015af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005afc  08005afc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005afc  08005afc  00015afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b00  08005b00  00015b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005b04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000410  20000010  08005b14  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000420  08005b14  00020420  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ffc0  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000206c  00000000  00000000  00030000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  00032070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d68  00000000  00000000  00032e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000233c2  00000000  00000000  00033bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010cff  00000000  00000000  00056fba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dde14  00000000  00000000  00067cb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00145acd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c14  00000000  00000000  00145b20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005abc 	.word	0x08005abc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08005abc 	.word	0x08005abc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_ADC_ConvCpltCallback>:
    return FastSin(1.57079632679f - theta);
    }


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1) //This should be the main loop
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]

	///current_define
	if(phase_uni ==1)
 8000510:	4b77      	ldr	r3, [pc, #476]	; (80006f0 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d118      	bne.n	800054a <HAL_ADC_ConvCpltCallback+0x42>
	{
		b_current_2 = (int32_t)dma_buffer_2[0]-2048;
 8000518:	4b76      	ldr	r3, [pc, #472]	; (80006f4 <HAL_ADC_ConvCpltCallback+0x1ec>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000520:	4a75      	ldr	r2, [pc, #468]	; (80006f8 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8000522:	6013      	str	r3, [r2, #0]
		c_current_2 = (int32_t)dma_buffer_3[0]-2048;
 8000524:	4b75      	ldr	r3, [pc, #468]	; (80006fc <HAL_ADC_ConvCpltCallback+0x1f4>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800052c:	4a74      	ldr	r2, [pc, #464]	; (8000700 <HAL_ADC_ConvCpltCallback+0x1f8>)
 800052e:	6013      	str	r3, [r2, #0]
		a_current_2 = (-b_current_2)+(-c_current_2);
 8000530:	4b71      	ldr	r3, [pc, #452]	; (80006f8 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	425a      	negs	r2, r3
 8000536:	4b72      	ldr	r3, [pc, #456]	; (8000700 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	1ad3      	subs	r3, r2, r3
 800053c:	4a71      	ldr	r2, [pc, #452]	; (8000704 <HAL_ADC_ConvCpltCallback+0x1fc>)
 800053e:	6013      	str	r3, [r2, #0]
		angle = (float)0*((float)M_PI/(float)180);
 8000540:	4b71      	ldr	r3, [pc, #452]	; (8000708 <HAL_ADC_ConvCpltCallback+0x200>)
 8000542:	f04f 0200 	mov.w	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	e096      	b.n	8000678 <HAL_ADC_ConvCpltCallback+0x170>
	}
	else if(phase_uni == 2)
 800054a:	4b69      	ldr	r3, [pc, #420]	; (80006f0 <HAL_ADC_ConvCpltCallback+0x1e8>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2b02      	cmp	r3, #2
 8000550:	d11b      	bne.n	800058a <HAL_ADC_ConvCpltCallback+0x82>
	{

		c_current_2 = (int32_t)dma_buffer_3[0]-2048;
 8000552:	4b6a      	ldr	r3, [pc, #424]	; (80006fc <HAL_ADC_ConvCpltCallback+0x1f4>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800055a:	4a69      	ldr	r2, [pc, #420]	; (8000700 <HAL_ADC_ConvCpltCallback+0x1f8>)
 800055c:	6013      	str	r3, [r2, #0]
		a_current_2 = -(c_current_2/2);
 800055e:	4b68      	ldr	r3, [pc, #416]	; (8000700 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	0fda      	lsrs	r2, r3, #31
 8000564:	4413      	add	r3, r2
 8000566:	105b      	asrs	r3, r3, #1
 8000568:	425b      	negs	r3, r3
 800056a:	461a      	mov	r2, r3
 800056c:	4b65      	ldr	r3, [pc, #404]	; (8000704 <HAL_ADC_ConvCpltCallback+0x1fc>)
 800056e:	601a      	str	r2, [r3, #0]
		b_current_2 = -(c_current_2/2);
 8000570:	4b63      	ldr	r3, [pc, #396]	; (8000700 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	0fda      	lsrs	r2, r3, #31
 8000576:	4413      	add	r3, r2
 8000578:	105b      	asrs	r3, r3, #1
 800057a:	425b      	negs	r3, r3
 800057c:	461a      	mov	r2, r3
 800057e:	4b5e      	ldr	r3, [pc, #376]	; (80006f8 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8000580:	601a      	str	r2, [r3, #0]
		angle = (float)60*((float)M_PI/(float)180);
 8000582:	4b61      	ldr	r3, [pc, #388]	; (8000708 <HAL_ADC_ConvCpltCallback+0x200>)
 8000584:	4a61      	ldr	r2, [pc, #388]	; (800070c <HAL_ADC_ConvCpltCallback+0x204>)
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	e076      	b.n	8000678 <HAL_ADC_ConvCpltCallback+0x170>
	}
	else if(phase_uni == 3)
 800058a:	4b59      	ldr	r3, [pc, #356]	; (80006f0 <HAL_ADC_ConvCpltCallback+0x1e8>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2b03      	cmp	r3, #3
 8000590:	d117      	bne.n	80005c2 <HAL_ADC_ConvCpltCallback+0xba>
	{
		a_current_2 = (int32_t)dma_buffer_1[0]-2048;
 8000592:	4b5f      	ldr	r3, [pc, #380]	; (8000710 <HAL_ADC_ConvCpltCallback+0x208>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800059a:	4a5a      	ldr	r2, [pc, #360]	; (8000704 <HAL_ADC_ConvCpltCallback+0x1fc>)
 800059c:	6013      	str	r3, [r2, #0]
		c_current_2 = (int32_t)dma_buffer_3[0]-2048;
 800059e:	4b57      	ldr	r3, [pc, #348]	; (80006fc <HAL_ADC_ConvCpltCallback+0x1f4>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80005a6:	4a56      	ldr	r2, [pc, #344]	; (8000700 <HAL_ADC_ConvCpltCallback+0x1f8>)
 80005a8:	6013      	str	r3, [r2, #0]
		b_current_2 = (-a_current_2)+(-c_current_2);
 80005aa:	4b56      	ldr	r3, [pc, #344]	; (8000704 <HAL_ADC_ConvCpltCallback+0x1fc>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	425a      	negs	r2, r3
 80005b0:	4b53      	ldr	r3, [pc, #332]	; (8000700 <HAL_ADC_ConvCpltCallback+0x1f8>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	4a50      	ldr	r2, [pc, #320]	; (80006f8 <HAL_ADC_ConvCpltCallback+0x1f0>)
 80005b8:	6013      	str	r3, [r2, #0]
		angle = (float)120*((float)M_PI/(float)180);
 80005ba:	4b53      	ldr	r3, [pc, #332]	; (8000708 <HAL_ADC_ConvCpltCallback+0x200>)
 80005bc:	4a55      	ldr	r2, [pc, #340]	; (8000714 <HAL_ADC_ConvCpltCallback+0x20c>)
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	e05a      	b.n	8000678 <HAL_ADC_ConvCpltCallback+0x170>
	}
	else if(phase_uni == 4)
 80005c2:	4b4b      	ldr	r3, [pc, #300]	; (80006f0 <HAL_ADC_ConvCpltCallback+0x1e8>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	2b04      	cmp	r3, #4
 80005c8:	d11b      	bne.n	8000602 <HAL_ADC_ConvCpltCallback+0xfa>
	{
		a_current_2 = (int32_t)dma_buffer_1[0]-2048;
 80005ca:	4b51      	ldr	r3, [pc, #324]	; (8000710 <HAL_ADC_ConvCpltCallback+0x208>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80005d2:	4a4c      	ldr	r2, [pc, #304]	; (8000704 <HAL_ADC_ConvCpltCallback+0x1fc>)
 80005d4:	6013      	str	r3, [r2, #0]
		b_current_2 = -(a_current_2/2);
 80005d6:	4b4b      	ldr	r3, [pc, #300]	; (8000704 <HAL_ADC_ConvCpltCallback+0x1fc>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	0fda      	lsrs	r2, r3, #31
 80005dc:	4413      	add	r3, r2
 80005de:	105b      	asrs	r3, r3, #1
 80005e0:	425b      	negs	r3, r3
 80005e2:	461a      	mov	r2, r3
 80005e4:	4b44      	ldr	r3, [pc, #272]	; (80006f8 <HAL_ADC_ConvCpltCallback+0x1f0>)
 80005e6:	601a      	str	r2, [r3, #0]
		c_current_2 = -(a_current_2/2);
 80005e8:	4b46      	ldr	r3, [pc, #280]	; (8000704 <HAL_ADC_ConvCpltCallback+0x1fc>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	0fda      	lsrs	r2, r3, #31
 80005ee:	4413      	add	r3, r2
 80005f0:	105b      	asrs	r3, r3, #1
 80005f2:	425b      	negs	r3, r3
 80005f4:	461a      	mov	r2, r3
 80005f6:	4b42      	ldr	r3, [pc, #264]	; (8000700 <HAL_ADC_ConvCpltCallback+0x1f8>)
 80005f8:	601a      	str	r2, [r3, #0]
		angle = (float)180*((float)M_PI/(float)180);
 80005fa:	4b43      	ldr	r3, [pc, #268]	; (8000708 <HAL_ADC_ConvCpltCallback+0x200>)
 80005fc:	4a46      	ldr	r2, [pc, #280]	; (8000718 <HAL_ADC_ConvCpltCallback+0x210>)
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	e03a      	b.n	8000678 <HAL_ADC_ConvCpltCallback+0x170>
	}
	else if(phase_uni == 5)
 8000602:	4b3b      	ldr	r3, [pc, #236]	; (80006f0 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	2b05      	cmp	r3, #5
 8000608:	d117      	bne.n	800063a <HAL_ADC_ConvCpltCallback+0x132>
	{
		a_current_2 = (int32_t)dma_buffer_1[0]-2048;
 800060a:	4b41      	ldr	r3, [pc, #260]	; (8000710 <HAL_ADC_ConvCpltCallback+0x208>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000612:	4a3c      	ldr	r2, [pc, #240]	; (8000704 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8000614:	6013      	str	r3, [r2, #0]
		b_current_2 = (int32_t)dma_buffer_2[0]-2048;
 8000616:	4b37      	ldr	r3, [pc, #220]	; (80006f4 <HAL_ADC_ConvCpltCallback+0x1ec>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800061e:	4a36      	ldr	r2, [pc, #216]	; (80006f8 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8000620:	6013      	str	r3, [r2, #0]
		c_current_2 = (-a_current_2)+(-b_current_2);
 8000622:	4b38      	ldr	r3, [pc, #224]	; (8000704 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	425a      	negs	r2, r3
 8000628:	4b33      	ldr	r3, [pc, #204]	; (80006f8 <HAL_ADC_ConvCpltCallback+0x1f0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	4a34      	ldr	r2, [pc, #208]	; (8000700 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8000630:	6013      	str	r3, [r2, #0]
		angle = (float)240*((float)M_PI/(float)180);
 8000632:	4b35      	ldr	r3, [pc, #212]	; (8000708 <HAL_ADC_ConvCpltCallback+0x200>)
 8000634:	4a39      	ldr	r2, [pc, #228]	; (800071c <HAL_ADC_ConvCpltCallback+0x214>)
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	e01e      	b.n	8000678 <HAL_ADC_ConvCpltCallback+0x170>
	}
	else if(phase_uni == 6)
 800063a:	4b2d      	ldr	r3, [pc, #180]	; (80006f0 <HAL_ADC_ConvCpltCallback+0x1e8>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2b06      	cmp	r3, #6
 8000640:	d11a      	bne.n	8000678 <HAL_ADC_ConvCpltCallback+0x170>
	{
		b_current_2 = (int32_t)dma_buffer_2[0]-2048;
 8000642:	4b2c      	ldr	r3, [pc, #176]	; (80006f4 <HAL_ADC_ConvCpltCallback+0x1ec>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800064a:	4a2b      	ldr	r2, [pc, #172]	; (80006f8 <HAL_ADC_ConvCpltCallback+0x1f0>)
 800064c:	6013      	str	r3, [r2, #0]
		a_current_2 = -(b_current_2/2);
 800064e:	4b2a      	ldr	r3, [pc, #168]	; (80006f8 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	0fda      	lsrs	r2, r3, #31
 8000654:	4413      	add	r3, r2
 8000656:	105b      	asrs	r3, r3, #1
 8000658:	425b      	negs	r3, r3
 800065a:	461a      	mov	r2, r3
 800065c:	4b29      	ldr	r3, [pc, #164]	; (8000704 <HAL_ADC_ConvCpltCallback+0x1fc>)
 800065e:	601a      	str	r2, [r3, #0]
		c_current_2 = -(b_current_2/2);
 8000660:	4b25      	ldr	r3, [pc, #148]	; (80006f8 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	0fda      	lsrs	r2, r3, #31
 8000666:	4413      	add	r3, r2
 8000668:	105b      	asrs	r3, r3, #1
 800066a:	425b      	negs	r3, r3
 800066c:	461a      	mov	r2, r3
 800066e:	4b24      	ldr	r3, [pc, #144]	; (8000700 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8000670:	601a      	str	r2, [r3, #0]
		angle = (float)300*((float)M_PI/(float)180);
 8000672:	4b25      	ldr	r3, [pc, #148]	; (8000708 <HAL_ADC_ConvCpltCallback+0x200>)
 8000674:	4a2a      	ldr	r2, [pc, #168]	; (8000720 <HAL_ADC_ConvCpltCallback+0x218>)
 8000676:	601a      	str	r2, [r3, #0]
	}

	alpha_current = (float)(0.666666)*(float)a_current_2-(float)(0.333333)*((float)b_current_2+(float)c_current_2);
 8000678:	4b22      	ldr	r3, [pc, #136]	; (8000704 <HAL_ADC_ConvCpltCallback+0x1fc>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	ee07 3a90 	vmov	s15, r3
 8000680:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000684:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8000724 <HAL_ADC_ConvCpltCallback+0x21c>
 8000688:	ee27 7a87 	vmul.f32	s14, s15, s14
 800068c:	4b1a      	ldr	r3, [pc, #104]	; (80006f8 <HAL_ADC_ConvCpltCallback+0x1f0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	ee07 3a90 	vmov	s15, r3
 8000694:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000698:	4b19      	ldr	r3, [pc, #100]	; (8000700 <HAL_ADC_ConvCpltCallback+0x1f8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	ee07 3a90 	vmov	s15, r3
 80006a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80006a8:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8000728 <HAL_ADC_ConvCpltCallback+0x220>
 80006ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80006b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006b4:	4b1d      	ldr	r3, [pc, #116]	; (800072c <HAL_ADC_ConvCpltCallback+0x224>)
 80006b6:	edc3 7a00 	vstr	s15, [r3]
	beta_current = (float)(0.57735026)*((float)b_current_2-(float)c_current_2);
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <HAL_ADC_ConvCpltCallback+0x1f0>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	ee07 3a90 	vmov	s15, r3
 80006c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <HAL_ADC_ConvCpltCallback+0x1f8>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	ee07 3a90 	vmov	s15, r3
 80006ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006d6:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000730 <HAL_ADC_ConvCpltCallback+0x228>
 80006da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006de:	4b15      	ldr	r3, [pc, #84]	; (8000734 <HAL_ADC_ConvCpltCallback+0x22c>)
 80006e0:	edc3 7a00 	vstr	s15, [r3]

	//d_current = FastCos((float)angle)*(float)alpha_current+FastSin((float)angle)*(float)beta_current;
	//q_current = -FastSin(angle)*(float)alpha_current+FastCos(angle)*(float)beta_current;


}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	200003ec 	.word	0x200003ec
 80006f4:	200003d8 	.word	0x200003d8
 80006f8:	20000408 	.word	0x20000408
 80006fc:	200003e0 	.word	0x200003e0
 8000700:	2000040c 	.word	0x2000040c
 8000704:	20000404 	.word	0x20000404
 8000708:	20000400 	.word	0x20000400
 800070c:	3f860a92 	.word	0x3f860a92
 8000710:	200003d0 	.word	0x200003d0
 8000714:	40060a92 	.word	0x40060a92
 8000718:	40490fdb 	.word	0x40490fdb
 800071c:	40860a92 	.word	0x40860a92
 8000720:	40a78d36 	.word	0x40a78d36
 8000724:	3f2aaa9f 	.word	0x3f2aaa9f
 8000728:	3eaaaa9f 	.word	0x3eaaaa9f
 800072c:	20000410 	.word	0x20000410
 8000730:	3f13cd3a 	.word	0x3f13cd3a
 8000734:	20000414 	.word	0x20000414

08000738 <update_encoder>:

void update_encoder()
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
	encoder = (TIM2->CNT>>2);
 800073c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000742:	089b      	lsrs	r3, r3, #2
 8000744:	461a      	mov	r2, r3
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <update_encoder+0x3c>)
 8000748:	601a      	str	r2, [r3, #0]
	if(encoder > 2048)
 800074a:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <update_encoder+0x3c>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000752:	dd0a      	ble.n	800076a <update_encoder+0x32>
	{
		encoder = (encoder%2048);
 8000754:	4b07      	ldr	r3, [pc, #28]	; (8000774 <update_encoder+0x3c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	425a      	negs	r2, r3
 800075a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800075e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000762:	bf58      	it	pl
 8000764:	4253      	negpl	r3, r2
 8000766:	4a03      	ldr	r2, [pc, #12]	; (8000774 <update_encoder+0x3c>)
 8000768:	6013      	str	r3, [r2, #0]
	}
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	200003e8 	.word	0x200003e8

08000778 <delay_us>:
    t3 = period-t1-t2;

    //std::cout << mech_angle << "t1  " << t1 << "  t2  " << t2 << "  t3  " << t3 << " total " <<  t1+t2+t3 << "phase "<< phase << "  angle "<< encoder << "pole_pair_angle " << pole_pair_angle <<std::endl;
}
void delay_us (uint16_t us)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim12,0);  // set the counter value a 0
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <delay_us+0x30>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2200      	movs	r2, #0
 8000788:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim12) < us);  // wait for the counter to reach the us input in the parameter
 800078a:	bf00      	nop
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <delay_us+0x30>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000792:	88fb      	ldrh	r3, [r7, #6]
 8000794:	429a      	cmp	r2, r3
 8000796:	d3f9      	bcc.n	800078c <delay_us+0x14>
}
 8000798:	bf00      	nop
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	20000344 	.word	0x20000344

080007ac <drive>:

void drive(int voltage,int phase) //main driving function
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]


	switch (phase) {
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	3b01      	subs	r3, #1
 80007ba:	2b05      	cmp	r3, #5
 80007bc:	f200 8326 	bhi.w	8000e0c <drive+0x660>
 80007c0:	a201      	add	r2, pc, #4	; (adr r2, 80007c8 <drive+0x1c>)
 80007c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007c6:	bf00      	nop
 80007c8:	080007e1 	.word	0x080007e1
 80007cc:	080008e3 	.word	0x080008e3
 80007d0:	080009e5 	.word	0x080009e5
 80007d4:	08000af9 	.word	0x08000af9
 80007d8:	08000c09 	.word	0x08000c09
 80007dc:	08000d0b 	.word	0x08000d0b
		case 1:
			execute_phase(0,voltage);
 80007e0:	6879      	ldr	r1, [r7, #4]
 80007e2:	2000      	movs	r0, #0
 80007e4:	f000 fb1e 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t3/3);
 80007e8:	4bbf      	ldr	r3, [pc, #764]	; (8000ae8 <drive+0x33c>)
 80007ea:	edd3 7a00 	vldr	s15, [r3]
 80007ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007f2:	ee17 3a90 	vmov	r3, s15
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	4abc      	ldr	r2, [pc, #752]	; (8000aec <drive+0x340>)
 80007fa:	fba2 2303 	umull	r2, r3, r2, r3
 80007fe:	085b      	lsrs	r3, r3, #1
 8000800:	b29b      	uxth	r3, r3
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ffb8 	bl	8000778 <delay_us>
			execute_phase(1,voltage);
 8000808:	6879      	ldr	r1, [r7, #4]
 800080a:	2001      	movs	r0, #1
 800080c:	f000 fb0a 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t1/2);
 8000810:	4bb7      	ldr	r3, [pc, #732]	; (8000af0 <drive+0x344>)
 8000812:	edd3 7a00 	vldr	s15, [r3]
 8000816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800081a:	ee17 3a90 	vmov	r3, s15
 800081e:	b29b      	uxth	r3, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	b29b      	uxth	r3, r3
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ffa7 	bl	8000778 <delay_us>
			execute_phase(2,voltage);
 800082a:	6879      	ldr	r1, [r7, #4]
 800082c:	2002      	movs	r0, #2
 800082e:	f000 faf9 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t2/2);
 8000832:	4bb0      	ldr	r3, [pc, #704]	; (8000af4 <drive+0x348>)
 8000834:	edd3 7a00 	vldr	s15, [r3]
 8000838:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800083c:	ee17 3a90 	vmov	r3, s15
 8000840:	b29b      	uxth	r3, r3
 8000842:	085b      	lsrs	r3, r3, #1
 8000844:	b29b      	uxth	r3, r3
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff ff96 	bl	8000778 <delay_us>
			execute_phase(7,voltage);
 800084c:	6879      	ldr	r1, [r7, #4]
 800084e:	2007      	movs	r0, #7
 8000850:	f000 fae8 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t3/3);
 8000854:	4ba4      	ldr	r3, [pc, #656]	; (8000ae8 <drive+0x33c>)
 8000856:	edd3 7a00 	vldr	s15, [r3]
 800085a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800085e:	ee17 3a90 	vmov	r3, s15
 8000862:	b29b      	uxth	r3, r3
 8000864:	4aa1      	ldr	r2, [pc, #644]	; (8000aec <drive+0x340>)
 8000866:	fba2 2303 	umull	r2, r3, r2, r3
 800086a:	085b      	lsrs	r3, r3, #1
 800086c:	b29b      	uxth	r3, r3
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff ff82 	bl	8000778 <delay_us>
			execute_phase(2,voltage);
 8000874:	6879      	ldr	r1, [r7, #4]
 8000876:	2002      	movs	r0, #2
 8000878:	f000 fad4 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t2/2);
 800087c:	4b9d      	ldr	r3, [pc, #628]	; (8000af4 <drive+0x348>)
 800087e:	edd3 7a00 	vldr	s15, [r3]
 8000882:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000886:	ee17 3a90 	vmov	r3, s15
 800088a:	b29b      	uxth	r3, r3
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	b29b      	uxth	r3, r3
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff ff71 	bl	8000778 <delay_us>
			execute_phase(1,voltage);
 8000896:	6879      	ldr	r1, [r7, #4]
 8000898:	2001      	movs	r0, #1
 800089a:	f000 fac3 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t1/2);
 800089e:	4b94      	ldr	r3, [pc, #592]	; (8000af0 <drive+0x344>)
 80008a0:	edd3 7a00 	vldr	s15, [r3]
 80008a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008a8:	ee17 3a90 	vmov	r3, s15
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	085b      	lsrs	r3, r3, #1
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff ff60 	bl	8000778 <delay_us>
			execute_phase(0,voltage);
 80008b8:	6879      	ldr	r1, [r7, #4]
 80008ba:	2000      	movs	r0, #0
 80008bc:	f000 fab2 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t3/3);
 80008c0:	4b89      	ldr	r3, [pc, #548]	; (8000ae8 <drive+0x33c>)
 80008c2:	edd3 7a00 	vldr	s15, [r3]
 80008c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008ca:	ee17 3a90 	vmov	r3, s15
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	4a86      	ldr	r2, [pc, #536]	; (8000aec <drive+0x340>)
 80008d2:	fba2 2303 	umull	r2, r3, r2, r3
 80008d6:	085b      	lsrs	r3, r3, #1
 80008d8:	b29b      	uxth	r3, r3
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff ff4c 	bl	8000778 <delay_us>

			break;
 80008e0:	e294      	b.n	8000e0c <drive+0x660>
		case 2:
			execute_phase(0,voltage);
 80008e2:	6879      	ldr	r1, [r7, #4]
 80008e4:	2000      	movs	r0, #0
 80008e6:	f000 fa9d 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t3/3);
 80008ea:	4b7f      	ldr	r3, [pc, #508]	; (8000ae8 <drive+0x33c>)
 80008ec:	edd3 7a00 	vldr	s15, [r3]
 80008f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008f4:	ee17 3a90 	vmov	r3, s15
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	4a7c      	ldr	r2, [pc, #496]	; (8000aec <drive+0x340>)
 80008fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	b29b      	uxth	r3, r3
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff ff37 	bl	8000778 <delay_us>
			execute_phase(3,voltage);
 800090a:	6879      	ldr	r1, [r7, #4]
 800090c:	2003      	movs	r0, #3
 800090e:	f000 fa89 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t2/2);
 8000912:	4b78      	ldr	r3, [pc, #480]	; (8000af4 <drive+0x348>)
 8000914:	edd3 7a00 	vldr	s15, [r3]
 8000918:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800091c:	ee17 3a90 	vmov	r3, s15
 8000920:	b29b      	uxth	r3, r3
 8000922:	085b      	lsrs	r3, r3, #1
 8000924:	b29b      	uxth	r3, r3
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff ff26 	bl	8000778 <delay_us>
			execute_phase(2,voltage);
 800092c:	6879      	ldr	r1, [r7, #4]
 800092e:	2002      	movs	r0, #2
 8000930:	f000 fa78 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t1/2);
 8000934:	4b6e      	ldr	r3, [pc, #440]	; (8000af0 <drive+0x344>)
 8000936:	edd3 7a00 	vldr	s15, [r3]
 800093a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800093e:	ee17 3a90 	vmov	r3, s15
 8000942:	b29b      	uxth	r3, r3
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	b29b      	uxth	r3, r3
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ff15 	bl	8000778 <delay_us>
			execute_phase(7,voltage);
 800094e:	6879      	ldr	r1, [r7, #4]
 8000950:	2007      	movs	r0, #7
 8000952:	f000 fa67 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t3/3);
 8000956:	4b64      	ldr	r3, [pc, #400]	; (8000ae8 <drive+0x33c>)
 8000958:	edd3 7a00 	vldr	s15, [r3]
 800095c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000960:	ee17 3a90 	vmov	r3, s15
 8000964:	b29b      	uxth	r3, r3
 8000966:	4a61      	ldr	r2, [pc, #388]	; (8000aec <drive+0x340>)
 8000968:	fba2 2303 	umull	r2, r3, r2, r3
 800096c:	085b      	lsrs	r3, r3, #1
 800096e:	b29b      	uxth	r3, r3
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff ff01 	bl	8000778 <delay_us>
			execute_phase(2,voltage);
 8000976:	6879      	ldr	r1, [r7, #4]
 8000978:	2002      	movs	r0, #2
 800097a:	f000 fa53 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t1/2);
 800097e:	4b5c      	ldr	r3, [pc, #368]	; (8000af0 <drive+0x344>)
 8000980:	edd3 7a00 	vldr	s15, [r3]
 8000984:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000988:	ee17 3a90 	vmov	r3, s15
 800098c:	b29b      	uxth	r3, r3
 800098e:	085b      	lsrs	r3, r3, #1
 8000990:	b29b      	uxth	r3, r3
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff fef0 	bl	8000778 <delay_us>
			execute_phase(3,voltage);
 8000998:	6879      	ldr	r1, [r7, #4]
 800099a:	2003      	movs	r0, #3
 800099c:	f000 fa42 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t2/2);
 80009a0:	4b54      	ldr	r3, [pc, #336]	; (8000af4 <drive+0x348>)
 80009a2:	edd3 7a00 	vldr	s15, [r3]
 80009a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009aa:	ee17 3a90 	vmov	r3, s15
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fedf 	bl	8000778 <delay_us>
			execute_phase(0,voltage);
 80009ba:	6879      	ldr	r1, [r7, #4]
 80009bc:	2000      	movs	r0, #0
 80009be:	f000 fa31 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t3/3);
 80009c2:	4b49      	ldr	r3, [pc, #292]	; (8000ae8 <drive+0x33c>)
 80009c4:	edd3 7a00 	vldr	s15, [r3]
 80009c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009cc:	ee17 3a90 	vmov	r3, s15
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	4a46      	ldr	r2, [pc, #280]	; (8000aec <drive+0x340>)
 80009d4:	fba2 2303 	umull	r2, r3, r2, r3
 80009d8:	085b      	lsrs	r3, r3, #1
 80009da:	b29b      	uxth	r3, r3
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fecb 	bl	8000778 <delay_us>
			break;
 80009e2:	e213      	b.n	8000e0c <drive+0x660>
		case 3:
			execute_phase(0,voltage);
 80009e4:	6879      	ldr	r1, [r7, #4]
 80009e6:	2000      	movs	r0, #0
 80009e8:	f000 fa1c 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t3/3);
 80009ec:	4b3e      	ldr	r3, [pc, #248]	; (8000ae8 <drive+0x33c>)
 80009ee:	edd3 7a00 	vldr	s15, [r3]
 80009f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009f6:	ee17 3a90 	vmov	r3, s15
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	4a3b      	ldr	r2, [pc, #236]	; (8000aec <drive+0x340>)
 80009fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000a02:	085b      	lsrs	r3, r3, #1
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff feb6 	bl	8000778 <delay_us>
			execute_phase(3,voltage);
 8000a0c:	6879      	ldr	r1, [r7, #4]
 8000a0e:	2003      	movs	r0, #3
 8000a10:	f000 fa08 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t1/2);
 8000a14:	4b36      	ldr	r3, [pc, #216]	; (8000af0 <drive+0x344>)
 8000a16:	edd3 7a00 	vldr	s15, [r3]
 8000a1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a1e:	ee17 3a90 	vmov	r3, s15
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	085b      	lsrs	r3, r3, #1
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff fea5 	bl	8000778 <delay_us>
			execute_phase(4,voltage);
 8000a2e:	6879      	ldr	r1, [r7, #4]
 8000a30:	2004      	movs	r0, #4
 8000a32:	f000 f9f7 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t2/2);
 8000a36:	4b2f      	ldr	r3, [pc, #188]	; (8000af4 <drive+0x348>)
 8000a38:	edd3 7a00 	vldr	s15, [r3]
 8000a3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a40:	ee17 3a90 	vmov	r3, s15
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	085b      	lsrs	r3, r3, #1
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff fe94 	bl	8000778 <delay_us>
			execute_phase(7,voltage);
 8000a50:	6879      	ldr	r1, [r7, #4]
 8000a52:	2007      	movs	r0, #7
 8000a54:	f000 f9e6 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t3/3);
 8000a58:	4b23      	ldr	r3, [pc, #140]	; (8000ae8 <drive+0x33c>)
 8000a5a:	edd3 7a00 	vldr	s15, [r3]
 8000a5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a62:	ee17 3a90 	vmov	r3, s15
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	4a20      	ldr	r2, [pc, #128]	; (8000aec <drive+0x340>)
 8000a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6e:	085b      	lsrs	r3, r3, #1
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff fe80 	bl	8000778 <delay_us>
			execute_phase(4,voltage);
 8000a78:	6879      	ldr	r1, [r7, #4]
 8000a7a:	2004      	movs	r0, #4
 8000a7c:	f000 f9d2 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t2/2);
 8000a80:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <drive+0x348>)
 8000a82:	edd3 7a00 	vldr	s15, [r3]
 8000a86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a8a:	ee17 3a90 	vmov	r3, s15
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	085b      	lsrs	r3, r3, #1
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fe6f 	bl	8000778 <delay_us>
			execute_phase(3,voltage);
 8000a9a:	6879      	ldr	r1, [r7, #4]
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	f000 f9c1 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t1/2);
 8000aa2:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <drive+0x344>)
 8000aa4:	edd3 7a00 	vldr	s15, [r3]
 8000aa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000aac:	ee17 3a90 	vmov	r3, s15
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	085b      	lsrs	r3, r3, #1
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff fe5e 	bl	8000778 <delay_us>
			execute_phase(0,voltage);
 8000abc:	6879      	ldr	r1, [r7, #4]
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f000 f9b0 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t3/3);
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <drive+0x33c>)
 8000ac6:	edd3 7a00 	vldr	s15, [r3]
 8000aca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ace:	ee17 3a90 	vmov	r3, s15
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	4a05      	ldr	r2, [pc, #20]	; (8000aec <drive+0x340>)
 8000ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8000ada:	085b      	lsrs	r3, r3, #1
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff fe4a 	bl	8000778 <delay_us>
			break;
 8000ae4:	e192      	b.n	8000e0c <drive+0x660>
 8000ae6:	bf00      	nop
 8000ae8:	200003fc 	.word	0x200003fc
 8000aec:	aaaaaaab 	.word	0xaaaaaaab
 8000af0:	200003f4 	.word	0x200003f4
 8000af4:	200003f8 	.word	0x200003f8
		case 4:
			execute_phase(0,voltage);
 8000af8:	6879      	ldr	r1, [r7, #4]
 8000afa:	2000      	movs	r0, #0
 8000afc:	f000 f992 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t3/3);
 8000b00:	4bc4      	ldr	r3, [pc, #784]	; (8000e14 <drive+0x668>)
 8000b02:	edd3 7a00 	vldr	s15, [r3]
 8000b06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b0a:	ee17 3a90 	vmov	r3, s15
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	4ac1      	ldr	r2, [pc, #772]	; (8000e18 <drive+0x66c>)
 8000b12:	fba2 2303 	umull	r2, r3, r2, r3
 8000b16:	085b      	lsrs	r3, r3, #1
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff fe2c 	bl	8000778 <delay_us>
			execute_phase(4,voltage);
 8000b20:	6879      	ldr	r1, [r7, #4]
 8000b22:	2004      	movs	r0, #4
 8000b24:	f000 f97e 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t1/3);
 8000b28:	4bbc      	ldr	r3, [pc, #752]	; (8000e1c <drive+0x670>)
 8000b2a:	edd3 7a00 	vldr	s15, [r3]
 8000b2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b32:	ee17 3a90 	vmov	r3, s15
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	4ab7      	ldr	r2, [pc, #732]	; (8000e18 <drive+0x66c>)
 8000b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b3e:	085b      	lsrs	r3, r3, #1
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fe18 	bl	8000778 <delay_us>
			execute_phase(4,voltage);
 8000b48:	6879      	ldr	r1, [r7, #4]
 8000b4a:	2004      	movs	r0, #4
 8000b4c:	f000 f96a 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t1/3);
 8000b50:	4bb2      	ldr	r3, [pc, #712]	; (8000e1c <drive+0x670>)
 8000b52:	edd3 7a00 	vldr	s15, [r3]
 8000b56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b5a:	ee17 3a90 	vmov	r3, s15
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	4aad      	ldr	r2, [pc, #692]	; (8000e18 <drive+0x66c>)
 8000b62:	fba2 2303 	umull	r2, r3, r2, r3
 8000b66:	085b      	lsrs	r3, r3, #1
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff fe04 	bl	8000778 <delay_us>
			execute_phase(7,voltage);
 8000b70:	6879      	ldr	r1, [r7, #4]
 8000b72:	2007      	movs	r0, #7
 8000b74:	f000 f956 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t3/3);
 8000b78:	4ba6      	ldr	r3, [pc, #664]	; (8000e14 <drive+0x668>)
 8000b7a:	edd3 7a00 	vldr	s15, [r3]
 8000b7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b82:	ee17 3a90 	vmov	r3, s15
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	4aa3      	ldr	r2, [pc, #652]	; (8000e18 <drive+0x66c>)
 8000b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8e:	085b      	lsrs	r3, r3, #1
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff fdf0 	bl	8000778 <delay_us>
			execute_phase(4,voltage);
 8000b98:	6879      	ldr	r1, [r7, #4]
 8000b9a:	2004      	movs	r0, #4
 8000b9c:	f000 f942 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t1/3);
 8000ba0:	4b9e      	ldr	r3, [pc, #632]	; (8000e1c <drive+0x670>)
 8000ba2:	edd3 7a00 	vldr	s15, [r3]
 8000ba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000baa:	ee17 3a90 	vmov	r3, s15
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	4a99      	ldr	r2, [pc, #612]	; (8000e18 <drive+0x66c>)
 8000bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb6:	085b      	lsrs	r3, r3, #1
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fddc 	bl	8000778 <delay_us>
			execute_phase(5,voltage);
 8000bc0:	6879      	ldr	r1, [r7, #4]
 8000bc2:	2005      	movs	r0, #5
 8000bc4:	f000 f92e 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t2);
 8000bc8:	4b95      	ldr	r3, [pc, #596]	; (8000e20 <drive+0x674>)
 8000bca:	edd3 7a00 	vldr	s15, [r3]
 8000bce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bd2:	ee17 3a90 	vmov	r3, s15
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff fdcd 	bl	8000778 <delay_us>
			execute_phase(0,voltage);
 8000bde:	6879      	ldr	r1, [r7, #4]
 8000be0:	2000      	movs	r0, #0
 8000be2:	f000 f91f 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t3/3);
 8000be6:	4b8b      	ldr	r3, [pc, #556]	; (8000e14 <drive+0x668>)
 8000be8:	edd3 7a00 	vldr	s15, [r3]
 8000bec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bf0:	ee17 3a90 	vmov	r3, s15
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	4a88      	ldr	r2, [pc, #544]	; (8000e18 <drive+0x66c>)
 8000bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bfc:	085b      	lsrs	r3, r3, #1
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fdb9 	bl	8000778 <delay_us>
			break;
 8000c06:	e101      	b.n	8000e0c <drive+0x660>
		case 5:
			execute_phase(0,voltage);
 8000c08:	6879      	ldr	r1, [r7, #4]
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f000 f90a 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t3/3);
 8000c10:	4b80      	ldr	r3, [pc, #512]	; (8000e14 <drive+0x668>)
 8000c12:	edd3 7a00 	vldr	s15, [r3]
 8000c16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c1a:	ee17 3a90 	vmov	r3, s15
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	4a7d      	ldr	r2, [pc, #500]	; (8000e18 <drive+0x66c>)
 8000c22:	fba2 2303 	umull	r2, r3, r2, r3
 8000c26:	085b      	lsrs	r3, r3, #1
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff fda4 	bl	8000778 <delay_us>
			execute_phase(5,voltage);
 8000c30:	6879      	ldr	r1, [r7, #4]
 8000c32:	2005      	movs	r0, #5
 8000c34:	f000 f8f6 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t1/2);
 8000c38:	4b78      	ldr	r3, [pc, #480]	; (8000e1c <drive+0x670>)
 8000c3a:	edd3 7a00 	vldr	s15, [r3]
 8000c3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c42:	ee17 3a90 	vmov	r3, s15
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	085b      	lsrs	r3, r3, #1
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff fd93 	bl	8000778 <delay_us>
			execute_phase(6,voltage);
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	2006      	movs	r0, #6
 8000c56:	f000 f8e5 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t2/2);
 8000c5a:	4b71      	ldr	r3, [pc, #452]	; (8000e20 <drive+0x674>)
 8000c5c:	edd3 7a00 	vldr	s15, [r3]
 8000c60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c64:	ee17 3a90 	vmov	r3, s15
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fd82 	bl	8000778 <delay_us>
			execute_phase(7,voltage);
 8000c74:	6879      	ldr	r1, [r7, #4]
 8000c76:	2007      	movs	r0, #7
 8000c78:	f000 f8d4 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t3/3);
 8000c7c:	4b65      	ldr	r3, [pc, #404]	; (8000e14 <drive+0x668>)
 8000c7e:	edd3 7a00 	vldr	s15, [r3]
 8000c82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c86:	ee17 3a90 	vmov	r3, s15
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	4a62      	ldr	r2, [pc, #392]	; (8000e18 <drive+0x66c>)
 8000c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c92:	085b      	lsrs	r3, r3, #1
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fd6e 	bl	8000778 <delay_us>
			execute_phase(6,voltage);
 8000c9c:	6879      	ldr	r1, [r7, #4]
 8000c9e:	2006      	movs	r0, #6
 8000ca0:	f000 f8c0 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t2/2);
 8000ca4:	4b5e      	ldr	r3, [pc, #376]	; (8000e20 <drive+0x674>)
 8000ca6:	edd3 7a00 	vldr	s15, [r3]
 8000caa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cae:	ee17 3a90 	vmov	r3, s15
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	085b      	lsrs	r3, r3, #1
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fd5d 	bl	8000778 <delay_us>
			execute_phase(5,voltage);
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	2005      	movs	r0, #5
 8000cc2:	f000 f8af 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t1/2);
 8000cc6:	4b55      	ldr	r3, [pc, #340]	; (8000e1c <drive+0x670>)
 8000cc8:	edd3 7a00 	vldr	s15, [r3]
 8000ccc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cd0:	ee17 3a90 	vmov	r3, s15
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	085b      	lsrs	r3, r3, #1
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fd4c 	bl	8000778 <delay_us>
			execute_phase(0,voltage);
 8000ce0:	6879      	ldr	r1, [r7, #4]
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f000 f89e 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t3/3);
 8000ce8:	4b4a      	ldr	r3, [pc, #296]	; (8000e14 <drive+0x668>)
 8000cea:	edd3 7a00 	vldr	s15, [r3]
 8000cee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cf2:	ee17 3a90 	vmov	r3, s15
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	4a47      	ldr	r2, [pc, #284]	; (8000e18 <drive+0x66c>)
 8000cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000cfe:	085b      	lsrs	r3, r3, #1
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fd38 	bl	8000778 <delay_us>
			break;
 8000d08:	e080      	b.n	8000e0c <drive+0x660>
		case 6:
			execute_phase(0,voltage);
 8000d0a:	6879      	ldr	r1, [r7, #4]
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f000 f889 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t3/3);
 8000d12:	4b40      	ldr	r3, [pc, #256]	; (8000e14 <drive+0x668>)
 8000d14:	edd3 7a00 	vldr	s15, [r3]
 8000d18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d1c:	ee17 3a90 	vmov	r3, s15
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	4a3d      	ldr	r2, [pc, #244]	; (8000e18 <drive+0x66c>)
 8000d24:	fba2 2303 	umull	r2, r3, r2, r3
 8000d28:	085b      	lsrs	r3, r3, #1
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fd23 	bl	8000778 <delay_us>
			execute_phase(1,voltage);
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	2001      	movs	r0, #1
 8000d36:	f000 f875 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t2/2);
 8000d3a:	4b39      	ldr	r3, [pc, #228]	; (8000e20 <drive+0x674>)
 8000d3c:	edd3 7a00 	vldr	s15, [r3]
 8000d40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d44:	ee17 3a90 	vmov	r3, s15
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	085b      	lsrs	r3, r3, #1
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fd12 	bl	8000778 <delay_us>
			execute_phase(6,voltage);
 8000d54:	6879      	ldr	r1, [r7, #4]
 8000d56:	2006      	movs	r0, #6
 8000d58:	f000 f864 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t1/2);
 8000d5c:	4b2f      	ldr	r3, [pc, #188]	; (8000e1c <drive+0x670>)
 8000d5e:	edd3 7a00 	vldr	s15, [r3]
 8000d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d66:	ee17 3a90 	vmov	r3, s15
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	085b      	lsrs	r3, r3, #1
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fd01 	bl	8000778 <delay_us>
			execute_phase(7,voltage);
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	2007      	movs	r0, #7
 8000d7a:	f000 f853 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t3/3);
 8000d7e:	4b25      	ldr	r3, [pc, #148]	; (8000e14 <drive+0x668>)
 8000d80:	edd3 7a00 	vldr	s15, [r3]
 8000d84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d88:	ee17 3a90 	vmov	r3, s15
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	4a22      	ldr	r2, [pc, #136]	; (8000e18 <drive+0x66c>)
 8000d90:	fba2 2303 	umull	r2, r3, r2, r3
 8000d94:	085b      	lsrs	r3, r3, #1
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fced 	bl	8000778 <delay_us>
			execute_phase(6,voltage);
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	2006      	movs	r0, #6
 8000da2:	f000 f83f 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t1/2);
 8000da6:	4b1d      	ldr	r3, [pc, #116]	; (8000e1c <drive+0x670>)
 8000da8:	edd3 7a00 	vldr	s15, [r3]
 8000dac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000db0:	ee17 3a90 	vmov	r3, s15
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	085b      	lsrs	r3, r3, #1
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fcdc 	bl	8000778 <delay_us>
			execute_phase(1,voltage);
 8000dc0:	6879      	ldr	r1, [r7, #4]
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f000 f82e 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t2/2);
 8000dc8:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <drive+0x674>)
 8000dca:	edd3 7a00 	vldr	s15, [r3]
 8000dce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dd2:	ee17 3a90 	vmov	r3, s15
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	085b      	lsrs	r3, r3, #1
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff fccb 	bl	8000778 <delay_us>
			execute_phase(0,voltage);
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	2000      	movs	r0, #0
 8000de6:	f000 f81d 	bl	8000e24 <execute_phase>
			delay_us((uint16_t)t3/3);
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <drive+0x668>)
 8000dec:	edd3 7a00 	vldr	s15, [r3]
 8000df0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000df4:	ee17 3a90 	vmov	r3, s15
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	4a07      	ldr	r2, [pc, #28]	; (8000e18 <drive+0x66c>)
 8000dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8000e00:	085b      	lsrs	r3, r3, #1
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff fcb7 	bl	8000778 <delay_us>
			break;
 8000e0a:	bf00      	nop
	}

}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	200003fc 	.word	0x200003fc
 8000e18:	aaaaaaab 	.word	0xaaaaaaab
 8000e1c:	200003f4 	.word	0x200003f4
 8000e20:	200003f8 	.word	0x200003f8

08000e24 <execute_phase>:


void execute_phase(int phase,int speed) //Gate mosfet control algorithm
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
	phase_uni = phase;
 8000e2e:	4a5c      	ldr	r2, [pc, #368]	; (8000fa0 <execute_phase+0x17c>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6013      	str	r3, [r2, #0]

	switch (phase) {
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2b07      	cmp	r3, #7
 8000e38:	f200 80ac 	bhi.w	8000f94 <execute_phase+0x170>
 8000e3c:	a201      	add	r2, pc, #4	; (adr r2, 8000e44 <execute_phase+0x20>)
 8000e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e42:	bf00      	nop
 8000e44:	08000e65 	.word	0x08000e65
 8000e48:	08000e8b 	.word	0x08000e8b
 8000e4c:	08000eb1 	.word	0x08000eb1
 8000e50:	08000ed7 	.word	0x08000ed7
 8000e54:	08000efd 	.word	0x08000efd
 8000e58:	08000f23 	.word	0x08000f23
 8000e5c:	08000f49 	.word	0x08000f49
 8000e60:	08000f6f 	.word	0x08000f6f
		case 0:
			TIM3->CCR1 = 0;
 8000e64:	4b4f      	ldr	r3, [pc, #316]	; (8000fa4 <execute_phase+0x180>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 0;
 8000e6a:	4b4e      	ldr	r3, [pc, #312]	; (8000fa4 <execute_phase+0x180>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3->CCR3 = 0;
 8000e70:	4b4c      	ldr	r3, [pc, #304]	; (8000fa4 <execute_phase+0x180>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM4->CCR1 = 0;
 8000e76:	4b4c      	ldr	r3, [pc, #304]	; (8000fa8 <execute_phase+0x184>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	635a      	str	r2, [r3, #52]	; 0x34
			TIM4->CCR2 = 0;
 8000e7c:	4b4a      	ldr	r3, [pc, #296]	; (8000fa8 <execute_phase+0x184>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	639a      	str	r2, [r3, #56]	; 0x38
			TIM4->CCR3 = 0;
 8000e82:	4b49      	ldr	r3, [pc, #292]	; (8000fa8 <execute_phase+0x184>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000e88:	e084      	b.n	8000f94 <execute_phase+0x170>
		case 1:
			TIM3->CCR1 = 0;
 8000e8a:	4b46      	ldr	r3, [pc, #280]	; (8000fa4 <execute_phase+0x180>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = speed;
 8000e90:	4a44      	ldr	r2, [pc, #272]	; (8000fa4 <execute_phase+0x180>)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	6393      	str	r3, [r2, #56]	; 0x38
			TIM3->CCR3 = speed;
 8000e96:	4a43      	ldr	r2, [pc, #268]	; (8000fa4 <execute_phase+0x180>)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM4->CCR1 = speed;
 8000e9c:	4a42      	ldr	r2, [pc, #264]	; (8000fa8 <execute_phase+0x184>)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	6353      	str	r3, [r2, #52]	; 0x34
			TIM4->CCR2 = 0;
 8000ea2:	4b41      	ldr	r3, [pc, #260]	; (8000fa8 <execute_phase+0x184>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	639a      	str	r2, [r3, #56]	; 0x38
			TIM4->CCR3 = 0;
 8000ea8:	4b3f      	ldr	r3, [pc, #252]	; (8000fa8 <execute_phase+0x184>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000eae:	e071      	b.n	8000f94 <execute_phase+0x170>
		case 2:
			TIM3->CCR1 = 0;
 8000eb0:	4b3c      	ldr	r3, [pc, #240]	; (8000fa4 <execute_phase+0x180>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 0;
 8000eb6:	4b3b      	ldr	r3, [pc, #236]	; (8000fa4 <execute_phase+0x180>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3->CCR3 = speed;
 8000ebc:	4a39      	ldr	r2, [pc, #228]	; (8000fa4 <execute_phase+0x180>)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM4->CCR1 = speed;
 8000ec2:	4a39      	ldr	r2, [pc, #228]	; (8000fa8 <execute_phase+0x184>)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	6353      	str	r3, [r2, #52]	; 0x34
			TIM4->CCR2 = speed;
 8000ec8:	4a37      	ldr	r2, [pc, #220]	; (8000fa8 <execute_phase+0x184>)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	6393      	str	r3, [r2, #56]	; 0x38
			TIM4->CCR3 = 0;
 8000ece:	4b36      	ldr	r3, [pc, #216]	; (8000fa8 <execute_phase+0x184>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000ed4:	e05e      	b.n	8000f94 <execute_phase+0x170>
		case 3:
			TIM3->CCR1 = speed;
 8000ed6:	4a33      	ldr	r2, [pc, #204]	; (8000fa4 <execute_phase+0x180>)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	6353      	str	r3, [r2, #52]	; 0x34
			TIM3->CCR2 = 0;
 8000edc:	4b31      	ldr	r3, [pc, #196]	; (8000fa4 <execute_phase+0x180>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3->CCR3 = speed;
 8000ee2:	4a30      	ldr	r2, [pc, #192]	; (8000fa4 <execute_phase+0x180>)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM4->CCR1 = 0;
 8000ee8:	4b2f      	ldr	r3, [pc, #188]	; (8000fa8 <execute_phase+0x184>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	635a      	str	r2, [r3, #52]	; 0x34
			TIM4->CCR2 = speed;
 8000eee:	4a2e      	ldr	r2, [pc, #184]	; (8000fa8 <execute_phase+0x184>)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	6393      	str	r3, [r2, #56]	; 0x38
			TIM4->CCR3 = 0;
 8000ef4:	4b2c      	ldr	r3, [pc, #176]	; (8000fa8 <execute_phase+0x184>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000efa:	e04b      	b.n	8000f94 <execute_phase+0x170>
		case 4:
			TIM3->CCR1 = speed;
 8000efc:	4a29      	ldr	r2, [pc, #164]	; (8000fa4 <execute_phase+0x180>)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	6353      	str	r3, [r2, #52]	; 0x34
			TIM3->CCR2 = 0;
 8000f02:	4b28      	ldr	r3, [pc, #160]	; (8000fa4 <execute_phase+0x180>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3->CCR3 = 0;
 8000f08:	4b26      	ldr	r3, [pc, #152]	; (8000fa4 <execute_phase+0x180>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM4->CCR1 = 0;
 8000f0e:	4b26      	ldr	r3, [pc, #152]	; (8000fa8 <execute_phase+0x184>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	635a      	str	r2, [r3, #52]	; 0x34
			TIM4->CCR2 = speed;
 8000f14:	4a24      	ldr	r2, [pc, #144]	; (8000fa8 <execute_phase+0x184>)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	6393      	str	r3, [r2, #56]	; 0x38
			TIM4->CCR3 = speed;
 8000f1a:	4a23      	ldr	r2, [pc, #140]	; (8000fa8 <execute_phase+0x184>)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 8000f20:	e038      	b.n	8000f94 <execute_phase+0x170>
		case 5:
			TIM3->CCR1 = speed;
 8000f22:	4a20      	ldr	r2, [pc, #128]	; (8000fa4 <execute_phase+0x180>)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	6353      	str	r3, [r2, #52]	; 0x34
			TIM3->CCR2 = speed;
 8000f28:	4a1e      	ldr	r2, [pc, #120]	; (8000fa4 <execute_phase+0x180>)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	6393      	str	r3, [r2, #56]	; 0x38
			TIM3->CCR3 = 0;
 8000f2e:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <execute_phase+0x180>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM4->CCR1 = 0;
 8000f34:	4b1c      	ldr	r3, [pc, #112]	; (8000fa8 <execute_phase+0x184>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	635a      	str	r2, [r3, #52]	; 0x34
			TIM4->CCR2 = 0;
 8000f3a:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <execute_phase+0x184>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	639a      	str	r2, [r3, #56]	; 0x38
			TIM4->CCR3 = speed;
 8000f40:	4a19      	ldr	r2, [pc, #100]	; (8000fa8 <execute_phase+0x184>)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 8000f46:	e025      	b.n	8000f94 <execute_phase+0x170>
		case 6:
			TIM3->CCR1 = 0;
 8000f48:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <execute_phase+0x180>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = speed;
 8000f4e:	4a15      	ldr	r2, [pc, #84]	; (8000fa4 <execute_phase+0x180>)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	6393      	str	r3, [r2, #56]	; 0x38
			TIM3->CCR3 = 0;
 8000f54:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <execute_phase+0x180>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM4->CCR1 = speed;
 8000f5a:	4a13      	ldr	r2, [pc, #76]	; (8000fa8 <execute_phase+0x184>)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	6353      	str	r3, [r2, #52]	; 0x34
			TIM4->CCR2 = 0;
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <execute_phase+0x184>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	639a      	str	r2, [r3, #56]	; 0x38
			TIM4->CCR3 = speed;
 8000f66:	4a10      	ldr	r2, [pc, #64]	; (8000fa8 <execute_phase+0x184>)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 8000f6c:	e012      	b.n	8000f94 <execute_phase+0x170>
		case 7:
			TIM3->CCR1 = speed;
 8000f6e:	4a0d      	ldr	r2, [pc, #52]	; (8000fa4 <execute_phase+0x180>)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	6353      	str	r3, [r2, #52]	; 0x34
			TIM3->CCR2 = speed;
 8000f74:	4a0b      	ldr	r2, [pc, #44]	; (8000fa4 <execute_phase+0x180>)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	6393      	str	r3, [r2, #56]	; 0x38
			TIM3->CCR3 = speed;
 8000f7a:	4a0a      	ldr	r2, [pc, #40]	; (8000fa4 <execute_phase+0x180>)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM4->CCR1 = speed;
 8000f80:	4a09      	ldr	r2, [pc, #36]	; (8000fa8 <execute_phase+0x184>)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	6353      	str	r3, [r2, #52]	; 0x34
			TIM4->CCR2 = speed;
 8000f86:	4a08      	ldr	r2, [pc, #32]	; (8000fa8 <execute_phase+0x184>)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	6393      	str	r3, [r2, #56]	; 0x38
			TIM4->CCR3 = speed;
 8000f8c:	4a06      	ldr	r2, [pc, #24]	; (8000fa8 <execute_phase+0x184>)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 8000f92:	bf00      	nop

	}
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	200003ec 	.word	0x200003ec
 8000fa4:	40000400 	.word	0x40000400
 8000fa8:	40000800 	.word	0x40000800

08000fac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fb0:	f001 f85e 	bl	8002070 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb4:	f000 f88c 	bl	80010d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb8:	f000 fc3c 	bl	8001834 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fbc:	f000 fbe0 	bl	8001780 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000fc0:	f000 fa8c 	bl	80014dc <MX_TIM3_Init>
  MX_DMA_Init();
 8000fc4:	f000 fc06 	bl	80017d4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000fc8:	f000 f8ee 	bl	80011a8 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000fcc:	f000 fb12 	bl	80015f4 <MX_TIM4_Init>
  MX_ADC2_Init();
 8000fd0:	f000 f93c 	bl	800124c <MX_ADC2_Init>
  MX_ADC3_Init();
 8000fd4:	f000 f98c 	bl	80012f0 <MX_ADC3_Init>
  MX_TIM12_Init();
 8000fd8:	f000 fb98 	bl	800170c <MX_TIM12_Init>
  MX_TIM2_Init();
 8000fdc:	f000 fa2a 	bl	8001434 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000fe0:	f000 f9d8 	bl	8001394 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim12);
 8000fe4:	482c      	ldr	r0, [pc, #176]	; (8001098 <main+0xec>)
 8000fe6:	f003 f959 	bl	800429c <HAL_TIM_Base_Start>

  HAL_TIM_Base_Start(&htim3);
 8000fea:	482c      	ldr	r0, [pc, #176]	; (800109c <main+0xf0>)
 8000fec:	f003 f956 	bl	800429c <HAL_TIM_Base_Start>
  delay_us(96); // for the pwm gitter control
 8000ff0:	2060      	movs	r0, #96	; 0x60
 8000ff2:	f7ff fbc1 	bl	8000778 <delay_us>
  HAL_TIM_Base_Start(&htim4);
 8000ff6:	482a      	ldr	r0, [pc, #168]	; (80010a0 <main+0xf4>)
 8000ff8:	f003 f950 	bl	800429c <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4827      	ldr	r0, [pc, #156]	; (800109c <main+0xf0>)
 8001000:	f003 fa0e 	bl	8004420 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001004:	2104      	movs	r1, #4
 8001006:	4825      	ldr	r0, [pc, #148]	; (800109c <main+0xf0>)
 8001008:	f003 fa0a 	bl	8004420 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800100c:	2108      	movs	r1, #8
 800100e:	4823      	ldr	r0, [pc, #140]	; (800109c <main+0xf0>)
 8001010:	f003 fa06 	bl	8004420 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001014:	2100      	movs	r1, #0
 8001016:	4822      	ldr	r0, [pc, #136]	; (80010a0 <main+0xf4>)
 8001018:	f003 fa02 	bl	8004420 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800101c:	2104      	movs	r1, #4
 800101e:	4820      	ldr	r0, [pc, #128]	; (80010a0 <main+0xf4>)
 8001020:	f003 f9fe 	bl	8004420 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001024:	2108      	movs	r1, #8
 8001026:	481e      	ldr	r0, [pc, #120]	; (80010a0 <main+0xf4>)
 8001028:	f003 f9fa 	bl	8004420 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800102c:	213c      	movs	r1, #60	; 0x3c
 800102e:	481d      	ldr	r0, [pc, #116]	; (80010a4 <main+0xf8>)
 8001030:	f003 fb64 	bl	80046fc <HAL_TIM_Encoder_Start>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET); //enable the gate driver
 8001034:	2201      	movs	r2, #1
 8001036:	2110      	movs	r1, #16
 8001038:	481b      	ldr	r0, [pc, #108]	; (80010a8 <main+0xfc>)
 800103a:	f002 fadd 	bl	80035f8 <HAL_GPIO_WritePin>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)dma_buffer_1, 2);
 800103e:	2202      	movs	r2, #2
 8001040:	491a      	ldr	r1, [pc, #104]	; (80010ac <main+0x100>)
 8001042:	481b      	ldr	r0, [pc, #108]	; (80010b0 <main+0x104>)
 8001044:	f001 f8ee 	bl	8002224 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)dma_buffer_2, 2);
 8001048:	2202      	movs	r2, #2
 800104a:	491a      	ldr	r1, [pc, #104]	; (80010b4 <main+0x108>)
 800104c:	481a      	ldr	r0, [pc, #104]	; (80010b8 <main+0x10c>)
 800104e:	f001 f8e9 	bl	8002224 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)dma_buffer_3, 2);
 8001052:	2202      	movs	r2, #2
 8001054:	4919      	ldr	r1, [pc, #100]	; (80010bc <main+0x110>)
 8001056:	481a      	ldr	r0, [pc, #104]	; (80010c0 <main+0x114>)
 8001058:	f001 f8e4 	bl	8002224 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  execute_phase(1, 1400); //communate for the phase 1 , angle = 0
 800105c:	f44f 61af 	mov.w	r1, #1400	; 0x578
 8001060:	2001      	movs	r0, #1
 8001062:	f7ff fedf 	bl	8000e24 <execute_phase>
  HAL_Delay(1000); //delay waiting for the commutation
 8001066:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800106a:	f001 f873 	bl	8002154 <HAL_Delay>
  __HAL_TIM_SET_COUNTER(&htim2,0); //reset encoder value becuase commutation has been done
 800106e:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <main+0xf8>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2200      	movs	r2, #0
 8001074:	625a      	str	r2, [r3, #36]	; 0x24
  tick = HAL_GetTick();
 8001076:	f001 f861 	bl	800213c <HAL_GetTick>
 800107a:	4603      	mov	r3, r0
 800107c:	4a11      	ldr	r2, [pc, #68]	; (80010c4 <main+0x118>)
 800107e:	6013      	str	r3, [r2, #0]
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  update_encoder();
 8001080:	f7ff fb5a 	bl	8000738 <update_encoder>
	  drive(speed2,phase);
 8001084:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <main+0x11c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a10      	ldr	r2, [pc, #64]	; (80010cc <main+0x120>)
 800108a:	6812      	ldr	r2, [r2, #0]
 800108c:	4611      	mov	r1, r2
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fb8c 	bl	80007ac <drive>
	  update_encoder();
 8001094:	e7f4      	b.n	8001080 <main+0xd4>
 8001096:	bf00      	nop
 8001098:	20000344 	.word	0x20000344
 800109c:	200002b4 	.word	0x200002b4
 80010a0:	200002fc 	.word	0x200002fc
 80010a4:	2000026c 	.word	0x2000026c
 80010a8:	40020800 	.word	0x40020800
 80010ac:	200003d0 	.word	0x200003d0
 80010b0:	2000002c 	.word	0x2000002c
 80010b4:	200003d8 	.word	0x200003d8
 80010b8:	20000074 	.word	0x20000074
 80010bc:	200003e0 	.word	0x200003e0
 80010c0:	200000bc 	.word	0x200000bc
 80010c4:	20000418 	.word	0x20000418
 80010c8:	20000000 	.word	0x20000000
 80010cc:	200003f0 	.word	0x200003f0

080010d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b094      	sub	sp, #80	; 0x50
 80010d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d6:	f107 031c 	add.w	r3, r7, #28
 80010da:	2234      	movs	r2, #52	; 0x34
 80010dc:	2100      	movs	r1, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f004 fce4 	bl	8005aac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e4:	f107 0308 	add.w	r3, r7, #8
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f4:	2300      	movs	r3, #0
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	4b29      	ldr	r3, [pc, #164]	; (80011a0 <SystemClock_Config+0xd0>)
 80010fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fc:	4a28      	ldr	r2, [pc, #160]	; (80011a0 <SystemClock_Config+0xd0>)
 80010fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001102:	6413      	str	r3, [r2, #64]	; 0x40
 8001104:	4b26      	ldr	r3, [pc, #152]	; (80011a0 <SystemClock_Config+0xd0>)
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001110:	2300      	movs	r3, #0
 8001112:	603b      	str	r3, [r7, #0]
 8001114:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <SystemClock_Config+0xd4>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800111c:	4a21      	ldr	r2, [pc, #132]	; (80011a4 <SystemClock_Config+0xd4>)
 800111e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001122:	6013      	str	r3, [r2, #0]
 8001124:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <SystemClock_Config+0xd4>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800112c:	603b      	str	r3, [r7, #0]
 800112e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001130:	2302      	movs	r3, #2
 8001132:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001134:	2301      	movs	r3, #1
 8001136:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001138:	2310      	movs	r3, #16
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800113c:	2302      	movs	r3, #2
 800113e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001140:	2300      	movs	r3, #0
 8001142:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001144:	2308      	movs	r3, #8
 8001146:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001148:	2354      	movs	r3, #84	; 0x54
 800114a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800114c:	2302      	movs	r3, #2
 800114e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001150:	2302      	movs	r3, #2
 8001152:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001154:	2302      	movs	r3, #2
 8001156:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001158:	f107 031c 	add.w	r3, r7, #28
 800115c:	4618      	mov	r0, r3
 800115e:	f002 fdaf 	bl	8003cc0 <HAL_RCC_OscConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001168:	f000 fbe6 	bl	8001938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116c:	230f      	movs	r3, #15
 800116e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001170:	2302      	movs	r3, #2
 8001172:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001178:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800117c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800117e:	2300      	movs	r3, #0
 8001180:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001182:	f107 0308 	add.w	r3, r7, #8
 8001186:	2102      	movs	r1, #2
 8001188:	4618      	mov	r0, r3
 800118a:	f002 fa4f 	bl	800362c <HAL_RCC_ClockConfig>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001194:	f000 fbd0 	bl	8001938 <Error_Handler>
  }
}
 8001198:	bf00      	nop
 800119a:	3750      	adds	r7, #80	; 0x50
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40007000 	.word	0x40007000

080011a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ae:	463b      	mov	r3, r7
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011ba:	4b22      	ldr	r3, [pc, #136]	; (8001244 <MX_ADC1_Init+0x9c>)
 80011bc:	4a22      	ldr	r2, [pc, #136]	; (8001248 <MX_ADC1_Init+0xa0>)
 80011be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011c0:	4b20      	ldr	r3, [pc, #128]	; (8001244 <MX_ADC1_Init+0x9c>)
 80011c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011c8:	4b1e      	ldr	r3, [pc, #120]	; (8001244 <MX_ADC1_Init+0x9c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80011ce:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <MX_ADC1_Init+0x9c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <MX_ADC1_Init+0x9c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011da:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <MX_ADC1_Init+0x9c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80011e2:	4b18      	ldr	r3, [pc, #96]	; (8001244 <MX_ADC1_Init+0x9c>)
 80011e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80011ea:	4b16      	ldr	r3, [pc, #88]	; (8001244 <MX_ADC1_Init+0x9c>)
 80011ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011f2:	4b14      	ldr	r3, [pc, #80]	; (8001244 <MX_ADC1_Init+0x9c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <MX_ADC1_Init+0x9c>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011fe:	4b11      	ldr	r3, [pc, #68]	; (8001244 <MX_ADC1_Init+0x9c>)
 8001200:	2201      	movs	r2, #1
 8001202:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001206:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <MX_ADC1_Init+0x9c>)
 8001208:	2201      	movs	r2, #1
 800120a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800120c:	480d      	ldr	r0, [pc, #52]	; (8001244 <MX_ADC1_Init+0x9c>)
 800120e:	f000 ffc5 	bl	800219c <HAL_ADC_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001218:	f000 fb8e 	bl	8001938 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800121c:	2300      	movs	r3, #0
 800121e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001220:	2301      	movs	r3, #1
 8001222:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001224:	2301      	movs	r3, #1
 8001226:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001228:	463b      	mov	r3, r7
 800122a:	4619      	mov	r1, r3
 800122c:	4805      	ldr	r0, [pc, #20]	; (8001244 <MX_ADC1_Init+0x9c>)
 800122e:	f001 f91d 	bl	800246c <HAL_ADC_ConfigChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001238:	f000 fb7e 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800123c:	bf00      	nop
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	2000002c 	.word	0x2000002c
 8001248:	40012000 	.word	0x40012000

0800124c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001252:	463b      	mov	r3, r7
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800125e:	4b22      	ldr	r3, [pc, #136]	; (80012e8 <MX_ADC2_Init+0x9c>)
 8001260:	4a22      	ldr	r2, [pc, #136]	; (80012ec <MX_ADC2_Init+0xa0>)
 8001262:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001264:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <MX_ADC2_Init+0x9c>)
 8001266:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800126a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800126c:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <MX_ADC2_Init+0x9c>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001272:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <MX_ADC2_Init+0x9c>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001278:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <MX_ADC2_Init+0x9c>)
 800127a:	2200      	movs	r2, #0
 800127c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800127e:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <MX_ADC2_Init+0x9c>)
 8001280:	2200      	movs	r2, #0
 8001282:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001286:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <MX_ADC2_Init+0x9c>)
 8001288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800128c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800128e:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <MX_ADC2_Init+0x9c>)
 8001290:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001294:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001296:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <MX_ADC2_Init+0x9c>)
 8001298:	2200      	movs	r2, #0
 800129a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <MX_ADC2_Init+0x9c>)
 800129e:	2201      	movs	r2, #1
 80012a0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80012a2:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <MX_ADC2_Init+0x9c>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012aa:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <MX_ADC2_Init+0x9c>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80012b0:	480d      	ldr	r0, [pc, #52]	; (80012e8 <MX_ADC2_Init+0x9c>)
 80012b2:	f000 ff73 	bl	800219c <HAL_ADC_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 80012bc:	f000 fb3c 	bl	8001938 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012c0:	2301      	movs	r3, #1
 80012c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012c4:	2301      	movs	r3, #1
 80012c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80012c8:	2301      	movs	r3, #1
 80012ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012cc:	463b      	mov	r3, r7
 80012ce:	4619      	mov	r1, r3
 80012d0:	4805      	ldr	r0, [pc, #20]	; (80012e8 <MX_ADC2_Init+0x9c>)
 80012d2:	f001 f8cb 	bl	800246c <HAL_ADC_ConfigChannel>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 80012dc:	f000 fb2c 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000074 	.word	0x20000074
 80012ec:	40012100 	.word	0x40012100

080012f0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012f6:	463b      	mov	r3, r7
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001302:	4b22      	ldr	r3, [pc, #136]	; (800138c <MX_ADC3_Init+0x9c>)
 8001304:	4a22      	ldr	r2, [pc, #136]	; (8001390 <MX_ADC3_Init+0xa0>)
 8001306:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001308:	4b20      	ldr	r3, [pc, #128]	; (800138c <MX_ADC3_Init+0x9c>)
 800130a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800130e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001310:	4b1e      	ldr	r3, [pc, #120]	; (800138c <MX_ADC3_Init+0x9c>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001316:	4b1d      	ldr	r3, [pc, #116]	; (800138c <MX_ADC3_Init+0x9c>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800131c:	4b1b      	ldr	r3, [pc, #108]	; (800138c <MX_ADC3_Init+0x9c>)
 800131e:	2200      	movs	r2, #0
 8001320:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001322:	4b1a      	ldr	r3, [pc, #104]	; (800138c <MX_ADC3_Init+0x9c>)
 8001324:	2200      	movs	r2, #0
 8001326:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800132a:	4b18      	ldr	r3, [pc, #96]	; (800138c <MX_ADC3_Init+0x9c>)
 800132c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001330:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001332:	4b16      	ldr	r3, [pc, #88]	; (800138c <MX_ADC3_Init+0x9c>)
 8001334:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001338:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800133a:	4b14      	ldr	r3, [pc, #80]	; (800138c <MX_ADC3_Init+0x9c>)
 800133c:	2200      	movs	r2, #0
 800133e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <MX_ADC3_Init+0x9c>)
 8001342:	2201      	movs	r2, #1
 8001344:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <MX_ADC3_Init+0x9c>)
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800134e:	4b0f      	ldr	r3, [pc, #60]	; (800138c <MX_ADC3_Init+0x9c>)
 8001350:	2201      	movs	r2, #1
 8001352:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001354:	480d      	ldr	r0, [pc, #52]	; (800138c <MX_ADC3_Init+0x9c>)
 8001356:	f000 ff21 	bl	800219c <HAL_ADC_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 8001360:	f000 faea 	bl	8001938 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001364:	230a      	movs	r3, #10
 8001366:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001368:	2301      	movs	r3, #1
 800136a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800136c:	2301      	movs	r3, #1
 800136e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001370:	463b      	mov	r3, r7
 8001372:	4619      	mov	r1, r3
 8001374:	4805      	ldr	r0, [pc, #20]	; (800138c <MX_ADC3_Init+0x9c>)
 8001376:	f001 f879 	bl	800246c <HAL_ADC_ConfigChannel>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8001380:	f000 fada 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	200000bc 	.word	0x200000bc
 8001390:	40012200 	.word	0x40012200

08001394 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800139a:	f107 0308 	add.w	r3, r7, #8
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a8:	463b      	mov	r3, r7
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013b0:	4b1e      	ldr	r3, [pc, #120]	; (800142c <MX_TIM1_Init+0x98>)
 80013b2:	4a1f      	ldr	r2, [pc, #124]	; (8001430 <MX_TIM1_Init+0x9c>)
 80013b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 42-1;
 80013b6:	4b1d      	ldr	r3, [pc, #116]	; (800142c <MX_TIM1_Init+0x98>)
 80013b8:	2229      	movs	r2, #41	; 0x29
 80013ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013bc:	4b1b      	ldr	r3, [pc, #108]	; (800142c <MX_TIM1_Init+0x98>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80013c2:	4b1a      	ldr	r3, [pc, #104]	; (800142c <MX_TIM1_Init+0x98>)
 80013c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ca:	4b18      	ldr	r3, [pc, #96]	; (800142c <MX_TIM1_Init+0x98>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013d0:	4b16      	ldr	r3, [pc, #88]	; (800142c <MX_TIM1_Init+0x98>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d6:	4b15      	ldr	r3, [pc, #84]	; (800142c <MX_TIM1_Init+0x98>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013dc:	4813      	ldr	r0, [pc, #76]	; (800142c <MX_TIM1_Init+0x98>)
 80013de:	f002 ff0d 	bl	80041fc <HAL_TIM_Base_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80013e8:	f000 faa6 	bl	8001938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013f2:	f107 0308 	add.w	r3, r7, #8
 80013f6:	4619      	mov	r1, r3
 80013f8:	480c      	ldr	r0, [pc, #48]	; (800142c <MX_TIM1_Init+0x98>)
 80013fa:	f003 fbd7 	bl	8004bac <HAL_TIM_ConfigClockSource>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001404:	f000 fa98 	bl	8001938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001408:	2300      	movs	r3, #0
 800140a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140c:	2300      	movs	r3, #0
 800140e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001410:	463b      	mov	r3, r7
 8001412:	4619      	mov	r1, r3
 8001414:	4805      	ldr	r0, [pc, #20]	; (800142c <MX_TIM1_Init+0x98>)
 8001416:	f003 ffd3 	bl	80053c0 <HAL_TIMEx_MasterConfigSynchronization>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001420:	f000 fa8a 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000224 	.word	0x20000224
 8001430:	40010000 	.word	0x40010000

08001434 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08c      	sub	sp, #48	; 0x30
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800143a:	f107 030c 	add.w	r3, r7, #12
 800143e:	2224      	movs	r2, #36	; 0x24
 8001440:	2100      	movs	r1, #0
 8001442:	4618      	mov	r0, r3
 8001444:	f004 fb32 	bl	8005aac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001450:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <MX_TIM2_Init+0xa4>)
 8001452:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001456:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001458:	4b1f      	ldr	r3, [pc, #124]	; (80014d8 <MX_TIM2_Init+0xa4>)
 800145a:	2200      	movs	r2, #0
 800145c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145e:	4b1e      	ldr	r3, [pc, #120]	; (80014d8 <MX_TIM2_Init+0xa4>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001464:	4b1c      	ldr	r3, [pc, #112]	; (80014d8 <MX_TIM2_Init+0xa4>)
 8001466:	f04f 32ff 	mov.w	r2, #4294967295
 800146a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146c:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <MX_TIM2_Init+0xa4>)
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001472:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <MX_TIM2_Init+0xa4>)
 8001474:	2280      	movs	r2, #128	; 0x80
 8001476:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001478:	2303      	movs	r3, #3
 800147a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800147c:	2300      	movs	r3, #0
 800147e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001480:	2301      	movs	r3, #1
 8001482:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001484:	2300      	movs	r3, #0
 8001486:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800148c:	2300      	movs	r3, #0
 800148e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001490:	2301      	movs	r3, #1
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001494:	2300      	movs	r3, #0
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800149c:	f107 030c 	add.w	r3, r7, #12
 80014a0:	4619      	mov	r1, r3
 80014a2:	480d      	ldr	r0, [pc, #52]	; (80014d8 <MX_TIM2_Init+0xa4>)
 80014a4:	f003 f884 	bl	80045b0 <HAL_TIM_Encoder_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80014ae:	f000 fa43 	bl	8001938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b2:	2300      	movs	r3, #0
 80014b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	4619      	mov	r1, r3
 80014be:	4806      	ldr	r0, [pc, #24]	; (80014d8 <MX_TIM2_Init+0xa4>)
 80014c0:	f003 ff7e 	bl	80053c0 <HAL_TIMEx_MasterConfigSynchronization>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80014ca:	f000 fa35 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014ce:	bf00      	nop
 80014d0:	3730      	adds	r7, #48	; 0x30
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	2000026c 	.word	0x2000026c

080014dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08e      	sub	sp, #56	; 0x38
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f0:	f107 0320 	add.w	r3, r7, #32
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
 8001508:	615a      	str	r2, [r3, #20]
 800150a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800150c:	4b37      	ldr	r3, [pc, #220]	; (80015ec <MX_TIM3_Init+0x110>)
 800150e:	4a38      	ldr	r2, [pc, #224]	; (80015f0 <MX_TIM3_Init+0x114>)
 8001510:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001512:	4b36      	ldr	r3, [pc, #216]	; (80015ec <MX_TIM3_Init+0x110>)
 8001514:	2200      	movs	r2, #0
 8001516:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001518:	4b34      	ldr	r3, [pc, #208]	; (80015ec <MX_TIM3_Init+0x110>)
 800151a:	2220      	movs	r2, #32
 800151c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2100;
 800151e:	4b33      	ldr	r3, [pc, #204]	; (80015ec <MX_TIM3_Init+0x110>)
 8001520:	f640 0234 	movw	r2, #2100	; 0x834
 8001524:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001526:	4b31      	ldr	r3, [pc, #196]	; (80015ec <MX_TIM3_Init+0x110>)
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800152c:	4b2f      	ldr	r3, [pc, #188]	; (80015ec <MX_TIM3_Init+0x110>)
 800152e:	2200      	movs	r2, #0
 8001530:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001532:	482e      	ldr	r0, [pc, #184]	; (80015ec <MX_TIM3_Init+0x110>)
 8001534:	f002 fe62 	bl	80041fc <HAL_TIM_Base_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800153e:	f000 f9fb 	bl	8001938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001542:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001546:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001548:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800154c:	4619      	mov	r1, r3
 800154e:	4827      	ldr	r0, [pc, #156]	; (80015ec <MX_TIM3_Init+0x110>)
 8001550:	f003 fb2c 	bl	8004bac <HAL_TIM_ConfigClockSource>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800155a:	f000 f9ed 	bl	8001938 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800155e:	4823      	ldr	r0, [pc, #140]	; (80015ec <MX_TIM3_Init+0x110>)
 8001560:	f002 ff04 	bl	800436c <HAL_TIM_PWM_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800156a:	f000 f9e5 	bl	8001938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800156e:	2320      	movs	r3, #32
 8001570:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001572:	2300      	movs	r3, #0
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001576:	f107 0320 	add.w	r3, r7, #32
 800157a:	4619      	mov	r1, r3
 800157c:	481b      	ldr	r0, [pc, #108]	; (80015ec <MX_TIM3_Init+0x110>)
 800157e:	f003 ff1f 	bl	80053c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001588:	f000 f9d6 	bl	8001938 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800158c:	2360      	movs	r3, #96	; 0x60
 800158e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001598:	2304      	movs	r3, #4
 800159a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	2200      	movs	r2, #0
 80015a0:	4619      	mov	r1, r3
 80015a2:	4812      	ldr	r0, [pc, #72]	; (80015ec <MX_TIM3_Init+0x110>)
 80015a4:	f003 fa40 	bl	8004a28 <HAL_TIM_PWM_ConfigChannel>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80015ae:	f000 f9c3 	bl	8001938 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	2204      	movs	r2, #4
 80015b6:	4619      	mov	r1, r3
 80015b8:	480c      	ldr	r0, [pc, #48]	; (80015ec <MX_TIM3_Init+0x110>)
 80015ba:	f003 fa35 	bl	8004a28 <HAL_TIM_PWM_ConfigChannel>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80015c4:	f000 f9b8 	bl	8001938 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	2208      	movs	r2, #8
 80015cc:	4619      	mov	r1, r3
 80015ce:	4807      	ldr	r0, [pc, #28]	; (80015ec <MX_TIM3_Init+0x110>)
 80015d0:	f003 fa2a 	bl	8004a28 <HAL_TIM_PWM_ConfigChannel>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80015da:	f000 f9ad 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015de:	4803      	ldr	r0, [pc, #12]	; (80015ec <MX_TIM3_Init+0x110>)
 80015e0:	f000 fbf0 	bl	8001dc4 <HAL_TIM_MspPostInit>

}
 80015e4:	bf00      	nop
 80015e6:	3738      	adds	r7, #56	; 0x38
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	200002b4 	.word	0x200002b4
 80015f0:	40000400 	.word	0x40000400

080015f4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08e      	sub	sp, #56	; 0x38
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001608:	f107 0320 	add.w	r3, r7, #32
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
 8001620:	615a      	str	r2, [r3, #20]
 8001622:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001624:	4b37      	ldr	r3, [pc, #220]	; (8001704 <MX_TIM4_Init+0x110>)
 8001626:	4a38      	ldr	r2, [pc, #224]	; (8001708 <MX_TIM4_Init+0x114>)
 8001628:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800162a:	4b36      	ldr	r3, [pc, #216]	; (8001704 <MX_TIM4_Init+0x110>)
 800162c:	2200      	movs	r2, #0
 800162e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001630:	4b34      	ldr	r3, [pc, #208]	; (8001704 <MX_TIM4_Init+0x110>)
 8001632:	2220      	movs	r2, #32
 8001634:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2100;
 8001636:	4b33      	ldr	r3, [pc, #204]	; (8001704 <MX_TIM4_Init+0x110>)
 8001638:	f640 0234 	movw	r2, #2100	; 0x834
 800163c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800163e:	4b31      	ldr	r3, [pc, #196]	; (8001704 <MX_TIM4_Init+0x110>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001644:	4b2f      	ldr	r3, [pc, #188]	; (8001704 <MX_TIM4_Init+0x110>)
 8001646:	2200      	movs	r2, #0
 8001648:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800164a:	482e      	ldr	r0, [pc, #184]	; (8001704 <MX_TIM4_Init+0x110>)
 800164c:	f002 fdd6 	bl	80041fc <HAL_TIM_Base_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001656:	f000 f96f 	bl	8001938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800165a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800165e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001660:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001664:	4619      	mov	r1, r3
 8001666:	4827      	ldr	r0, [pc, #156]	; (8001704 <MX_TIM4_Init+0x110>)
 8001668:	f003 faa0 	bl	8004bac <HAL_TIM_ConfigClockSource>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001672:	f000 f961 	bl	8001938 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001676:	4823      	ldr	r0, [pc, #140]	; (8001704 <MX_TIM4_Init+0x110>)
 8001678:	f002 fe78 	bl	800436c <HAL_TIM_PWM_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001682:	f000 f959 	bl	8001938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001686:	2300      	movs	r3, #0
 8001688:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800168a:	2300      	movs	r3, #0
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800168e:	f107 0320 	add.w	r3, r7, #32
 8001692:	4619      	mov	r1, r3
 8001694:	481b      	ldr	r0, [pc, #108]	; (8001704 <MX_TIM4_Init+0x110>)
 8001696:	f003 fe93 	bl	80053c0 <HAL_TIMEx_MasterConfigSynchronization>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80016a0:	f000 f94a 	bl	8001938 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016a4:	2360      	movs	r3, #96	; 0x60
 80016a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80016b0:	2304      	movs	r3, #4
 80016b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	2200      	movs	r2, #0
 80016b8:	4619      	mov	r1, r3
 80016ba:	4812      	ldr	r0, [pc, #72]	; (8001704 <MX_TIM4_Init+0x110>)
 80016bc:	f003 f9b4 	bl	8004a28 <HAL_TIM_PWM_ConfigChannel>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80016c6:	f000 f937 	bl	8001938 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	2204      	movs	r2, #4
 80016ce:	4619      	mov	r1, r3
 80016d0:	480c      	ldr	r0, [pc, #48]	; (8001704 <MX_TIM4_Init+0x110>)
 80016d2:	f003 f9a9 	bl	8004a28 <HAL_TIM_PWM_ConfigChannel>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80016dc:	f000 f92c 	bl	8001938 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	2208      	movs	r2, #8
 80016e4:	4619      	mov	r1, r3
 80016e6:	4807      	ldr	r0, [pc, #28]	; (8001704 <MX_TIM4_Init+0x110>)
 80016e8:	f003 f99e 	bl	8004a28 <HAL_TIM_PWM_ConfigChannel>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 80016f2:	f000 f921 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80016f6:	4803      	ldr	r0, [pc, #12]	; (8001704 <MX_TIM4_Init+0x110>)
 80016f8:	f000 fb64 	bl	8001dc4 <HAL_TIM_MspPostInit>

}
 80016fc:	bf00      	nop
 80016fe:	3738      	adds	r7, #56	; 0x38
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	200002fc 	.word	0x200002fc
 8001708:	40000800 	.word	0x40000800

0800170c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001712:	463b      	mov	r3, r7
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800171e:	4b16      	ldr	r3, [pc, #88]	; (8001778 <MX_TIM12_Init+0x6c>)
 8001720:	4a16      	ldr	r2, [pc, #88]	; (800177c <MX_TIM12_Init+0x70>)
 8001722:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 42-1;
 8001724:	4b14      	ldr	r3, [pc, #80]	; (8001778 <MX_TIM12_Init+0x6c>)
 8001726:	2229      	movs	r2, #41	; 0x29
 8001728:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172a:	4b13      	ldr	r3, [pc, #76]	; (8001778 <MX_TIM12_Init+0x6c>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <MX_TIM12_Init+0x6c>)
 8001732:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001736:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001738:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <MX_TIM12_Init+0x6c>)
 800173a:	2200      	movs	r2, #0
 800173c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <MX_TIM12_Init+0x6c>)
 8001740:	2200      	movs	r2, #0
 8001742:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001744:	480c      	ldr	r0, [pc, #48]	; (8001778 <MX_TIM12_Init+0x6c>)
 8001746:	f002 fd59 	bl	80041fc <HAL_TIM_Base_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8001750:	f000 f8f2 	bl	8001938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001758:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800175a:	463b      	mov	r3, r7
 800175c:	4619      	mov	r1, r3
 800175e:	4806      	ldr	r0, [pc, #24]	; (8001778 <MX_TIM12_Init+0x6c>)
 8001760:	f003 fa24 	bl	8004bac <HAL_TIM_ConfigClockSource>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 800176a:	f000 f8e5 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 800176e:	bf00      	nop
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000344 	.word	0x20000344
 800177c:	40001800 	.word	0x40001800

08001780 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001784:	4b11      	ldr	r3, [pc, #68]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 8001786:	4a12      	ldr	r2, [pc, #72]	; (80017d0 <MX_USART2_UART_Init+0x50>)
 8001788:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 800178c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001790:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 800179a:	2200      	movs	r2, #0
 800179c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 80017a6:	220c      	movs	r2, #12
 80017a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017b6:	4805      	ldr	r0, [pc, #20]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 80017b8:	f003 fe92 	bl	80054e0 <HAL_UART_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017c2:	f000 f8b9 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	2000038c 	.word	0x2000038c
 80017d0:	40004400 	.word	0x40004400

080017d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	4b14      	ldr	r3, [pc, #80]	; (8001830 <MX_DMA_Init+0x5c>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a13      	ldr	r2, [pc, #76]	; (8001830 <MX_DMA_Init+0x5c>)
 80017e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b11      	ldr	r3, [pc, #68]	; (8001830 <MX_DMA_Init+0x5c>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2100      	movs	r1, #0
 80017fa:	2038      	movs	r0, #56	; 0x38
 80017fc:	f001 f9c1 	bl	8002b82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001800:	2038      	movs	r0, #56	; 0x38
 8001802:	f001 f9da 	bl	8002bba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001806:	2200      	movs	r2, #0
 8001808:	2100      	movs	r1, #0
 800180a:	2039      	movs	r0, #57	; 0x39
 800180c:	f001 f9b9 	bl	8002b82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001810:	2039      	movs	r0, #57	; 0x39
 8001812:	f001 f9d2 	bl	8002bba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001816:	2200      	movs	r2, #0
 8001818:	2100      	movs	r1, #0
 800181a:	203a      	movs	r0, #58	; 0x3a
 800181c:	f001 f9b1 	bl	8002b82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001820:	203a      	movs	r0, #58	; 0x3a
 8001822:	f001 f9ca 	bl	8002bba <HAL_NVIC_EnableIRQ>

}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800

08001834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	; 0x28
 8001838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]
 8001846:	60da      	str	r2, [r3, #12]
 8001848:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	613b      	str	r3, [r7, #16]
 800184e:	4b37      	ldr	r3, [pc, #220]	; (800192c <MX_GPIO_Init+0xf8>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a36      	ldr	r2, [pc, #216]	; (800192c <MX_GPIO_Init+0xf8>)
 8001854:	f043 0304 	orr.w	r3, r3, #4
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b34      	ldr	r3, [pc, #208]	; (800192c <MX_GPIO_Init+0xf8>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0304 	and.w	r3, r3, #4
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	4b30      	ldr	r3, [pc, #192]	; (800192c <MX_GPIO_Init+0xf8>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a2f      	ldr	r2, [pc, #188]	; (800192c <MX_GPIO_Init+0xf8>)
 8001870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b2d      	ldr	r3, [pc, #180]	; (800192c <MX_GPIO_Init+0xf8>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	4b29      	ldr	r3, [pc, #164]	; (800192c <MX_GPIO_Init+0xf8>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a28      	ldr	r2, [pc, #160]	; (800192c <MX_GPIO_Init+0xf8>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b26      	ldr	r3, [pc, #152]	; (800192c <MX_GPIO_Init+0xf8>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]
 80018a2:	4b22      	ldr	r3, [pc, #136]	; (800192c <MX_GPIO_Init+0xf8>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a21      	ldr	r2, [pc, #132]	; (800192c <MX_GPIO_Init+0xf8>)
 80018a8:	f043 0302 	orr.w	r3, r3, #2
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b1f      	ldr	r3, [pc, #124]	; (800192c <MX_GPIO_Init+0xf8>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2130      	movs	r1, #48	; 0x30
 80018be:	481c      	ldr	r0, [pc, #112]	; (8001930 <MX_GPIO_Init+0xfc>)
 80018c0:	f001 fe9a 	bl	80035f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80018c4:	2200      	movs	r2, #0
 80018c6:	2110      	movs	r1, #16
 80018c8:	481a      	ldr	r0, [pc, #104]	; (8001934 <MX_GPIO_Init+0x100>)
 80018ca:	f001 fe95 	bl	80035f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018d4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80018d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	4619      	mov	r1, r3
 80018e4:	4813      	ldr	r0, [pc, #76]	; (8001934 <MX_GPIO_Init+0x100>)
 80018e6:	f001 fcf3 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 80018ea:	2330      	movs	r3, #48	; 0x30
 80018ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ee:	2301      	movs	r3, #1
 80018f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f6:	2300      	movs	r3, #0
 80018f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fa:	f107 0314 	add.w	r3, r7, #20
 80018fe:	4619      	mov	r1, r3
 8001900:	480b      	ldr	r0, [pc, #44]	; (8001930 <MX_GPIO_Init+0xfc>)
 8001902:	f001 fce5 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001906:	2310      	movs	r3, #16
 8001908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190a:	2301      	movs	r3, #1
 800190c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001912:	2300      	movs	r3, #0
 8001914:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001916:	f107 0314 	add.w	r3, r7, #20
 800191a:	4619      	mov	r1, r3
 800191c:	4805      	ldr	r0, [pc, #20]	; (8001934 <MX_GPIO_Init+0x100>)
 800191e:	f001 fcd7 	bl	80032d0 <HAL_GPIO_Init>

}
 8001922:	bf00      	nop
 8001924:	3728      	adds	r7, #40	; 0x28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40023800 	.word	0x40023800
 8001930:	40020000 	.word	0x40020000
 8001934:	40020800 	.word	0x40020800

08001938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800193c:	b672      	cpsid	i
}
 800193e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001940:	e7fe      	b.n	8001940 <Error_Handler+0x8>
	...

08001944 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	607b      	str	r3, [r7, #4]
 800194e:	4b10      	ldr	r3, [pc, #64]	; (8001990 <HAL_MspInit+0x4c>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001952:	4a0f      	ldr	r2, [pc, #60]	; (8001990 <HAL_MspInit+0x4c>)
 8001954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001958:	6453      	str	r3, [r2, #68]	; 0x44
 800195a:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <HAL_MspInit+0x4c>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001962:	607b      	str	r3, [r7, #4]
 8001964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	603b      	str	r3, [r7, #0]
 800196a:	4b09      	ldr	r3, [pc, #36]	; (8001990 <HAL_MspInit+0x4c>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	4a08      	ldr	r2, [pc, #32]	; (8001990 <HAL_MspInit+0x4c>)
 8001970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001974:	6413      	str	r3, [r2, #64]	; 0x40
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <HAL_MspInit+0x4c>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197e:	603b      	str	r3, [r7, #0]
 8001980:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001982:	2007      	movs	r0, #7
 8001984:	f001 f8f2 	bl	8002b6c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001988:	bf00      	nop
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40023800 	.word	0x40023800

08001994 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08e      	sub	sp, #56	; 0x38
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a8f      	ldr	r2, [pc, #572]	; (8001bf0 <HAL_ADC_MspInit+0x25c>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d159      	bne.n	8001a6a <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	623b      	str	r3, [r7, #32]
 80019ba:	4b8e      	ldr	r3, [pc, #568]	; (8001bf4 <HAL_ADC_MspInit+0x260>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	4a8d      	ldr	r2, [pc, #564]	; (8001bf4 <HAL_ADC_MspInit+0x260>)
 80019c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c4:	6453      	str	r3, [r2, #68]	; 0x44
 80019c6:	4b8b      	ldr	r3, [pc, #556]	; (8001bf4 <HAL_ADC_MspInit+0x260>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ce:	623b      	str	r3, [r7, #32]
 80019d0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	61fb      	str	r3, [r7, #28]
 80019d6:	4b87      	ldr	r3, [pc, #540]	; (8001bf4 <HAL_ADC_MspInit+0x260>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4a86      	ldr	r2, [pc, #536]	; (8001bf4 <HAL_ADC_MspInit+0x260>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	6313      	str	r3, [r2, #48]	; 0x30
 80019e2:	4b84      	ldr	r3, [pc, #528]	; (8001bf4 <HAL_ADC_MspInit+0x260>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	61fb      	str	r3, [r7, #28]
 80019ec:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019ee:	2301      	movs	r3, #1
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019f2:	2303      	movs	r3, #3
 80019f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019fe:	4619      	mov	r1, r3
 8001a00:	487d      	ldr	r0, [pc, #500]	; (8001bf8 <HAL_ADC_MspInit+0x264>)
 8001a02:	f001 fc65 	bl	80032d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001a06:	4b7d      	ldr	r3, [pc, #500]	; (8001bfc <HAL_ADC_MspInit+0x268>)
 8001a08:	4a7d      	ldr	r2, [pc, #500]	; (8001c00 <HAL_ADC_MspInit+0x26c>)
 8001a0a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001a0c:	4b7b      	ldr	r3, [pc, #492]	; (8001bfc <HAL_ADC_MspInit+0x268>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a12:	4b7a      	ldr	r3, [pc, #488]	; (8001bfc <HAL_ADC_MspInit+0x268>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a18:	4b78      	ldr	r3, [pc, #480]	; (8001bfc <HAL_ADC_MspInit+0x268>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a1e:	4b77      	ldr	r3, [pc, #476]	; (8001bfc <HAL_ADC_MspInit+0x268>)
 8001a20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a24:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a26:	4b75      	ldr	r3, [pc, #468]	; (8001bfc <HAL_ADC_MspInit+0x268>)
 8001a28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a2c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a2e:	4b73      	ldr	r3, [pc, #460]	; (8001bfc <HAL_ADC_MspInit+0x268>)
 8001a30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a34:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a36:	4b71      	ldr	r3, [pc, #452]	; (8001bfc <HAL_ADC_MspInit+0x268>)
 8001a38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a3c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001a3e:	4b6f      	ldr	r3, [pc, #444]	; (8001bfc <HAL_ADC_MspInit+0x268>)
 8001a40:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001a44:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a46:	4b6d      	ldr	r3, [pc, #436]	; (8001bfc <HAL_ADC_MspInit+0x268>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a4c:	486b      	ldr	r0, [pc, #428]	; (8001bfc <HAL_ADC_MspInit+0x268>)
 8001a4e:	f001 f8cf 	bl	8002bf0 <HAL_DMA_Init>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001a58:	f7ff ff6e 	bl	8001938 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a67      	ldr	r2, [pc, #412]	; (8001bfc <HAL_ADC_MspInit+0x268>)
 8001a60:	639a      	str	r2, [r3, #56]	; 0x38
 8001a62:	4a66      	ldr	r2, [pc, #408]	; (8001bfc <HAL_ADC_MspInit+0x268>)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001a68:	e0be      	b.n	8001be8 <HAL_ADC_MspInit+0x254>
  else if(hadc->Instance==ADC2)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a65      	ldr	r2, [pc, #404]	; (8001c04 <HAL_ADC_MspInit+0x270>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d15a      	bne.n	8001b2a <HAL_ADC_MspInit+0x196>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001a74:	2300      	movs	r3, #0
 8001a76:	61bb      	str	r3, [r7, #24]
 8001a78:	4b5e      	ldr	r3, [pc, #376]	; (8001bf4 <HAL_ADC_MspInit+0x260>)
 8001a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7c:	4a5d      	ldr	r2, [pc, #372]	; (8001bf4 <HAL_ADC_MspInit+0x260>)
 8001a7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a82:	6453      	str	r3, [r2, #68]	; 0x44
 8001a84:	4b5b      	ldr	r3, [pc, #364]	; (8001bf4 <HAL_ADC_MspInit+0x260>)
 8001a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a8c:	61bb      	str	r3, [r7, #24]
 8001a8e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	4b57      	ldr	r3, [pc, #348]	; (8001bf4 <HAL_ADC_MspInit+0x260>)
 8001a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a98:	4a56      	ldr	r2, [pc, #344]	; (8001bf4 <HAL_ADC_MspInit+0x260>)
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa0:	4b54      	ldr	r3, [pc, #336]	; (8001bf4 <HAL_ADC_MspInit+0x260>)
 8001aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001aac:	2302      	movs	r3, #2
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001abc:	4619      	mov	r1, r3
 8001abe:	484e      	ldr	r0, [pc, #312]	; (8001bf8 <HAL_ADC_MspInit+0x264>)
 8001ac0:	f001 fc06 	bl	80032d0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8001ac4:	4b50      	ldr	r3, [pc, #320]	; (8001c08 <HAL_ADC_MspInit+0x274>)
 8001ac6:	4a51      	ldr	r2, [pc, #324]	; (8001c0c <HAL_ADC_MspInit+0x278>)
 8001ac8:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001aca:	4b4f      	ldr	r3, [pc, #316]	; (8001c08 <HAL_ADC_MspInit+0x274>)
 8001acc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ad0:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ad2:	4b4d      	ldr	r3, [pc, #308]	; (8001c08 <HAL_ADC_MspInit+0x274>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ad8:	4b4b      	ldr	r3, [pc, #300]	; (8001c08 <HAL_ADC_MspInit+0x274>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001ade:	4b4a      	ldr	r3, [pc, #296]	; (8001c08 <HAL_ADC_MspInit+0x274>)
 8001ae0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ae4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ae6:	4b48      	ldr	r3, [pc, #288]	; (8001c08 <HAL_ADC_MspInit+0x274>)
 8001ae8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001aec:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001aee:	4b46      	ldr	r3, [pc, #280]	; (8001c08 <HAL_ADC_MspInit+0x274>)
 8001af0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001af4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001af6:	4b44      	ldr	r3, [pc, #272]	; (8001c08 <HAL_ADC_MspInit+0x274>)
 8001af8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001afc:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001afe:	4b42      	ldr	r3, [pc, #264]	; (8001c08 <HAL_ADC_MspInit+0x274>)
 8001b00:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001b04:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b06:	4b40      	ldr	r3, [pc, #256]	; (8001c08 <HAL_ADC_MspInit+0x274>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001b0c:	483e      	ldr	r0, [pc, #248]	; (8001c08 <HAL_ADC_MspInit+0x274>)
 8001b0e:	f001 f86f 	bl	8002bf0 <HAL_DMA_Init>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <HAL_ADC_MspInit+0x188>
      Error_Handler();
 8001b18:	f7ff ff0e 	bl	8001938 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a3a      	ldr	r2, [pc, #232]	; (8001c08 <HAL_ADC_MspInit+0x274>)
 8001b20:	639a      	str	r2, [r3, #56]	; 0x38
 8001b22:	4a39      	ldr	r2, [pc, #228]	; (8001c08 <HAL_ADC_MspInit+0x274>)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001b28:	e05e      	b.n	8001be8 <HAL_ADC_MspInit+0x254>
  else if(hadc->Instance==ADC3)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a38      	ldr	r2, [pc, #224]	; (8001c10 <HAL_ADC_MspInit+0x27c>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d159      	bne.n	8001be8 <HAL_ADC_MspInit+0x254>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001b34:	2300      	movs	r3, #0
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	4b2e      	ldr	r3, [pc, #184]	; (8001bf4 <HAL_ADC_MspInit+0x260>)
 8001b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3c:	4a2d      	ldr	r2, [pc, #180]	; (8001bf4 <HAL_ADC_MspInit+0x260>)
 8001b3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b42:	6453      	str	r3, [r2, #68]	; 0x44
 8001b44:	4b2b      	ldr	r3, [pc, #172]	; (8001bf4 <HAL_ADC_MspInit+0x260>)
 8001b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	4b27      	ldr	r3, [pc, #156]	; (8001bf4 <HAL_ADC_MspInit+0x260>)
 8001b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b58:	4a26      	ldr	r2, [pc, #152]	; (8001bf4 <HAL_ADC_MspInit+0x260>)
 8001b5a:	f043 0304 	orr.w	r3, r3, #4
 8001b5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b60:	4b24      	ldr	r3, [pc, #144]	; (8001bf4 <HAL_ADC_MspInit+0x260>)
 8001b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b70:	2303      	movs	r3, #3
 8001b72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4825      	ldr	r0, [pc, #148]	; (8001c14 <HAL_ADC_MspInit+0x280>)
 8001b80:	f001 fba6 	bl	80032d0 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8001b84:	4b24      	ldr	r3, [pc, #144]	; (8001c18 <HAL_ADC_MspInit+0x284>)
 8001b86:	4a25      	ldr	r2, [pc, #148]	; (8001c1c <HAL_ADC_MspInit+0x288>)
 8001b88:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001b8a:	4b23      	ldr	r3, [pc, #140]	; (8001c18 <HAL_ADC_MspInit+0x284>)
 8001b8c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b90:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b92:	4b21      	ldr	r3, [pc, #132]	; (8001c18 <HAL_ADC_MspInit+0x284>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b98:	4b1f      	ldr	r3, [pc, #124]	; (8001c18 <HAL_ADC_MspInit+0x284>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001b9e:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <HAL_ADC_MspInit+0x284>)
 8001ba0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ba4:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ba6:	4b1c      	ldr	r3, [pc, #112]	; (8001c18 <HAL_ADC_MspInit+0x284>)
 8001ba8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bac:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001bae:	4b1a      	ldr	r3, [pc, #104]	; (8001c18 <HAL_ADC_MspInit+0x284>)
 8001bb0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bb4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001bb6:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <HAL_ADC_MspInit+0x284>)
 8001bb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bbc:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001bbe:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <HAL_ADC_MspInit+0x284>)
 8001bc0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001bc4:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bc6:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <HAL_ADC_MspInit+0x284>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001bcc:	4812      	ldr	r0, [pc, #72]	; (8001c18 <HAL_ADC_MspInit+0x284>)
 8001bce:	f001 f80f 	bl	8002bf0 <HAL_DMA_Init>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <HAL_ADC_MspInit+0x248>
      Error_Handler();
 8001bd8:	f7ff feae 	bl	8001938 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a0e      	ldr	r2, [pc, #56]	; (8001c18 <HAL_ADC_MspInit+0x284>)
 8001be0:	639a      	str	r2, [r3, #56]	; 0x38
 8001be2:	4a0d      	ldr	r2, [pc, #52]	; (8001c18 <HAL_ADC_MspInit+0x284>)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001be8:	bf00      	nop
 8001bea:	3738      	adds	r7, #56	; 0x38
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40012000 	.word	0x40012000
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40020000 	.word	0x40020000
 8001bfc:	20000104 	.word	0x20000104
 8001c00:	40026410 	.word	0x40026410
 8001c04:	40012100 	.word	0x40012100
 8001c08:	20000164 	.word	0x20000164
 8001c0c:	40026440 	.word	0x40026440
 8001c10:	40012200 	.word	0x40012200
 8001c14:	40020800 	.word	0x40020800
 8001c18:	200001c4 	.word	0x200001c4
 8001c1c:	40026428 	.word	0x40026428

08001c20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a2c      	ldr	r2, [pc, #176]	; (8001ce0 <HAL_TIM_Base_MspInit+0xc0>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d116      	bne.n	8001c60 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	4b2b      	ldr	r3, [pc, #172]	; (8001ce4 <HAL_TIM_Base_MspInit+0xc4>)
 8001c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3a:	4a2a      	ldr	r2, [pc, #168]	; (8001ce4 <HAL_TIM_Base_MspInit+0xc4>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	6453      	str	r3, [r2, #68]	; 0x44
 8001c42:	4b28      	ldr	r3, [pc, #160]	; (8001ce4 <HAL_TIM_Base_MspInit+0xc4>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2100      	movs	r1, #0
 8001c52:	201b      	movs	r0, #27
 8001c54:	f000 ff95 	bl	8002b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001c58:	201b      	movs	r0, #27
 8001c5a:	f000 ffae 	bl	8002bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001c5e:	e03a      	b.n	8001cd6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a20      	ldr	r2, [pc, #128]	; (8001ce8 <HAL_TIM_Base_MspInit+0xc8>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d10e      	bne.n	8001c88 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <HAL_TIM_Base_MspInit+0xc4>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	4a1c      	ldr	r2, [pc, #112]	; (8001ce4 <HAL_TIM_Base_MspInit+0xc4>)
 8001c74:	f043 0302 	orr.w	r3, r3, #2
 8001c78:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ce4 <HAL_TIM_Base_MspInit+0xc4>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	693b      	ldr	r3, [r7, #16]
}
 8001c86:	e026      	b.n	8001cd6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a17      	ldr	r2, [pc, #92]	; (8001cec <HAL_TIM_Base_MspInit+0xcc>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d10e      	bne.n	8001cb0 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <HAL_TIM_Base_MspInit+0xc4>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	4a12      	ldr	r2, [pc, #72]	; (8001ce4 <HAL_TIM_Base_MspInit+0xc4>)
 8001c9c:	f043 0304 	orr.w	r3, r3, #4
 8001ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <HAL_TIM_Base_MspInit+0xc4>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
}
 8001cae:	e012      	b.n	8001cd6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM12)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a0e      	ldr	r2, [pc, #56]	; (8001cf0 <HAL_TIM_Base_MspInit+0xd0>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d10d      	bne.n	8001cd6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60bb      	str	r3, [r7, #8]
 8001cbe:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <HAL_TIM_Base_MspInit+0xc4>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	4a08      	ldr	r2, [pc, #32]	; (8001ce4 <HAL_TIM_Base_MspInit+0xc4>)
 8001cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cca:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_TIM_Base_MspInit+0xc4>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd2:	60bb      	str	r3, [r7, #8]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
}
 8001cd6:	bf00      	nop
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40010000 	.word	0x40010000
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40000400 	.word	0x40000400
 8001cec:	40000800 	.word	0x40000800
 8001cf0:	40001800 	.word	0x40001800

08001cf4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08a      	sub	sp, #40	; 0x28
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfc:	f107 0314 	add.w	r3, r7, #20
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d14:	d14b      	bne.n	8001dae <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	4b27      	ldr	r3, [pc, #156]	; (8001db8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	4a26      	ldr	r2, [pc, #152]	; (8001db8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	6413      	str	r3, [r2, #64]	; 0x40
 8001d26:	4b24      	ldr	r3, [pc, #144]	; (8001db8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	4b20      	ldr	r3, [pc, #128]	; (8001db8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	4a1f      	ldr	r2, [pc, #124]	; (8001db8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6313      	str	r3, [r2, #48]	; 0x30
 8001d42:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	4a18      	ldr	r2, [pc, #96]	; (8001db8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001d58:	f043 0302 	orr.w	r3, r3, #2
 8001d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5e:	4b16      	ldr	r3, [pc, #88]	; (8001db8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d70:	2302      	movs	r3, #2
 8001d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d80:	f107 0314 	add.w	r3, r7, #20
 8001d84:	4619      	mov	r1, r3
 8001d86:	480d      	ldr	r0, [pc, #52]	; (8001dbc <HAL_TIM_Encoder_MspInit+0xc8>)
 8001d88:	f001 faa2 	bl	80032d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d92:	2302      	movs	r3, #2
 8001d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da2:	f107 0314 	add.w	r3, r7, #20
 8001da6:	4619      	mov	r1, r3
 8001da8:	4805      	ldr	r0, [pc, #20]	; (8001dc0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001daa:	f001 fa91 	bl	80032d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001dae:	bf00      	nop
 8001db0:	3728      	adds	r7, #40	; 0x28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40020000 	.word	0x40020000
 8001dc0:	40020400 	.word	0x40020400

08001dc4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08a      	sub	sp, #40	; 0x28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dcc:	f107 0314 	add.w	r3, r7, #20
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a33      	ldr	r2, [pc, #204]	; (8001eb0 <HAL_TIM_MspPostInit+0xec>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d13c      	bne.n	8001e60 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	4b32      	ldr	r3, [pc, #200]	; (8001eb4 <HAL_TIM_MspPostInit+0xf0>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a31      	ldr	r2, [pc, #196]	; (8001eb4 <HAL_TIM_MspPostInit+0xf0>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b2f      	ldr	r3, [pc, #188]	; (8001eb4 <HAL_TIM_MspPostInit+0xf0>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	4b2b      	ldr	r3, [pc, #172]	; (8001eb4 <HAL_TIM_MspPostInit+0xf0>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a2a      	ldr	r2, [pc, #168]	; (8001eb4 <HAL_TIM_MspPostInit+0xf0>)
 8001e0c:	f043 0302 	orr.w	r3, r3, #2
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b28      	ldr	r3, [pc, #160]	; (8001eb4 <HAL_TIM_MspPostInit+0xf0>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e1e:	23c0      	movs	r3, #192	; 0xc0
 8001e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e32:	f107 0314 	add.w	r3, r7, #20
 8001e36:	4619      	mov	r1, r3
 8001e38:	481f      	ldr	r0, [pc, #124]	; (8001eb8 <HAL_TIM_MspPostInit+0xf4>)
 8001e3a:	f001 fa49 	bl	80032d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e42:	2302      	movs	r3, #2
 8001e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e52:	f107 0314 	add.w	r3, r7, #20
 8001e56:	4619      	mov	r1, r3
 8001e58:	4818      	ldr	r0, [pc, #96]	; (8001ebc <HAL_TIM_MspPostInit+0xf8>)
 8001e5a:	f001 fa39 	bl	80032d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001e5e:	e023      	b.n	8001ea8 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM4)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a16      	ldr	r2, [pc, #88]	; (8001ec0 <HAL_TIM_MspPostInit+0xfc>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d11e      	bne.n	8001ea8 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <HAL_TIM_MspPostInit+0xf0>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	4a10      	ldr	r2, [pc, #64]	; (8001eb4 <HAL_TIM_MspPostInit+0xf0>)
 8001e74:	f043 0302 	orr.w	r3, r3, #2
 8001e78:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7a:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <HAL_TIM_MspPostInit+0xf0>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	60bb      	str	r3, [r7, #8]
 8001e84:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001e86:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e94:	2300      	movs	r3, #0
 8001e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9c:	f107 0314 	add.w	r3, r7, #20
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4806      	ldr	r0, [pc, #24]	; (8001ebc <HAL_TIM_MspPostInit+0xf8>)
 8001ea4:	f001 fa14 	bl	80032d0 <HAL_GPIO_Init>
}
 8001ea8:	bf00      	nop
 8001eaa:	3728      	adds	r7, #40	; 0x28
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40000400 	.word	0x40000400
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	40020000 	.word	0x40020000
 8001ebc:	40020400 	.word	0x40020400
 8001ec0:	40000800 	.word	0x40000800

08001ec4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08a      	sub	sp, #40	; 0x28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a19      	ldr	r2, [pc, #100]	; (8001f48 <HAL_UART_MspInit+0x84>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d12b      	bne.n	8001f3e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	4b18      	ldr	r3, [pc, #96]	; (8001f4c <HAL_UART_MspInit+0x88>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	4a17      	ldr	r2, [pc, #92]	; (8001f4c <HAL_UART_MspInit+0x88>)
 8001ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef6:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <HAL_UART_MspInit+0x88>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <HAL_UART_MspInit+0x88>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	4a10      	ldr	r2, [pc, #64]	; (8001f4c <HAL_UART_MspInit+0x88>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6313      	str	r3, [r2, #48]	; 0x30
 8001f12:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <HAL_UART_MspInit+0x88>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f1e:	230c      	movs	r3, #12
 8001f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f22:	2302      	movs	r3, #2
 8001f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f2e:	2307      	movs	r3, #7
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f32:	f107 0314 	add.w	r3, r7, #20
 8001f36:	4619      	mov	r1, r3
 8001f38:	4805      	ldr	r0, [pc, #20]	; (8001f50 <HAL_UART_MspInit+0x8c>)
 8001f3a:	f001 f9c9 	bl	80032d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f3e:	bf00      	nop
 8001f40:	3728      	adds	r7, #40	; 0x28
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40004400 	.word	0x40004400
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40020000 	.word	0x40020000

08001f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f58:	e7fe      	b.n	8001f58 <NMI_Handler+0x4>

08001f5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f5e:	e7fe      	b.n	8001f5e <HardFault_Handler+0x4>

08001f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f64:	e7fe      	b.n	8001f64 <MemManage_Handler+0x4>

08001f66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f6a:	e7fe      	b.n	8001f6a <BusFault_Handler+0x4>

08001f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f70:	e7fe      	b.n	8001f70 <UsageFault_Handler+0x4>

08001f72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fa0:	f000 f8b8 	bl	8002114 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fa4:	bf00      	nop
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fac:	4802      	ldr	r0, [pc, #8]	; (8001fb8 <TIM1_CC_IRQHandler+0x10>)
 8001fae:	f002 fc33 	bl	8004818 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000224 	.word	0x20000224

08001fbc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001fc0:	4802      	ldr	r0, [pc, #8]	; (8001fcc <DMA2_Stream0_IRQHandler+0x10>)
 8001fc2:	f000 ff1b 	bl	8002dfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000104 	.word	0x20000104

08001fd0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001fd4:	4802      	ldr	r0, [pc, #8]	; (8001fe0 <DMA2_Stream1_IRQHandler+0x10>)
 8001fd6:	f000 ff11 	bl	8002dfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	200001c4 	.word	0x200001c4

08001fe4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001fe8:	4802      	ldr	r0, [pc, #8]	; (8001ff4 <DMA2_Stream2_IRQHandler+0x10>)
 8001fea:	f000 ff07 	bl	8002dfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000164 	.word	0x20000164

08001ff8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <SystemInit+0x20>)
 8001ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002002:	4a05      	ldr	r2, [pc, #20]	; (8002018 <SystemInit+0x20>)
 8002004:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002008:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800201c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002054 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002020:	480d      	ldr	r0, [pc, #52]	; (8002058 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002022:	490e      	ldr	r1, [pc, #56]	; (800205c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002024:	4a0e      	ldr	r2, [pc, #56]	; (8002060 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002028:	e002      	b.n	8002030 <LoopCopyDataInit>

0800202a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800202a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800202c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800202e:	3304      	adds	r3, #4

08002030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002034:	d3f9      	bcc.n	800202a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002036:	4a0b      	ldr	r2, [pc, #44]	; (8002064 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002038:	4c0b      	ldr	r4, [pc, #44]	; (8002068 <LoopFillZerobss+0x26>)
  movs r3, #0
 800203a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800203c:	e001      	b.n	8002042 <LoopFillZerobss>

0800203e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800203e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002040:	3204      	adds	r2, #4

08002042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002044:	d3fb      	bcc.n	800203e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002046:	f7ff ffd7 	bl	8001ff8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800204a:	f003 fd0b 	bl	8005a64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800204e:	f7fe ffad 	bl	8000fac <main>
  bx  lr    
 8002052:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002054:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800205c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002060:	08005b04 	.word	0x08005b04
  ldr r2, =_sbss
 8002064:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002068:	20000420 	.word	0x20000420

0800206c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800206c:	e7fe      	b.n	800206c <ADC_IRQHandler>
	...

08002070 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002074:	4b0e      	ldr	r3, [pc, #56]	; (80020b0 <HAL_Init+0x40>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a0d      	ldr	r2, [pc, #52]	; (80020b0 <HAL_Init+0x40>)
 800207a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800207e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002080:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <HAL_Init+0x40>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a0a      	ldr	r2, [pc, #40]	; (80020b0 <HAL_Init+0x40>)
 8002086:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800208a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800208c:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <HAL_Init+0x40>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a07      	ldr	r2, [pc, #28]	; (80020b0 <HAL_Init+0x40>)
 8002092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002096:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002098:	2003      	movs	r0, #3
 800209a:	f000 fd67 	bl	8002b6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800209e:	2000      	movs	r0, #0
 80020a0:	f000 f808 	bl	80020b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020a4:	f7ff fc4e 	bl	8001944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40023c00 	.word	0x40023c00

080020b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020bc:	4b12      	ldr	r3, [pc, #72]	; (8002108 <HAL_InitTick+0x54>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	4b12      	ldr	r3, [pc, #72]	; (800210c <HAL_InitTick+0x58>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	4619      	mov	r1, r3
 80020c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 fd7f 	bl	8002bd6 <HAL_SYSTICK_Config>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e00e      	b.n	8002100 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b0f      	cmp	r3, #15
 80020e6:	d80a      	bhi.n	80020fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020e8:	2200      	movs	r2, #0
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	f04f 30ff 	mov.w	r0, #4294967295
 80020f0:	f000 fd47 	bl	8002b82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020f4:	4a06      	ldr	r2, [pc, #24]	; (8002110 <HAL_InitTick+0x5c>)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
 80020fc:	e000      	b.n	8002100 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
}
 8002100:	4618      	mov	r0, r3
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20000004 	.word	0x20000004
 800210c:	2000000c 	.word	0x2000000c
 8002110:	20000008 	.word	0x20000008

08002114 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002118:	4b06      	ldr	r3, [pc, #24]	; (8002134 <HAL_IncTick+0x20>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	461a      	mov	r2, r3
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_IncTick+0x24>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4413      	add	r3, r2
 8002124:	4a04      	ldr	r2, [pc, #16]	; (8002138 <HAL_IncTick+0x24>)
 8002126:	6013      	str	r3, [r2, #0]
}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	2000000c 	.word	0x2000000c
 8002138:	2000041c 	.word	0x2000041c

0800213c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return uwTick;
 8002140:	4b03      	ldr	r3, [pc, #12]	; (8002150 <HAL_GetTick+0x14>)
 8002142:	681b      	ldr	r3, [r3, #0]
}
 8002144:	4618      	mov	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	2000041c 	.word	0x2000041c

08002154 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800215c:	f7ff ffee 	bl	800213c <HAL_GetTick>
 8002160:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800216c:	d005      	beq.n	800217a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800216e:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <HAL_Delay+0x44>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	461a      	mov	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4413      	add	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800217a:	bf00      	nop
 800217c:	f7ff ffde 	bl	800213c <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	429a      	cmp	r2, r3
 800218a:	d8f7      	bhi.n	800217c <HAL_Delay+0x28>
  {
  }
}
 800218c:	bf00      	nop
 800218e:	bf00      	nop
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	2000000c 	.word	0x2000000c

0800219c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021a4:	2300      	movs	r3, #0
 80021a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e033      	b.n	800221a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d109      	bne.n	80021ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff fbea 	bl	8001994 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f003 0310 	and.w	r3, r3, #16
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d118      	bne.n	800220c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021e2:	f023 0302 	bic.w	r3, r3, #2
 80021e6:	f043 0202 	orr.w	r2, r3, #2
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 fa6e 	bl	80026d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	f023 0303 	bic.w	r3, r3, #3
 8002202:	f043 0201 	orr.w	r2, r3, #1
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	641a      	str	r2, [r3, #64]	; 0x40
 800220a:	e001      	b.n	8002210 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002218:	7bfb      	ldrb	r3, [r7, #15]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
	...

08002224 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <HAL_ADC_Start_DMA+0x1e>
 800223e:	2302      	movs	r3, #2
 8002240:	e0e9      	b.n	8002416 <HAL_ADC_Start_DMA+0x1f2>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b01      	cmp	r3, #1
 8002256:	d018      	beq.n	800228a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0201 	orr.w	r2, r2, #1
 8002266:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002268:	4b6d      	ldr	r3, [pc, #436]	; (8002420 <HAL_ADC_Start_DMA+0x1fc>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a6d      	ldr	r2, [pc, #436]	; (8002424 <HAL_ADC_Start_DMA+0x200>)
 800226e:	fba2 2303 	umull	r2, r3, r2, r3
 8002272:	0c9a      	lsrs	r2, r3, #18
 8002274:	4613      	mov	r3, r2
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	4413      	add	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800227c:	e002      	b.n	8002284 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	3b01      	subs	r3, #1
 8002282:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f9      	bne.n	800227e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002298:	d107      	bne.n	80022aa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	f040 80a1 	bne.w	80023fc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80022c2:	f023 0301 	bic.w	r3, r3, #1
 80022c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d007      	beq.n	80022ec <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022f8:	d106      	bne.n	8002308 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fe:	f023 0206 	bic.w	r2, r3, #6
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	645a      	str	r2, [r3, #68]	; 0x44
 8002306:	e002      	b.n	800230e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002316:	4b44      	ldr	r3, [pc, #272]	; (8002428 <HAL_ADC_Start_DMA+0x204>)
 8002318:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800231e:	4a43      	ldr	r2, [pc, #268]	; (800242c <HAL_ADC_Start_DMA+0x208>)
 8002320:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002326:	4a42      	ldr	r2, [pc, #264]	; (8002430 <HAL_ADC_Start_DMA+0x20c>)
 8002328:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232e:	4a41      	ldr	r2, [pc, #260]	; (8002434 <HAL_ADC_Start_DMA+0x210>)
 8002330:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800233a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800234a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800235a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	334c      	adds	r3, #76	; 0x4c
 8002366:	4619      	mov	r1, r3
 8002368:	68ba      	ldr	r2, [r7, #8]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f000 fcee 	bl	8002d4c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 031f 	and.w	r3, r3, #31
 8002378:	2b00      	cmp	r3, #0
 800237a:	d12a      	bne.n	80023d2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a2d      	ldr	r2, [pc, #180]	; (8002438 <HAL_ADC_Start_DMA+0x214>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d015      	beq.n	80023b2 <HAL_ADC_Start_DMA+0x18e>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a2c      	ldr	r2, [pc, #176]	; (800243c <HAL_ADC_Start_DMA+0x218>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d105      	bne.n	800239c <HAL_ADC_Start_DMA+0x178>
 8002390:	4b25      	ldr	r3, [pc, #148]	; (8002428 <HAL_ADC_Start_DMA+0x204>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 031f 	and.w	r3, r3, #31
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00a      	beq.n	80023b2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a27      	ldr	r2, [pc, #156]	; (8002440 <HAL_ADC_Start_DMA+0x21c>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d136      	bne.n	8002414 <HAL_ADC_Start_DMA+0x1f0>
 80023a6:	4b20      	ldr	r3, [pc, #128]	; (8002428 <HAL_ADC_Start_DMA+0x204>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f003 0310 	and.w	r3, r3, #16
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d130      	bne.n	8002414 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d129      	bne.n	8002414 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80023ce:	609a      	str	r2, [r3, #8]
 80023d0:	e020      	b.n	8002414 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a18      	ldr	r2, [pc, #96]	; (8002438 <HAL_ADC_Start_DMA+0x214>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d11b      	bne.n	8002414 <HAL_ADC_Start_DMA+0x1f0>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d114      	bne.n	8002414 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80023f8:	609a      	str	r2, [r3, #8]
 80023fa:	e00b      	b.n	8002414 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002400:	f043 0210 	orr.w	r2, r3, #16
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240c:	f043 0201 	orr.w	r2, r3, #1
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000004 	.word	0x20000004
 8002424:	431bde83 	.word	0x431bde83
 8002428:	40012300 	.word	0x40012300
 800242c:	080028c9 	.word	0x080028c9
 8002430:	08002983 	.word	0x08002983
 8002434:	0800299f 	.word	0x0800299f
 8002438:	40012000 	.word	0x40012000
 800243c:	40012100 	.word	0x40012100
 8002440:	40012200 	.word	0x40012200

08002444 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002476:	2300      	movs	r3, #0
 8002478:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002480:	2b01      	cmp	r3, #1
 8002482:	d101      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x1c>
 8002484:	2302      	movs	r3, #2
 8002486:	e113      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x244>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b09      	cmp	r3, #9
 8002496:	d925      	bls.n	80024e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68d9      	ldr	r1, [r3, #12]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	461a      	mov	r2, r3
 80024a6:	4613      	mov	r3, r2
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	4413      	add	r3, r2
 80024ac:	3b1e      	subs	r3, #30
 80024ae:	2207      	movs	r2, #7
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43da      	mvns	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	400a      	ands	r2, r1
 80024bc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68d9      	ldr	r1, [r3, #12]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	4618      	mov	r0, r3
 80024d0:	4603      	mov	r3, r0
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	4403      	add	r3, r0
 80024d6:	3b1e      	subs	r3, #30
 80024d8:	409a      	lsls	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	60da      	str	r2, [r3, #12]
 80024e2:	e022      	b.n	800252a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6919      	ldr	r1, [r3, #16]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	461a      	mov	r2, r3
 80024f2:	4613      	mov	r3, r2
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	4413      	add	r3, r2
 80024f8:	2207      	movs	r2, #7
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43da      	mvns	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	400a      	ands	r2, r1
 8002506:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6919      	ldr	r1, [r3, #16]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	b29b      	uxth	r3, r3
 8002518:	4618      	mov	r0, r3
 800251a:	4603      	mov	r3, r0
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	4403      	add	r3, r0
 8002520:	409a      	lsls	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	430a      	orrs	r2, r1
 8002528:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	2b06      	cmp	r3, #6
 8002530:	d824      	bhi.n	800257c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	3b05      	subs	r3, #5
 8002544:	221f      	movs	r2, #31
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43da      	mvns	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	400a      	ands	r2, r1
 8002552:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	b29b      	uxth	r3, r3
 8002560:	4618      	mov	r0, r3
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	3b05      	subs	r3, #5
 800256e:	fa00 f203 	lsl.w	r2, r0, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	430a      	orrs	r2, r1
 8002578:	635a      	str	r2, [r3, #52]	; 0x34
 800257a:	e04c      	b.n	8002616 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b0c      	cmp	r3, #12
 8002582:	d824      	bhi.n	80025ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	4613      	mov	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	3b23      	subs	r3, #35	; 0x23
 8002596:	221f      	movs	r2, #31
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43da      	mvns	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	400a      	ands	r2, r1
 80025a4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	4618      	mov	r0, r3
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	4613      	mov	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	3b23      	subs	r3, #35	; 0x23
 80025c0:	fa00 f203 	lsl.w	r2, r0, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	631a      	str	r2, [r3, #48]	; 0x30
 80025cc:	e023      	b.n	8002616 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	4613      	mov	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	3b41      	subs	r3, #65	; 0x41
 80025e0:	221f      	movs	r2, #31
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43da      	mvns	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	400a      	ands	r2, r1
 80025ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	4618      	mov	r0, r3
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	4613      	mov	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4413      	add	r3, r2
 8002608:	3b41      	subs	r3, #65	; 0x41
 800260a:	fa00 f203 	lsl.w	r2, r0, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	430a      	orrs	r2, r1
 8002614:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002616:	4b29      	ldr	r3, [pc, #164]	; (80026bc <HAL_ADC_ConfigChannel+0x250>)
 8002618:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a28      	ldr	r2, [pc, #160]	; (80026c0 <HAL_ADC_ConfigChannel+0x254>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d10f      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x1d8>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b12      	cmp	r3, #18
 800262a:	d10b      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a1d      	ldr	r2, [pc, #116]	; (80026c0 <HAL_ADC_ConfigChannel+0x254>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d12b      	bne.n	80026a6 <HAL_ADC_ConfigChannel+0x23a>
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a1c      	ldr	r2, [pc, #112]	; (80026c4 <HAL_ADC_ConfigChannel+0x258>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d003      	beq.n	8002660 <HAL_ADC_ConfigChannel+0x1f4>
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2b11      	cmp	r3, #17
 800265e:	d122      	bne.n	80026a6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a11      	ldr	r2, [pc, #68]	; (80026c4 <HAL_ADC_ConfigChannel+0x258>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d111      	bne.n	80026a6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002682:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <HAL_ADC_ConfigChannel+0x25c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a11      	ldr	r2, [pc, #68]	; (80026cc <HAL_ADC_ConfigChannel+0x260>)
 8002688:	fba2 2303 	umull	r2, r3, r2, r3
 800268c:	0c9a      	lsrs	r2, r3, #18
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002698:	e002      	b.n	80026a0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	3b01      	subs	r3, #1
 800269e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f9      	bne.n	800269a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	40012300 	.word	0x40012300
 80026c0:	40012000 	.word	0x40012000
 80026c4:	10000012 	.word	0x10000012
 80026c8:	20000004 	.word	0x20000004
 80026cc:	431bde83 	.word	0x431bde83

080026d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026d8:	4b79      	ldr	r3, [pc, #484]	; (80028c0 <ADC_Init+0x1f0>)
 80026da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	431a      	orrs	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002704:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6859      	ldr	r1, [r3, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	021a      	lsls	r2, r3, #8
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002728:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6859      	ldr	r1, [r3, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800274a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6899      	ldr	r1, [r3, #8]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68da      	ldr	r2, [r3, #12]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002762:	4a58      	ldr	r2, [pc, #352]	; (80028c4 <ADC_Init+0x1f4>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d022      	beq.n	80027ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002776:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6899      	ldr	r1, [r3, #8]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002798:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6899      	ldr	r1, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	e00f      	b.n	80027ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0202 	bic.w	r2, r2, #2
 80027dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6899      	ldr	r1, [r3, #8]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	7e1b      	ldrb	r3, [r3, #24]
 80027e8:	005a      	lsls	r2, r3, #1
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d01b      	beq.n	8002834 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800280a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800281a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6859      	ldr	r1, [r3, #4]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	3b01      	subs	r3, #1
 8002828:	035a      	lsls	r2, r3, #13
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	e007      	b.n	8002844 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002842:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002852:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	3b01      	subs	r3, #1
 8002860:	051a      	lsls	r2, r3, #20
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002878:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6899      	ldr	r1, [r3, #8]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002886:	025a      	lsls	r2, r3, #9
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800289e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6899      	ldr	r1, [r3, #8]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	029a      	lsls	r2, r3, #10
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	609a      	str	r2, [r3, #8]
}
 80028b4:	bf00      	nop
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	40012300 	.word	0x40012300
 80028c4:	0f000001 	.word	0x0f000001

080028c8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d13c      	bne.n	800295c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d12b      	bne.n	8002954 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002900:	2b00      	cmp	r3, #0
 8002902:	d127      	bne.n	8002954 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800290e:	2b00      	cmp	r3, #0
 8002910:	d006      	beq.n	8002920 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800291c:	2b00      	cmp	r3, #0
 800291e:	d119      	bne.n	8002954 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0220 	bic.w	r2, r2, #32
 800292e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d105      	bne.n	8002954 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294c:	f043 0201 	orr.w	r2, r3, #1
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f7fd fdd7 	bl	8000508 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800295a:	e00e      	b.n	800297a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	f003 0310 	and.w	r3, r3, #16
 8002964:	2b00      	cmp	r3, #0
 8002966:	d003      	beq.n	8002970 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f7ff fd75 	bl	8002458 <HAL_ADC_ErrorCallback>
}
 800296e:	e004      	b.n	800297a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	4798      	blx	r3
}
 800297a:	bf00      	nop
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b084      	sub	sp, #16
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f7ff fd57 	bl	8002444 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002996:	bf00      	nop
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b084      	sub	sp, #16
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029aa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2240      	movs	r2, #64	; 0x40
 80029b0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	f043 0204 	orr.w	r2, r3, #4
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f7ff fd4a 	bl	8002458 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029c4:	bf00      	nop
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029dc:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <__NVIC_SetPriorityGrouping+0x44>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029e8:	4013      	ands	r3, r2
 80029ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029fe:	4a04      	ldr	r2, [pc, #16]	; (8002a10 <__NVIC_SetPriorityGrouping+0x44>)
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	60d3      	str	r3, [r2, #12]
}
 8002a04:	bf00      	nop
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	e000ed00 	.word	0xe000ed00

08002a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a18:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <__NVIC_GetPriorityGrouping+0x18>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	0a1b      	lsrs	r3, r3, #8
 8002a1e:	f003 0307 	and.w	r3, r3, #7
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	4603      	mov	r3, r0
 8002a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	db0b      	blt.n	8002a5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a42:	79fb      	ldrb	r3, [r7, #7]
 8002a44:	f003 021f 	and.w	r2, r3, #31
 8002a48:	4907      	ldr	r1, [pc, #28]	; (8002a68 <__NVIC_EnableIRQ+0x38>)
 8002a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4e:	095b      	lsrs	r3, r3, #5
 8002a50:	2001      	movs	r0, #1
 8002a52:	fa00 f202 	lsl.w	r2, r0, r2
 8002a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	e000e100 	.word	0xe000e100

08002a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	4603      	mov	r3, r0
 8002a74:	6039      	str	r1, [r7, #0]
 8002a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	db0a      	blt.n	8002a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	b2da      	uxtb	r2, r3
 8002a84:	490c      	ldr	r1, [pc, #48]	; (8002ab8 <__NVIC_SetPriority+0x4c>)
 8002a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8a:	0112      	lsls	r2, r2, #4
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	440b      	add	r3, r1
 8002a90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a94:	e00a      	b.n	8002aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	4908      	ldr	r1, [pc, #32]	; (8002abc <__NVIC_SetPriority+0x50>)
 8002a9c:	79fb      	ldrb	r3, [r7, #7]
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	3b04      	subs	r3, #4
 8002aa4:	0112      	lsls	r2, r2, #4
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	761a      	strb	r2, [r3, #24]
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	e000e100 	.word	0xe000e100
 8002abc:	e000ed00 	.word	0xe000ed00

08002ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b089      	sub	sp, #36	; 0x24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f1c3 0307 	rsb	r3, r3, #7
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	bf28      	it	cs
 8002ade:	2304      	movcs	r3, #4
 8002ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	3304      	adds	r3, #4
 8002ae6:	2b06      	cmp	r3, #6
 8002ae8:	d902      	bls.n	8002af0 <NVIC_EncodePriority+0x30>
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	3b03      	subs	r3, #3
 8002aee:	e000      	b.n	8002af2 <NVIC_EncodePriority+0x32>
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af4:	f04f 32ff 	mov.w	r2, #4294967295
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	43da      	mvns	r2, r3
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	401a      	ands	r2, r3
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b08:	f04f 31ff 	mov.w	r1, #4294967295
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b12:	43d9      	mvns	r1, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b18:	4313      	orrs	r3, r2
         );
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3724      	adds	r7, #36	; 0x24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
	...

08002b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3b01      	subs	r3, #1
 8002b34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b38:	d301      	bcc.n	8002b3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e00f      	b.n	8002b5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b3e:	4a0a      	ldr	r2, [pc, #40]	; (8002b68 <SysTick_Config+0x40>)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3b01      	subs	r3, #1
 8002b44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b46:	210f      	movs	r1, #15
 8002b48:	f04f 30ff 	mov.w	r0, #4294967295
 8002b4c:	f7ff ff8e 	bl	8002a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b50:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <SysTick_Config+0x40>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b56:	4b04      	ldr	r3, [pc, #16]	; (8002b68 <SysTick_Config+0x40>)
 8002b58:	2207      	movs	r2, #7
 8002b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	e000e010 	.word	0xe000e010

08002b6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f7ff ff29 	bl	80029cc <__NVIC_SetPriorityGrouping>
}
 8002b7a:	bf00      	nop
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b086      	sub	sp, #24
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	4603      	mov	r3, r0
 8002b8a:	60b9      	str	r1, [r7, #8]
 8002b8c:	607a      	str	r2, [r7, #4]
 8002b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b94:	f7ff ff3e 	bl	8002a14 <__NVIC_GetPriorityGrouping>
 8002b98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	68b9      	ldr	r1, [r7, #8]
 8002b9e:	6978      	ldr	r0, [r7, #20]
 8002ba0:	f7ff ff8e 	bl	8002ac0 <NVIC_EncodePriority>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002baa:	4611      	mov	r1, r2
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff ff5d 	bl	8002a6c <__NVIC_SetPriority>
}
 8002bb2:	bf00      	nop
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff ff31 	bl	8002a30 <__NVIC_EnableIRQ>
}
 8002bce:	bf00      	nop
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b082      	sub	sp, #8
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7ff ffa2 	bl	8002b28 <SysTick_Config>
 8002be4:	4603      	mov	r3, r0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
	...

08002bf0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002bfc:	f7ff fa9e 	bl	800213c <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e099      	b.n	8002d40 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0201 	bic.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c2c:	e00f      	b.n	8002c4e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c2e:	f7ff fa85 	bl	800213c <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b05      	cmp	r3, #5
 8002c3a:	d908      	bls.n	8002c4e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2203      	movs	r2, #3
 8002c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e078      	b.n	8002d40 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1e8      	bne.n	8002c2e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	4b38      	ldr	r3, [pc, #224]	; (8002d48 <HAL_DMA_Init+0x158>)
 8002c68:	4013      	ands	r3, r2
 8002c6a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d107      	bne.n	8002cb8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f023 0307 	bic.w	r3, r3, #7
 8002cce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d117      	bne.n	8002d12 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00e      	beq.n	8002d12 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 fa6f 	bl	80031d8 <DMA_CheckFifoParam>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d008      	beq.n	8002d12 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2240      	movs	r2, #64	; 0x40
 8002d04:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e016      	b.n	8002d40 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fa26 	bl	800316c <DMA_CalcBaseAndBitshift>
 8002d20:	4603      	mov	r3, r0
 8002d22:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d28:	223f      	movs	r2, #63	; 0x3f
 8002d2a:	409a      	lsls	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	f010803f 	.word	0xf010803f

08002d4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
 8002d58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d62:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d101      	bne.n	8002d72 <HAL_DMA_Start_IT+0x26>
 8002d6e:	2302      	movs	r3, #2
 8002d70:	e040      	b.n	8002df4 <HAL_DMA_Start_IT+0xa8>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d12f      	bne.n	8002de6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2202      	movs	r2, #2
 8002d8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	68b9      	ldr	r1, [r7, #8]
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f000 f9b8 	bl	8003110 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da4:	223f      	movs	r2, #63	; 0x3f
 8002da6:	409a      	lsls	r2, r3
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0216 	orr.w	r2, r2, #22
 8002dba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d007      	beq.n	8002dd4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0208 	orr.w	r2, r2, #8
 8002dd2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0201 	orr.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	e005      	b.n	8002df2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002dee:	2302      	movs	r3, #2
 8002df0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e08:	4b8e      	ldr	r3, [pc, #568]	; (8003044 <HAL_DMA_IRQHandler+0x248>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a8e      	ldr	r2, [pc, #568]	; (8003048 <HAL_DMA_IRQHandler+0x24c>)
 8002e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e12:	0a9b      	lsrs	r3, r3, #10
 8002e14:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e26:	2208      	movs	r2, #8
 8002e28:	409a      	lsls	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d01a      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d013      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 0204 	bic.w	r2, r2, #4
 8002e4e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e54:	2208      	movs	r2, #8
 8002e56:	409a      	lsls	r2, r3
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e60:	f043 0201 	orr.w	r2, r3, #1
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	409a      	lsls	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4013      	ands	r3, r2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d012      	beq.n	8002e9e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00b      	beq.n	8002e9e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	409a      	lsls	r2, r3
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e96:	f043 0202 	orr.w	r2, r3, #2
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea2:	2204      	movs	r2, #4
 8002ea4:	409a      	lsls	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d012      	beq.n	8002ed4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00b      	beq.n	8002ed4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec0:	2204      	movs	r2, #4
 8002ec2:	409a      	lsls	r2, r3
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ecc:	f043 0204 	orr.w	r2, r3, #4
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed8:	2210      	movs	r2, #16
 8002eda:	409a      	lsls	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d043      	beq.n	8002f6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0308 	and.w	r3, r3, #8
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d03c      	beq.n	8002f6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef6:	2210      	movs	r2, #16
 8002ef8:	409a      	lsls	r2, r3
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d018      	beq.n	8002f3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d108      	bne.n	8002f2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d024      	beq.n	8002f6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	4798      	blx	r3
 8002f2a:	e01f      	b.n	8002f6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d01b      	beq.n	8002f6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	4798      	blx	r3
 8002f3c:	e016      	b.n	8002f6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d107      	bne.n	8002f5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0208 	bic.w	r2, r2, #8
 8002f5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f70:	2220      	movs	r2, #32
 8002f72:	409a      	lsls	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	4013      	ands	r3, r2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 808f 	beq.w	800309c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0310 	and.w	r3, r3, #16
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f000 8087 	beq.w	800309c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f92:	2220      	movs	r2, #32
 8002f94:	409a      	lsls	r2, r3
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b05      	cmp	r3, #5
 8002fa4:	d136      	bne.n	8003014 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0216 	bic.w	r2, r2, #22
 8002fb4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	695a      	ldr	r2, [r3, #20]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fc4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d103      	bne.n	8002fd6 <HAL_DMA_IRQHandler+0x1da>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d007      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0208 	bic.w	r2, r2, #8
 8002fe4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fea:	223f      	movs	r2, #63	; 0x3f
 8002fec:	409a      	lsls	r2, r3
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003006:	2b00      	cmp	r3, #0
 8003008:	d07e      	beq.n	8003108 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	4798      	blx	r3
        }
        return;
 8003012:	e079      	b.n	8003108 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d01d      	beq.n	800305e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10d      	bne.n	800304c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003034:	2b00      	cmp	r3, #0
 8003036:	d031      	beq.n	800309c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	4798      	blx	r3
 8003040:	e02c      	b.n	800309c <HAL_DMA_IRQHandler+0x2a0>
 8003042:	bf00      	nop
 8003044:	20000004 	.word	0x20000004
 8003048:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003050:	2b00      	cmp	r3, #0
 8003052:	d023      	beq.n	800309c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	4798      	blx	r3
 800305c:	e01e      	b.n	800309c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10f      	bne.n	800308c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0210 	bic.w	r2, r2, #16
 800307a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d032      	beq.n	800310a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d022      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2205      	movs	r2, #5
 80030b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0201 	bic.w	r2, r2, #1
 80030c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	3301      	adds	r3, #1
 80030cc:	60bb      	str	r3, [r7, #8]
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d307      	bcc.n	80030e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f2      	bne.n	80030c8 <HAL_DMA_IRQHandler+0x2cc>
 80030e2:	e000      	b.n	80030e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80030e4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d005      	beq.n	800310a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	4798      	blx	r3
 8003106:	e000      	b.n	800310a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003108:	bf00      	nop
    }
  }
}
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
 800311c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800312c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	2b40      	cmp	r3, #64	; 0x40
 800313c:	d108      	bne.n	8003150 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800314e:	e007      	b.n	8003160 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68ba      	ldr	r2, [r7, #8]
 8003156:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	60da      	str	r2, [r3, #12]
}
 8003160:	bf00      	nop
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	b2db      	uxtb	r3, r3
 800317a:	3b10      	subs	r3, #16
 800317c:	4a14      	ldr	r2, [pc, #80]	; (80031d0 <DMA_CalcBaseAndBitshift+0x64>)
 800317e:	fba2 2303 	umull	r2, r3, r2, r3
 8003182:	091b      	lsrs	r3, r3, #4
 8003184:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003186:	4a13      	ldr	r2, [pc, #76]	; (80031d4 <DMA_CalcBaseAndBitshift+0x68>)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4413      	add	r3, r2
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	461a      	mov	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2b03      	cmp	r3, #3
 8003198:	d909      	bls.n	80031ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031a2:	f023 0303 	bic.w	r3, r3, #3
 80031a6:	1d1a      	adds	r2, r3, #4
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	659a      	str	r2, [r3, #88]	; 0x58
 80031ac:	e007      	b.n	80031be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031b6:	f023 0303 	bic.w	r3, r3, #3
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	aaaaaaab 	.word	0xaaaaaaab
 80031d4:	08005aec 	.word	0x08005aec

080031d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031e0:	2300      	movs	r3, #0
 80031e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d11f      	bne.n	8003232 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	2b03      	cmp	r3, #3
 80031f6:	d856      	bhi.n	80032a6 <DMA_CheckFifoParam+0xce>
 80031f8:	a201      	add	r2, pc, #4	; (adr r2, 8003200 <DMA_CheckFifoParam+0x28>)
 80031fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fe:	bf00      	nop
 8003200:	08003211 	.word	0x08003211
 8003204:	08003223 	.word	0x08003223
 8003208:	08003211 	.word	0x08003211
 800320c:	080032a7 	.word	0x080032a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003214:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d046      	beq.n	80032aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003220:	e043      	b.n	80032aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003226:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800322a:	d140      	bne.n	80032ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003230:	e03d      	b.n	80032ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800323a:	d121      	bne.n	8003280 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	2b03      	cmp	r3, #3
 8003240:	d837      	bhi.n	80032b2 <DMA_CheckFifoParam+0xda>
 8003242:	a201      	add	r2, pc, #4	; (adr r2, 8003248 <DMA_CheckFifoParam+0x70>)
 8003244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003248:	08003259 	.word	0x08003259
 800324c:	0800325f 	.word	0x0800325f
 8003250:	08003259 	.word	0x08003259
 8003254:	08003271 	.word	0x08003271
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	73fb      	strb	r3, [r7, #15]
      break;
 800325c:	e030      	b.n	80032c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003262:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d025      	beq.n	80032b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800326e:	e022      	b.n	80032b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003274:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003278:	d11f      	bne.n	80032ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800327e:	e01c      	b.n	80032ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	2b02      	cmp	r3, #2
 8003284:	d903      	bls.n	800328e <DMA_CheckFifoParam+0xb6>
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	2b03      	cmp	r3, #3
 800328a:	d003      	beq.n	8003294 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800328c:	e018      	b.n	80032c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	73fb      	strb	r3, [r7, #15]
      break;
 8003292:	e015      	b.n	80032c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003298:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00e      	beq.n	80032be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	73fb      	strb	r3, [r7, #15]
      break;
 80032a4:	e00b      	b.n	80032be <DMA_CheckFifoParam+0xe6>
      break;
 80032a6:	bf00      	nop
 80032a8:	e00a      	b.n	80032c0 <DMA_CheckFifoParam+0xe8>
      break;
 80032aa:	bf00      	nop
 80032ac:	e008      	b.n	80032c0 <DMA_CheckFifoParam+0xe8>
      break;
 80032ae:	bf00      	nop
 80032b0:	e006      	b.n	80032c0 <DMA_CheckFifoParam+0xe8>
      break;
 80032b2:	bf00      	nop
 80032b4:	e004      	b.n	80032c0 <DMA_CheckFifoParam+0xe8>
      break;
 80032b6:	bf00      	nop
 80032b8:	e002      	b.n	80032c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80032ba:	bf00      	nop
 80032bc:	e000      	b.n	80032c0 <DMA_CheckFifoParam+0xe8>
      break;
 80032be:	bf00      	nop
    }
  } 
  
  return status; 
 80032c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3714      	adds	r7, #20
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop

080032d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b089      	sub	sp, #36	; 0x24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032da:	2300      	movs	r3, #0
 80032dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032de:	2300      	movs	r3, #0
 80032e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032e6:	2300      	movs	r3, #0
 80032e8:	61fb      	str	r3, [r7, #28]
 80032ea:	e165      	b.n	80035b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032ec:	2201      	movs	r2, #1
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	4013      	ands	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	429a      	cmp	r2, r3
 8003306:	f040 8154 	bne.w	80035b2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f003 0303 	and.w	r3, r3, #3
 8003312:	2b01      	cmp	r3, #1
 8003314:	d005      	beq.n	8003322 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800331e:	2b02      	cmp	r3, #2
 8003320:	d130      	bne.n	8003384 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	2203      	movs	r2, #3
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	43db      	mvns	r3, r3
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	4013      	ands	r3, r2
 8003338:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	4313      	orrs	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003358:	2201      	movs	r2, #1
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	43db      	mvns	r3, r3
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	4013      	ands	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	091b      	lsrs	r3, r3, #4
 800336e:	f003 0201 	and.w	r2, r3, #1
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4313      	orrs	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f003 0303 	and.w	r3, r3, #3
 800338c:	2b03      	cmp	r3, #3
 800338e:	d017      	beq.n	80033c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	2203      	movs	r2, #3
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	43db      	mvns	r3, r3
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	4013      	ands	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f003 0303 	and.w	r3, r3, #3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d123      	bne.n	8003414 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	08da      	lsrs	r2, r3, #3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3208      	adds	r2, #8
 80033d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	220f      	movs	r2, #15
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	43db      	mvns	r3, r3
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	4013      	ands	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	691a      	ldr	r2, [r3, #16]
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4313      	orrs	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	08da      	lsrs	r2, r3, #3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	3208      	adds	r2, #8
 800340e:	69b9      	ldr	r1, [r7, #24]
 8003410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	2203      	movs	r2, #3
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	43db      	mvns	r3, r3
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	4013      	ands	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f003 0203 	and.w	r2, r3, #3
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	4313      	orrs	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 80ae 	beq.w	80035b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003456:	2300      	movs	r3, #0
 8003458:	60fb      	str	r3, [r7, #12]
 800345a:	4b5d      	ldr	r3, [pc, #372]	; (80035d0 <HAL_GPIO_Init+0x300>)
 800345c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345e:	4a5c      	ldr	r2, [pc, #368]	; (80035d0 <HAL_GPIO_Init+0x300>)
 8003460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003464:	6453      	str	r3, [r2, #68]	; 0x44
 8003466:	4b5a      	ldr	r3, [pc, #360]	; (80035d0 <HAL_GPIO_Init+0x300>)
 8003468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003472:	4a58      	ldr	r2, [pc, #352]	; (80035d4 <HAL_GPIO_Init+0x304>)
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	089b      	lsrs	r3, r3, #2
 8003478:	3302      	adds	r3, #2
 800347a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800347e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	220f      	movs	r2, #15
 800348a:	fa02 f303 	lsl.w	r3, r2, r3
 800348e:	43db      	mvns	r3, r3
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	4013      	ands	r3, r2
 8003494:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a4f      	ldr	r2, [pc, #316]	; (80035d8 <HAL_GPIO_Init+0x308>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d025      	beq.n	80034ea <HAL_GPIO_Init+0x21a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a4e      	ldr	r2, [pc, #312]	; (80035dc <HAL_GPIO_Init+0x30c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d01f      	beq.n	80034e6 <HAL_GPIO_Init+0x216>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a4d      	ldr	r2, [pc, #308]	; (80035e0 <HAL_GPIO_Init+0x310>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d019      	beq.n	80034e2 <HAL_GPIO_Init+0x212>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a4c      	ldr	r2, [pc, #304]	; (80035e4 <HAL_GPIO_Init+0x314>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d013      	beq.n	80034de <HAL_GPIO_Init+0x20e>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a4b      	ldr	r2, [pc, #300]	; (80035e8 <HAL_GPIO_Init+0x318>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d00d      	beq.n	80034da <HAL_GPIO_Init+0x20a>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a4a      	ldr	r2, [pc, #296]	; (80035ec <HAL_GPIO_Init+0x31c>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d007      	beq.n	80034d6 <HAL_GPIO_Init+0x206>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a49      	ldr	r2, [pc, #292]	; (80035f0 <HAL_GPIO_Init+0x320>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d101      	bne.n	80034d2 <HAL_GPIO_Init+0x202>
 80034ce:	2306      	movs	r3, #6
 80034d0:	e00c      	b.n	80034ec <HAL_GPIO_Init+0x21c>
 80034d2:	2307      	movs	r3, #7
 80034d4:	e00a      	b.n	80034ec <HAL_GPIO_Init+0x21c>
 80034d6:	2305      	movs	r3, #5
 80034d8:	e008      	b.n	80034ec <HAL_GPIO_Init+0x21c>
 80034da:	2304      	movs	r3, #4
 80034dc:	e006      	b.n	80034ec <HAL_GPIO_Init+0x21c>
 80034de:	2303      	movs	r3, #3
 80034e0:	e004      	b.n	80034ec <HAL_GPIO_Init+0x21c>
 80034e2:	2302      	movs	r3, #2
 80034e4:	e002      	b.n	80034ec <HAL_GPIO_Init+0x21c>
 80034e6:	2301      	movs	r3, #1
 80034e8:	e000      	b.n	80034ec <HAL_GPIO_Init+0x21c>
 80034ea:	2300      	movs	r3, #0
 80034ec:	69fa      	ldr	r2, [r7, #28]
 80034ee:	f002 0203 	and.w	r2, r2, #3
 80034f2:	0092      	lsls	r2, r2, #2
 80034f4:	4093      	lsls	r3, r2
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034fc:	4935      	ldr	r1, [pc, #212]	; (80035d4 <HAL_GPIO_Init+0x304>)
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	089b      	lsrs	r3, r3, #2
 8003502:	3302      	adds	r3, #2
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800350a:	4b3a      	ldr	r3, [pc, #232]	; (80035f4 <HAL_GPIO_Init+0x324>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	43db      	mvns	r3, r3
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	4013      	ands	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	4313      	orrs	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800352e:	4a31      	ldr	r2, [pc, #196]	; (80035f4 <HAL_GPIO_Init+0x324>)
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003534:	4b2f      	ldr	r3, [pc, #188]	; (80035f4 <HAL_GPIO_Init+0x324>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	43db      	mvns	r3, r3
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	4013      	ands	r3, r2
 8003542:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d003      	beq.n	8003558 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	4313      	orrs	r3, r2
 8003556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003558:	4a26      	ldr	r2, [pc, #152]	; (80035f4 <HAL_GPIO_Init+0x324>)
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800355e:	4b25      	ldr	r3, [pc, #148]	; (80035f4 <HAL_GPIO_Init+0x324>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	43db      	mvns	r3, r3
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	4013      	ands	r3, r2
 800356c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	4313      	orrs	r3, r2
 8003580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003582:	4a1c      	ldr	r2, [pc, #112]	; (80035f4 <HAL_GPIO_Init+0x324>)
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003588:	4b1a      	ldr	r3, [pc, #104]	; (80035f4 <HAL_GPIO_Init+0x324>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	43db      	mvns	r3, r3
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	4013      	ands	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d003      	beq.n	80035ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035ac:	4a11      	ldr	r2, [pc, #68]	; (80035f4 <HAL_GPIO_Init+0x324>)
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	3301      	adds	r3, #1
 80035b6:	61fb      	str	r3, [r7, #28]
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	2b0f      	cmp	r3, #15
 80035bc:	f67f ae96 	bls.w	80032ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035c0:	bf00      	nop
 80035c2:	bf00      	nop
 80035c4:	3724      	adds	r7, #36	; 0x24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	40023800 	.word	0x40023800
 80035d4:	40013800 	.word	0x40013800
 80035d8:	40020000 	.word	0x40020000
 80035dc:	40020400 	.word	0x40020400
 80035e0:	40020800 	.word	0x40020800
 80035e4:	40020c00 	.word	0x40020c00
 80035e8:	40021000 	.word	0x40021000
 80035ec:	40021400 	.word	0x40021400
 80035f0:	40021800 	.word	0x40021800
 80035f4:	40013c00 	.word	0x40013c00

080035f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	460b      	mov	r3, r1
 8003602:	807b      	strh	r3, [r7, #2]
 8003604:	4613      	mov	r3, r2
 8003606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003608:	787b      	ldrb	r3, [r7, #1]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800360e:	887a      	ldrh	r2, [r7, #2]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003614:	e003      	b.n	800361e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003616:	887b      	ldrh	r3, [r7, #2]
 8003618:	041a      	lsls	r2, r3, #16
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	619a      	str	r2, [r3, #24]
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
	...

0800362c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e0cc      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003640:	4b68      	ldr	r3, [pc, #416]	; (80037e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 030f 	and.w	r3, r3, #15
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d90c      	bls.n	8003668 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364e:	4b65      	ldr	r3, [pc, #404]	; (80037e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	b2d2      	uxtb	r2, r2
 8003654:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003656:	4b63      	ldr	r3, [pc, #396]	; (80037e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 030f 	and.w	r3, r3, #15
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	429a      	cmp	r2, r3
 8003662:	d001      	beq.n	8003668 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e0b8      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d020      	beq.n	80036b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	d005      	beq.n	800368c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003680:	4b59      	ldr	r3, [pc, #356]	; (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	4a58      	ldr	r2, [pc, #352]	; (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003686:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800368a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b00      	cmp	r3, #0
 8003696:	d005      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003698:	4b53      	ldr	r3, [pc, #332]	; (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	4a52      	ldr	r2, [pc, #328]	; (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 800369e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036a4:	4b50      	ldr	r3, [pc, #320]	; (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	494d      	ldr	r1, [pc, #308]	; (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d044      	beq.n	800374c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d107      	bne.n	80036da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ca:	4b47      	ldr	r3, [pc, #284]	; (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d119      	bne.n	800370a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e07f      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d003      	beq.n	80036ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036e6:	2b03      	cmp	r3, #3
 80036e8:	d107      	bne.n	80036fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ea:	4b3f      	ldr	r3, [pc, #252]	; (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d109      	bne.n	800370a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e06f      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036fa:	4b3b      	ldr	r3, [pc, #236]	; (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e067      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800370a:	4b37      	ldr	r3, [pc, #220]	; (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f023 0203 	bic.w	r2, r3, #3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	4934      	ldr	r1, [pc, #208]	; (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003718:	4313      	orrs	r3, r2
 800371a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800371c:	f7fe fd0e 	bl	800213c <HAL_GetTick>
 8003720:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003722:	e00a      	b.n	800373a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003724:	f7fe fd0a 	bl	800213c <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003732:	4293      	cmp	r3, r2
 8003734:	d901      	bls.n	800373a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e04f      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800373a:	4b2b      	ldr	r3, [pc, #172]	; (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 020c 	and.w	r2, r3, #12
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	429a      	cmp	r2, r3
 800374a:	d1eb      	bne.n	8003724 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800374c:	4b25      	ldr	r3, [pc, #148]	; (80037e4 <HAL_RCC_ClockConfig+0x1b8>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 030f 	and.w	r3, r3, #15
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	429a      	cmp	r2, r3
 8003758:	d20c      	bcs.n	8003774 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375a:	4b22      	ldr	r3, [pc, #136]	; (80037e4 <HAL_RCC_ClockConfig+0x1b8>)
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003762:	4b20      	ldr	r3, [pc, #128]	; (80037e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d001      	beq.n	8003774 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e032      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	d008      	beq.n	8003792 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003780:	4b19      	ldr	r3, [pc, #100]	; (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	4916      	ldr	r1, [pc, #88]	; (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	4313      	orrs	r3, r2
 8003790:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	2b00      	cmp	r3, #0
 800379c:	d009      	beq.n	80037b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800379e:	4b12      	ldr	r3, [pc, #72]	; (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	490e      	ldr	r1, [pc, #56]	; (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037b2:	f000 f855 	bl	8003860 <HAL_RCC_GetSysClockFreq>
 80037b6:	4602      	mov	r2, r0
 80037b8:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	091b      	lsrs	r3, r3, #4
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	490a      	ldr	r1, [pc, #40]	; (80037ec <HAL_RCC_ClockConfig+0x1c0>)
 80037c4:	5ccb      	ldrb	r3, [r1, r3]
 80037c6:	fa22 f303 	lsr.w	r3, r2, r3
 80037ca:	4a09      	ldr	r2, [pc, #36]	; (80037f0 <HAL_RCC_ClockConfig+0x1c4>)
 80037cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037ce:	4b09      	ldr	r3, [pc, #36]	; (80037f4 <HAL_RCC_ClockConfig+0x1c8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fe fc6e 	bl	80020b4 <HAL_InitTick>

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40023c00 	.word	0x40023c00
 80037e8:	40023800 	.word	0x40023800
 80037ec:	08005ad4 	.word	0x08005ad4
 80037f0:	20000004 	.word	0x20000004
 80037f4:	20000008 	.word	0x20000008

080037f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037fc:	4b03      	ldr	r3, [pc, #12]	; (800380c <HAL_RCC_GetHCLKFreq+0x14>)
 80037fe:	681b      	ldr	r3, [r3, #0]
}
 8003800:	4618      	mov	r0, r3
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	20000004 	.word	0x20000004

08003810 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003814:	f7ff fff0 	bl	80037f8 <HAL_RCC_GetHCLKFreq>
 8003818:	4602      	mov	r2, r0
 800381a:	4b05      	ldr	r3, [pc, #20]	; (8003830 <HAL_RCC_GetPCLK1Freq+0x20>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	0a9b      	lsrs	r3, r3, #10
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	4903      	ldr	r1, [pc, #12]	; (8003834 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003826:	5ccb      	ldrb	r3, [r1, r3]
 8003828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800382c:	4618      	mov	r0, r3
 800382e:	bd80      	pop	{r7, pc}
 8003830:	40023800 	.word	0x40023800
 8003834:	08005ae4 	.word	0x08005ae4

08003838 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800383c:	f7ff ffdc 	bl	80037f8 <HAL_RCC_GetHCLKFreq>
 8003840:	4602      	mov	r2, r0
 8003842:	4b05      	ldr	r3, [pc, #20]	; (8003858 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	0b5b      	lsrs	r3, r3, #13
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	4903      	ldr	r1, [pc, #12]	; (800385c <HAL_RCC_GetPCLK2Freq+0x24>)
 800384e:	5ccb      	ldrb	r3, [r1, r3]
 8003850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003854:	4618      	mov	r0, r3
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40023800 	.word	0x40023800
 800385c:	08005ae4 	.word	0x08005ae4

08003860 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003860:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003864:	b0ae      	sub	sp, #184	; 0xb8
 8003866:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003868:	2300      	movs	r3, #0
 800386a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800386e:	2300      	movs	r3, #0
 8003870:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800387a:	2300      	movs	r3, #0
 800387c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003886:	4bcb      	ldr	r3, [pc, #812]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 030c 	and.w	r3, r3, #12
 800388e:	2b0c      	cmp	r3, #12
 8003890:	f200 8206 	bhi.w	8003ca0 <HAL_RCC_GetSysClockFreq+0x440>
 8003894:	a201      	add	r2, pc, #4	; (adr r2, 800389c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800389a:	bf00      	nop
 800389c:	080038d1 	.word	0x080038d1
 80038a0:	08003ca1 	.word	0x08003ca1
 80038a4:	08003ca1 	.word	0x08003ca1
 80038a8:	08003ca1 	.word	0x08003ca1
 80038ac:	080038d9 	.word	0x080038d9
 80038b0:	08003ca1 	.word	0x08003ca1
 80038b4:	08003ca1 	.word	0x08003ca1
 80038b8:	08003ca1 	.word	0x08003ca1
 80038bc:	080038e1 	.word	0x080038e1
 80038c0:	08003ca1 	.word	0x08003ca1
 80038c4:	08003ca1 	.word	0x08003ca1
 80038c8:	08003ca1 	.word	0x08003ca1
 80038cc:	08003ad1 	.word	0x08003ad1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038d0:	4bb9      	ldr	r3, [pc, #740]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x358>)
 80038d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80038d6:	e1e7      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038d8:	4bb8      	ldr	r3, [pc, #736]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x35c>)
 80038da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80038de:	e1e3      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038e0:	4bb4      	ldr	r3, [pc, #720]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x354>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038ec:	4bb1      	ldr	r3, [pc, #708]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x354>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d071      	beq.n	80039dc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038f8:	4bae      	ldr	r3, [pc, #696]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x354>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	099b      	lsrs	r3, r3, #6
 80038fe:	2200      	movs	r2, #0
 8003900:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003904:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003908:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800390c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003910:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003914:	2300      	movs	r3, #0
 8003916:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800391a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800391e:	4622      	mov	r2, r4
 8003920:	462b      	mov	r3, r5
 8003922:	f04f 0000 	mov.w	r0, #0
 8003926:	f04f 0100 	mov.w	r1, #0
 800392a:	0159      	lsls	r1, r3, #5
 800392c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003930:	0150      	lsls	r0, r2, #5
 8003932:	4602      	mov	r2, r0
 8003934:	460b      	mov	r3, r1
 8003936:	4621      	mov	r1, r4
 8003938:	1a51      	subs	r1, r2, r1
 800393a:	6439      	str	r1, [r7, #64]	; 0x40
 800393c:	4629      	mov	r1, r5
 800393e:	eb63 0301 	sbc.w	r3, r3, r1
 8003942:	647b      	str	r3, [r7, #68]	; 0x44
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	f04f 0300 	mov.w	r3, #0
 800394c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003950:	4649      	mov	r1, r9
 8003952:	018b      	lsls	r3, r1, #6
 8003954:	4641      	mov	r1, r8
 8003956:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800395a:	4641      	mov	r1, r8
 800395c:	018a      	lsls	r2, r1, #6
 800395e:	4641      	mov	r1, r8
 8003960:	1a51      	subs	r1, r2, r1
 8003962:	63b9      	str	r1, [r7, #56]	; 0x38
 8003964:	4649      	mov	r1, r9
 8003966:	eb63 0301 	sbc.w	r3, r3, r1
 800396a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800396c:	f04f 0200 	mov.w	r2, #0
 8003970:	f04f 0300 	mov.w	r3, #0
 8003974:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003978:	4649      	mov	r1, r9
 800397a:	00cb      	lsls	r3, r1, #3
 800397c:	4641      	mov	r1, r8
 800397e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003982:	4641      	mov	r1, r8
 8003984:	00ca      	lsls	r2, r1, #3
 8003986:	4610      	mov	r0, r2
 8003988:	4619      	mov	r1, r3
 800398a:	4603      	mov	r3, r0
 800398c:	4622      	mov	r2, r4
 800398e:	189b      	adds	r3, r3, r2
 8003990:	633b      	str	r3, [r7, #48]	; 0x30
 8003992:	462b      	mov	r3, r5
 8003994:	460a      	mov	r2, r1
 8003996:	eb42 0303 	adc.w	r3, r2, r3
 800399a:	637b      	str	r3, [r7, #52]	; 0x34
 800399c:	f04f 0200 	mov.w	r2, #0
 80039a0:	f04f 0300 	mov.w	r3, #0
 80039a4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80039a8:	4629      	mov	r1, r5
 80039aa:	024b      	lsls	r3, r1, #9
 80039ac:	4621      	mov	r1, r4
 80039ae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039b2:	4621      	mov	r1, r4
 80039b4:	024a      	lsls	r2, r1, #9
 80039b6:	4610      	mov	r0, r2
 80039b8:	4619      	mov	r1, r3
 80039ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80039be:	2200      	movs	r2, #0
 80039c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80039c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80039c8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80039cc:	f7fc fc1a 	bl	8000204 <__aeabi_uldivmod>
 80039d0:	4602      	mov	r2, r0
 80039d2:	460b      	mov	r3, r1
 80039d4:	4613      	mov	r3, r2
 80039d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039da:	e067      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039dc:	4b75      	ldr	r3, [pc, #468]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x354>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	099b      	lsrs	r3, r3, #6
 80039e2:	2200      	movs	r2, #0
 80039e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80039e8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80039ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80039f6:	2300      	movs	r3, #0
 80039f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80039fa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80039fe:	4622      	mov	r2, r4
 8003a00:	462b      	mov	r3, r5
 8003a02:	f04f 0000 	mov.w	r0, #0
 8003a06:	f04f 0100 	mov.w	r1, #0
 8003a0a:	0159      	lsls	r1, r3, #5
 8003a0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a10:	0150      	lsls	r0, r2, #5
 8003a12:	4602      	mov	r2, r0
 8003a14:	460b      	mov	r3, r1
 8003a16:	4621      	mov	r1, r4
 8003a18:	1a51      	subs	r1, r2, r1
 8003a1a:	62b9      	str	r1, [r7, #40]	; 0x28
 8003a1c:	4629      	mov	r1, r5
 8003a1e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a24:	f04f 0200 	mov.w	r2, #0
 8003a28:	f04f 0300 	mov.w	r3, #0
 8003a2c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003a30:	4649      	mov	r1, r9
 8003a32:	018b      	lsls	r3, r1, #6
 8003a34:	4641      	mov	r1, r8
 8003a36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a3a:	4641      	mov	r1, r8
 8003a3c:	018a      	lsls	r2, r1, #6
 8003a3e:	4641      	mov	r1, r8
 8003a40:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a44:	4649      	mov	r1, r9
 8003a46:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a4a:	f04f 0200 	mov.w	r2, #0
 8003a4e:	f04f 0300 	mov.w	r3, #0
 8003a52:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a56:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a5e:	4692      	mov	sl, r2
 8003a60:	469b      	mov	fp, r3
 8003a62:	4623      	mov	r3, r4
 8003a64:	eb1a 0303 	adds.w	r3, sl, r3
 8003a68:	623b      	str	r3, [r7, #32]
 8003a6a:	462b      	mov	r3, r5
 8003a6c:	eb4b 0303 	adc.w	r3, fp, r3
 8003a70:	627b      	str	r3, [r7, #36]	; 0x24
 8003a72:	f04f 0200 	mov.w	r2, #0
 8003a76:	f04f 0300 	mov.w	r3, #0
 8003a7a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003a7e:	4629      	mov	r1, r5
 8003a80:	028b      	lsls	r3, r1, #10
 8003a82:	4621      	mov	r1, r4
 8003a84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a88:	4621      	mov	r1, r4
 8003a8a:	028a      	lsls	r2, r1, #10
 8003a8c:	4610      	mov	r0, r2
 8003a8e:	4619      	mov	r1, r3
 8003a90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a94:	2200      	movs	r2, #0
 8003a96:	673b      	str	r3, [r7, #112]	; 0x70
 8003a98:	677a      	str	r2, [r7, #116]	; 0x74
 8003a9a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003a9e:	f7fc fbb1 	bl	8000204 <__aeabi_uldivmod>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003aac:	4b41      	ldr	r3, [pc, #260]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	0c1b      	lsrs	r3, r3, #16
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003abe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ac2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003ace:	e0eb      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ad0:	4b38      	ldr	r3, [pc, #224]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ad8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003adc:	4b35      	ldr	r3, [pc, #212]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d06b      	beq.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ae8:	4b32      	ldr	r3, [pc, #200]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	099b      	lsrs	r3, r3, #6
 8003aee:	2200      	movs	r2, #0
 8003af0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003af2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003af4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003afa:	663b      	str	r3, [r7, #96]	; 0x60
 8003afc:	2300      	movs	r3, #0
 8003afe:	667b      	str	r3, [r7, #100]	; 0x64
 8003b00:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003b04:	4622      	mov	r2, r4
 8003b06:	462b      	mov	r3, r5
 8003b08:	f04f 0000 	mov.w	r0, #0
 8003b0c:	f04f 0100 	mov.w	r1, #0
 8003b10:	0159      	lsls	r1, r3, #5
 8003b12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b16:	0150      	lsls	r0, r2, #5
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4621      	mov	r1, r4
 8003b1e:	1a51      	subs	r1, r2, r1
 8003b20:	61b9      	str	r1, [r7, #24]
 8003b22:	4629      	mov	r1, r5
 8003b24:	eb63 0301 	sbc.w	r3, r3, r1
 8003b28:	61fb      	str	r3, [r7, #28]
 8003b2a:	f04f 0200 	mov.w	r2, #0
 8003b2e:	f04f 0300 	mov.w	r3, #0
 8003b32:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003b36:	4659      	mov	r1, fp
 8003b38:	018b      	lsls	r3, r1, #6
 8003b3a:	4651      	mov	r1, sl
 8003b3c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b40:	4651      	mov	r1, sl
 8003b42:	018a      	lsls	r2, r1, #6
 8003b44:	4651      	mov	r1, sl
 8003b46:	ebb2 0801 	subs.w	r8, r2, r1
 8003b4a:	4659      	mov	r1, fp
 8003b4c:	eb63 0901 	sbc.w	r9, r3, r1
 8003b50:	f04f 0200 	mov.w	r2, #0
 8003b54:	f04f 0300 	mov.w	r3, #0
 8003b58:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b5c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b60:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b64:	4690      	mov	r8, r2
 8003b66:	4699      	mov	r9, r3
 8003b68:	4623      	mov	r3, r4
 8003b6a:	eb18 0303 	adds.w	r3, r8, r3
 8003b6e:	613b      	str	r3, [r7, #16]
 8003b70:	462b      	mov	r3, r5
 8003b72:	eb49 0303 	adc.w	r3, r9, r3
 8003b76:	617b      	str	r3, [r7, #20]
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	f04f 0300 	mov.w	r3, #0
 8003b80:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003b84:	4629      	mov	r1, r5
 8003b86:	024b      	lsls	r3, r1, #9
 8003b88:	4621      	mov	r1, r4
 8003b8a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b8e:	4621      	mov	r1, r4
 8003b90:	024a      	lsls	r2, r1, #9
 8003b92:	4610      	mov	r0, r2
 8003b94:	4619      	mov	r1, r3
 8003b96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b9e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003ba0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003ba4:	f7fc fb2e 	bl	8000204 <__aeabi_uldivmod>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	4613      	mov	r3, r2
 8003bae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bb2:	e065      	b.n	8003c80 <HAL_RCC_GetSysClockFreq+0x420>
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	00f42400 	.word	0x00f42400
 8003bbc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bc0:	4b3d      	ldr	r3, [pc, #244]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	099b      	lsrs	r3, r3, #6
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	4618      	mov	r0, r3
 8003bca:	4611      	mov	r1, r2
 8003bcc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003bd0:	653b      	str	r3, [r7, #80]	; 0x50
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	657b      	str	r3, [r7, #84]	; 0x54
 8003bd6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003bda:	4642      	mov	r2, r8
 8003bdc:	464b      	mov	r3, r9
 8003bde:	f04f 0000 	mov.w	r0, #0
 8003be2:	f04f 0100 	mov.w	r1, #0
 8003be6:	0159      	lsls	r1, r3, #5
 8003be8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bec:	0150      	lsls	r0, r2, #5
 8003bee:	4602      	mov	r2, r0
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	4641      	mov	r1, r8
 8003bf4:	1a51      	subs	r1, r2, r1
 8003bf6:	60b9      	str	r1, [r7, #8]
 8003bf8:	4649      	mov	r1, r9
 8003bfa:	eb63 0301 	sbc.w	r3, r3, r1
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	f04f 0200 	mov.w	r2, #0
 8003c04:	f04f 0300 	mov.w	r3, #0
 8003c08:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003c0c:	4659      	mov	r1, fp
 8003c0e:	018b      	lsls	r3, r1, #6
 8003c10:	4651      	mov	r1, sl
 8003c12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c16:	4651      	mov	r1, sl
 8003c18:	018a      	lsls	r2, r1, #6
 8003c1a:	4651      	mov	r1, sl
 8003c1c:	1a54      	subs	r4, r2, r1
 8003c1e:	4659      	mov	r1, fp
 8003c20:	eb63 0501 	sbc.w	r5, r3, r1
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	f04f 0300 	mov.w	r3, #0
 8003c2c:	00eb      	lsls	r3, r5, #3
 8003c2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c32:	00e2      	lsls	r2, r4, #3
 8003c34:	4614      	mov	r4, r2
 8003c36:	461d      	mov	r5, r3
 8003c38:	4643      	mov	r3, r8
 8003c3a:	18e3      	adds	r3, r4, r3
 8003c3c:	603b      	str	r3, [r7, #0]
 8003c3e:	464b      	mov	r3, r9
 8003c40:	eb45 0303 	adc.w	r3, r5, r3
 8003c44:	607b      	str	r3, [r7, #4]
 8003c46:	f04f 0200 	mov.w	r2, #0
 8003c4a:	f04f 0300 	mov.w	r3, #0
 8003c4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c52:	4629      	mov	r1, r5
 8003c54:	028b      	lsls	r3, r1, #10
 8003c56:	4621      	mov	r1, r4
 8003c58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c5c:	4621      	mov	r1, r4
 8003c5e:	028a      	lsls	r2, r1, #10
 8003c60:	4610      	mov	r0, r2
 8003c62:	4619      	mov	r1, r3
 8003c64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c68:	2200      	movs	r2, #0
 8003c6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c6c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003c6e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c72:	f7fc fac7 	bl	8000204 <__aeabi_uldivmod>
 8003c76:	4602      	mov	r2, r0
 8003c78:	460b      	mov	r3, r1
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003c80:	4b0d      	ldr	r3, [pc, #52]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	0f1b      	lsrs	r3, r3, #28
 8003c86:	f003 0307 	and.w	r3, r3, #7
 8003c8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003c8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003c9e:	e003      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ca0:	4b06      	ldr	r3, [pc, #24]	; (8003cbc <HAL_RCC_GetSysClockFreq+0x45c>)
 8003ca2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003ca6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ca8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	37b8      	adds	r7, #184	; 0xb8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cb6:	bf00      	nop
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	00f42400 	.word	0x00f42400

08003cc0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e28d      	b.n	80041ee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f000 8083 	beq.w	8003de6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ce0:	4b94      	ldr	r3, [pc, #592]	; (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f003 030c 	and.w	r3, r3, #12
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d019      	beq.n	8003d20 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003cec:	4b91      	ldr	r3, [pc, #580]	; (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d106      	bne.n	8003d06 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003cf8:	4b8e      	ldr	r3, [pc, #568]	; (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d04:	d00c      	beq.n	8003d20 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d06:	4b8b      	ldr	r3, [pc, #556]	; (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d0e:	2b0c      	cmp	r3, #12
 8003d10:	d112      	bne.n	8003d38 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d12:	4b88      	ldr	r3, [pc, #544]	; (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d1e:	d10b      	bne.n	8003d38 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d20:	4b84      	ldr	r3, [pc, #528]	; (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d05b      	beq.n	8003de4 <HAL_RCC_OscConfig+0x124>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d157      	bne.n	8003de4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e25a      	b.n	80041ee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d40:	d106      	bne.n	8003d50 <HAL_RCC_OscConfig+0x90>
 8003d42:	4b7c      	ldr	r3, [pc, #496]	; (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a7b      	ldr	r2, [pc, #492]	; (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	e01d      	b.n	8003d8c <HAL_RCC_OscConfig+0xcc>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d58:	d10c      	bne.n	8003d74 <HAL_RCC_OscConfig+0xb4>
 8003d5a:	4b76      	ldr	r3, [pc, #472]	; (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a75      	ldr	r2, [pc, #468]	; (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	4b73      	ldr	r3, [pc, #460]	; (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a72      	ldr	r2, [pc, #456]	; (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	e00b      	b.n	8003d8c <HAL_RCC_OscConfig+0xcc>
 8003d74:	4b6f      	ldr	r3, [pc, #444]	; (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a6e      	ldr	r2, [pc, #440]	; (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d7e:	6013      	str	r3, [r2, #0]
 8003d80:	4b6c      	ldr	r3, [pc, #432]	; (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a6b      	ldr	r2, [pc, #428]	; (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d013      	beq.n	8003dbc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d94:	f7fe f9d2 	bl	800213c <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d9c:	f7fe f9ce 	bl	800213c <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b64      	cmp	r3, #100	; 0x64
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e21f      	b.n	80041ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dae:	4b61      	ldr	r3, [pc, #388]	; (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0f0      	beq.n	8003d9c <HAL_RCC_OscConfig+0xdc>
 8003dba:	e014      	b.n	8003de6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbc:	f7fe f9be 	bl	800213c <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dc4:	f7fe f9ba 	bl	800213c <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b64      	cmp	r3, #100	; 0x64
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e20b      	b.n	80041ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dd6:	4b57      	ldr	r3, [pc, #348]	; (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1f0      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x104>
 8003de2:	e000      	b.n	8003de6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d06f      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003df2:	4b50      	ldr	r3, [pc, #320]	; (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 030c 	and.w	r3, r3, #12
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d017      	beq.n	8003e2e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003dfe:	4b4d      	ldr	r3, [pc, #308]	; (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e06:	2b08      	cmp	r3, #8
 8003e08:	d105      	bne.n	8003e16 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e0a:	4b4a      	ldr	r3, [pc, #296]	; (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00b      	beq.n	8003e2e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e16:	4b47      	ldr	r3, [pc, #284]	; (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e1e:	2b0c      	cmp	r3, #12
 8003e20:	d11c      	bne.n	8003e5c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e22:	4b44      	ldr	r3, [pc, #272]	; (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d116      	bne.n	8003e5c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e2e:	4b41      	ldr	r3, [pc, #260]	; (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d005      	beq.n	8003e46 <HAL_RCC_OscConfig+0x186>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d001      	beq.n	8003e46 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e1d3      	b.n	80041ee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e46:	4b3b      	ldr	r3, [pc, #236]	; (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	4937      	ldr	r1, [pc, #220]	; (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e5a:	e03a      	b.n	8003ed2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d020      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e64:	4b34      	ldr	r3, [pc, #208]	; (8003f38 <HAL_RCC_OscConfig+0x278>)
 8003e66:	2201      	movs	r2, #1
 8003e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6a:	f7fe f967 	bl	800213c <HAL_GetTick>
 8003e6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e70:	e008      	b.n	8003e84 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e72:	f7fe f963 	bl	800213c <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e1b4      	b.n	80041ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e84:	4b2b      	ldr	r3, [pc, #172]	; (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0f0      	beq.n	8003e72 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e90:	4b28      	ldr	r3, [pc, #160]	; (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	4925      	ldr	r1, [pc, #148]	; (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	600b      	str	r3, [r1, #0]
 8003ea4:	e015      	b.n	8003ed2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ea6:	4b24      	ldr	r3, [pc, #144]	; (8003f38 <HAL_RCC_OscConfig+0x278>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eac:	f7fe f946 	bl	800213c <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eb4:	f7fe f942 	bl	800213c <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e193      	b.n	80041ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ec6:	4b1b      	ldr	r3, [pc, #108]	; (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1f0      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0308 	and.w	r3, r3, #8
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d036      	beq.n	8003f4c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d016      	beq.n	8003f14 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ee6:	4b15      	ldr	r3, [pc, #84]	; (8003f3c <HAL_RCC_OscConfig+0x27c>)
 8003ee8:	2201      	movs	r2, #1
 8003eea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eec:	f7fe f926 	bl	800213c <HAL_GetTick>
 8003ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ef4:	f7fe f922 	bl	800213c <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e173      	b.n	80041ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f06:	4b0b      	ldr	r3, [pc, #44]	; (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d0f0      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x234>
 8003f12:	e01b      	b.n	8003f4c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f14:	4b09      	ldr	r3, [pc, #36]	; (8003f3c <HAL_RCC_OscConfig+0x27c>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1a:	f7fe f90f 	bl	800213c <HAL_GetTick>
 8003f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f20:	e00e      	b.n	8003f40 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f22:	f7fe f90b 	bl	800213c <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d907      	bls.n	8003f40 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e15c      	b.n	80041ee <HAL_RCC_OscConfig+0x52e>
 8003f34:	40023800 	.word	0x40023800
 8003f38:	42470000 	.word	0x42470000
 8003f3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f40:	4b8a      	ldr	r3, [pc, #552]	; (800416c <HAL_RCC_OscConfig+0x4ac>)
 8003f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1ea      	bne.n	8003f22 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 8097 	beq.w	8004088 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f5e:	4b83      	ldr	r3, [pc, #524]	; (800416c <HAL_RCC_OscConfig+0x4ac>)
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10f      	bne.n	8003f8a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	60bb      	str	r3, [r7, #8]
 8003f6e:	4b7f      	ldr	r3, [pc, #508]	; (800416c <HAL_RCC_OscConfig+0x4ac>)
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	4a7e      	ldr	r2, [pc, #504]	; (800416c <HAL_RCC_OscConfig+0x4ac>)
 8003f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f78:	6413      	str	r3, [r2, #64]	; 0x40
 8003f7a:	4b7c      	ldr	r3, [pc, #496]	; (800416c <HAL_RCC_OscConfig+0x4ac>)
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f82:	60bb      	str	r3, [r7, #8]
 8003f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f86:	2301      	movs	r3, #1
 8003f88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f8a:	4b79      	ldr	r3, [pc, #484]	; (8004170 <HAL_RCC_OscConfig+0x4b0>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d118      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f96:	4b76      	ldr	r3, [pc, #472]	; (8004170 <HAL_RCC_OscConfig+0x4b0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a75      	ldr	r2, [pc, #468]	; (8004170 <HAL_RCC_OscConfig+0x4b0>)
 8003f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fa2:	f7fe f8cb 	bl	800213c <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003faa:	f7fe f8c7 	bl	800213c <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e118      	b.n	80041ee <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fbc:	4b6c      	ldr	r3, [pc, #432]	; (8004170 <HAL_RCC_OscConfig+0x4b0>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0f0      	beq.n	8003faa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d106      	bne.n	8003fde <HAL_RCC_OscConfig+0x31e>
 8003fd0:	4b66      	ldr	r3, [pc, #408]	; (800416c <HAL_RCC_OscConfig+0x4ac>)
 8003fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd4:	4a65      	ldr	r2, [pc, #404]	; (800416c <HAL_RCC_OscConfig+0x4ac>)
 8003fd6:	f043 0301 	orr.w	r3, r3, #1
 8003fda:	6713      	str	r3, [r2, #112]	; 0x70
 8003fdc:	e01c      	b.n	8004018 <HAL_RCC_OscConfig+0x358>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	2b05      	cmp	r3, #5
 8003fe4:	d10c      	bne.n	8004000 <HAL_RCC_OscConfig+0x340>
 8003fe6:	4b61      	ldr	r3, [pc, #388]	; (800416c <HAL_RCC_OscConfig+0x4ac>)
 8003fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fea:	4a60      	ldr	r2, [pc, #384]	; (800416c <HAL_RCC_OscConfig+0x4ac>)
 8003fec:	f043 0304 	orr.w	r3, r3, #4
 8003ff0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff2:	4b5e      	ldr	r3, [pc, #376]	; (800416c <HAL_RCC_OscConfig+0x4ac>)
 8003ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff6:	4a5d      	ldr	r2, [pc, #372]	; (800416c <HAL_RCC_OscConfig+0x4ac>)
 8003ff8:	f043 0301 	orr.w	r3, r3, #1
 8003ffc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ffe:	e00b      	b.n	8004018 <HAL_RCC_OscConfig+0x358>
 8004000:	4b5a      	ldr	r3, [pc, #360]	; (800416c <HAL_RCC_OscConfig+0x4ac>)
 8004002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004004:	4a59      	ldr	r2, [pc, #356]	; (800416c <HAL_RCC_OscConfig+0x4ac>)
 8004006:	f023 0301 	bic.w	r3, r3, #1
 800400a:	6713      	str	r3, [r2, #112]	; 0x70
 800400c:	4b57      	ldr	r3, [pc, #348]	; (800416c <HAL_RCC_OscConfig+0x4ac>)
 800400e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004010:	4a56      	ldr	r2, [pc, #344]	; (800416c <HAL_RCC_OscConfig+0x4ac>)
 8004012:	f023 0304 	bic.w	r3, r3, #4
 8004016:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d015      	beq.n	800404c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004020:	f7fe f88c 	bl	800213c <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004026:	e00a      	b.n	800403e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004028:	f7fe f888 	bl	800213c <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	f241 3288 	movw	r2, #5000	; 0x1388
 8004036:	4293      	cmp	r3, r2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e0d7      	b.n	80041ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800403e:	4b4b      	ldr	r3, [pc, #300]	; (800416c <HAL_RCC_OscConfig+0x4ac>)
 8004040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0ee      	beq.n	8004028 <HAL_RCC_OscConfig+0x368>
 800404a:	e014      	b.n	8004076 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800404c:	f7fe f876 	bl	800213c <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004052:	e00a      	b.n	800406a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004054:	f7fe f872 	bl	800213c <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004062:	4293      	cmp	r3, r2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e0c1      	b.n	80041ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800406a:	4b40      	ldr	r3, [pc, #256]	; (800416c <HAL_RCC_OscConfig+0x4ac>)
 800406c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1ee      	bne.n	8004054 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004076:	7dfb      	ldrb	r3, [r7, #23]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d105      	bne.n	8004088 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800407c:	4b3b      	ldr	r3, [pc, #236]	; (800416c <HAL_RCC_OscConfig+0x4ac>)
 800407e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004080:	4a3a      	ldr	r2, [pc, #232]	; (800416c <HAL_RCC_OscConfig+0x4ac>)
 8004082:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004086:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	2b00      	cmp	r3, #0
 800408e:	f000 80ad 	beq.w	80041ec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004092:	4b36      	ldr	r3, [pc, #216]	; (800416c <HAL_RCC_OscConfig+0x4ac>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 030c 	and.w	r3, r3, #12
 800409a:	2b08      	cmp	r3, #8
 800409c:	d060      	beq.n	8004160 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d145      	bne.n	8004132 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040a6:	4b33      	ldr	r3, [pc, #204]	; (8004174 <HAL_RCC_OscConfig+0x4b4>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ac:	f7fe f846 	bl	800213c <HAL_GetTick>
 80040b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040b4:	f7fe f842 	bl	800213c <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e093      	b.n	80041ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c6:	4b29      	ldr	r3, [pc, #164]	; (800416c <HAL_RCC_OscConfig+0x4ac>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1f0      	bne.n	80040b4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69da      	ldr	r2, [r3, #28]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	019b      	lsls	r3, r3, #6
 80040e2:	431a      	orrs	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e8:	085b      	lsrs	r3, r3, #1
 80040ea:	3b01      	subs	r3, #1
 80040ec:	041b      	lsls	r3, r3, #16
 80040ee:	431a      	orrs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f4:	061b      	lsls	r3, r3, #24
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fc:	071b      	lsls	r3, r3, #28
 80040fe:	491b      	ldr	r1, [pc, #108]	; (800416c <HAL_RCC_OscConfig+0x4ac>)
 8004100:	4313      	orrs	r3, r2
 8004102:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004104:	4b1b      	ldr	r3, [pc, #108]	; (8004174 <HAL_RCC_OscConfig+0x4b4>)
 8004106:	2201      	movs	r2, #1
 8004108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410a:	f7fe f817 	bl	800213c <HAL_GetTick>
 800410e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004110:	e008      	b.n	8004124 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004112:	f7fe f813 	bl	800213c <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e064      	b.n	80041ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004124:	4b11      	ldr	r3, [pc, #68]	; (800416c <HAL_RCC_OscConfig+0x4ac>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0f0      	beq.n	8004112 <HAL_RCC_OscConfig+0x452>
 8004130:	e05c      	b.n	80041ec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004132:	4b10      	ldr	r3, [pc, #64]	; (8004174 <HAL_RCC_OscConfig+0x4b4>)
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004138:	f7fe f800 	bl	800213c <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004140:	f7fd fffc 	bl	800213c <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e04d      	b.n	80041ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004152:	4b06      	ldr	r3, [pc, #24]	; (800416c <HAL_RCC_OscConfig+0x4ac>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1f0      	bne.n	8004140 <HAL_RCC_OscConfig+0x480>
 800415e:	e045      	b.n	80041ec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d107      	bne.n	8004178 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e040      	b.n	80041ee <HAL_RCC_OscConfig+0x52e>
 800416c:	40023800 	.word	0x40023800
 8004170:	40007000 	.word	0x40007000
 8004174:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004178:	4b1f      	ldr	r3, [pc, #124]	; (80041f8 <HAL_RCC_OscConfig+0x538>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d030      	beq.n	80041e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004190:	429a      	cmp	r2, r3
 8004192:	d129      	bne.n	80041e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800419e:	429a      	cmp	r2, r3
 80041a0:	d122      	bne.n	80041e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041a8:	4013      	ands	r3, r2
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d119      	bne.n	80041e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041be:	085b      	lsrs	r3, r3, #1
 80041c0:	3b01      	subs	r3, #1
 80041c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d10f      	bne.n	80041e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d107      	bne.n	80041e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d001      	beq.n	80041ec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e000      	b.n	80041ee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3718      	adds	r7, #24
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	40023800 	.word	0x40023800

080041fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e041      	b.n	8004292 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d106      	bne.n	8004228 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7fd fcfc 	bl	8001c20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2202      	movs	r2, #2
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3304      	adds	r3, #4
 8004238:	4619      	mov	r1, r3
 800423a:	4610      	mov	r0, r2
 800423c:	f000 fdb0 	bl	8004da0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
	...

0800429c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d001      	beq.n	80042b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e046      	b.n	8004342 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a23      	ldr	r2, [pc, #140]	; (8004350 <HAL_TIM_Base_Start+0xb4>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d022      	beq.n	800430c <HAL_TIM_Base_Start+0x70>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ce:	d01d      	beq.n	800430c <HAL_TIM_Base_Start+0x70>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a1f      	ldr	r2, [pc, #124]	; (8004354 <HAL_TIM_Base_Start+0xb8>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d018      	beq.n	800430c <HAL_TIM_Base_Start+0x70>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a1e      	ldr	r2, [pc, #120]	; (8004358 <HAL_TIM_Base_Start+0xbc>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d013      	beq.n	800430c <HAL_TIM_Base_Start+0x70>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a1c      	ldr	r2, [pc, #112]	; (800435c <HAL_TIM_Base_Start+0xc0>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d00e      	beq.n	800430c <HAL_TIM_Base_Start+0x70>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a1b      	ldr	r2, [pc, #108]	; (8004360 <HAL_TIM_Base_Start+0xc4>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d009      	beq.n	800430c <HAL_TIM_Base_Start+0x70>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a19      	ldr	r2, [pc, #100]	; (8004364 <HAL_TIM_Base_Start+0xc8>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d004      	beq.n	800430c <HAL_TIM_Base_Start+0x70>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a18      	ldr	r2, [pc, #96]	; (8004368 <HAL_TIM_Base_Start+0xcc>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d111      	bne.n	8004330 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2b06      	cmp	r3, #6
 800431c:	d010      	beq.n	8004340 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f042 0201 	orr.w	r2, r2, #1
 800432c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800432e:	e007      	b.n	8004340 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f042 0201 	orr.w	r2, r2, #1
 800433e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	40010000 	.word	0x40010000
 8004354:	40000400 	.word	0x40000400
 8004358:	40000800 	.word	0x40000800
 800435c:	40000c00 	.word	0x40000c00
 8004360:	40010400 	.word	0x40010400
 8004364:	40014000 	.word	0x40014000
 8004368:	40001800 	.word	0x40001800

0800436c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e041      	b.n	8004402 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d106      	bne.n	8004398 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f839 	bl	800440a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3304      	adds	r3, #4
 80043a8:	4619      	mov	r1, r3
 80043aa:	4610      	mov	r0, r2
 80043ac:	f000 fcf8 	bl	8004da0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3708      	adds	r7, #8
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004412:	bf00      	nop
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
	...

08004420 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d109      	bne.n	8004444 <HAL_TIM_PWM_Start+0x24>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b01      	cmp	r3, #1
 800443a:	bf14      	ite	ne
 800443c:	2301      	movne	r3, #1
 800443e:	2300      	moveq	r3, #0
 8004440:	b2db      	uxtb	r3, r3
 8004442:	e022      	b.n	800448a <HAL_TIM_PWM_Start+0x6a>
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	2b04      	cmp	r3, #4
 8004448:	d109      	bne.n	800445e <HAL_TIM_PWM_Start+0x3e>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b01      	cmp	r3, #1
 8004454:	bf14      	ite	ne
 8004456:	2301      	movne	r3, #1
 8004458:	2300      	moveq	r3, #0
 800445a:	b2db      	uxtb	r3, r3
 800445c:	e015      	b.n	800448a <HAL_TIM_PWM_Start+0x6a>
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	2b08      	cmp	r3, #8
 8004462:	d109      	bne.n	8004478 <HAL_TIM_PWM_Start+0x58>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800446a:	b2db      	uxtb	r3, r3
 800446c:	2b01      	cmp	r3, #1
 800446e:	bf14      	ite	ne
 8004470:	2301      	movne	r3, #1
 8004472:	2300      	moveq	r3, #0
 8004474:	b2db      	uxtb	r3, r3
 8004476:	e008      	b.n	800448a <HAL_TIM_PWM_Start+0x6a>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b01      	cmp	r3, #1
 8004482:	bf14      	ite	ne
 8004484:	2301      	movne	r3, #1
 8004486:	2300      	moveq	r3, #0
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e07c      	b.n	800458c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d104      	bne.n	80044a2 <HAL_TIM_PWM_Start+0x82>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2202      	movs	r2, #2
 800449c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044a0:	e013      	b.n	80044ca <HAL_TIM_PWM_Start+0xaa>
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	2b04      	cmp	r3, #4
 80044a6:	d104      	bne.n	80044b2 <HAL_TIM_PWM_Start+0x92>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2202      	movs	r2, #2
 80044ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044b0:	e00b      	b.n	80044ca <HAL_TIM_PWM_Start+0xaa>
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	d104      	bne.n	80044c2 <HAL_TIM_PWM_Start+0xa2>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2202      	movs	r2, #2
 80044bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044c0:	e003      	b.n	80044ca <HAL_TIM_PWM_Start+0xaa>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2202      	movs	r2, #2
 80044c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2201      	movs	r2, #1
 80044d0:	6839      	ldr	r1, [r7, #0]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 ff4e 	bl	8005374 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a2d      	ldr	r2, [pc, #180]	; (8004594 <HAL_TIM_PWM_Start+0x174>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d004      	beq.n	80044ec <HAL_TIM_PWM_Start+0xcc>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a2c      	ldr	r2, [pc, #176]	; (8004598 <HAL_TIM_PWM_Start+0x178>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d101      	bne.n	80044f0 <HAL_TIM_PWM_Start+0xd0>
 80044ec:	2301      	movs	r3, #1
 80044ee:	e000      	b.n	80044f2 <HAL_TIM_PWM_Start+0xd2>
 80044f0:	2300      	movs	r3, #0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d007      	beq.n	8004506 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004504:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a22      	ldr	r2, [pc, #136]	; (8004594 <HAL_TIM_PWM_Start+0x174>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d022      	beq.n	8004556 <HAL_TIM_PWM_Start+0x136>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004518:	d01d      	beq.n	8004556 <HAL_TIM_PWM_Start+0x136>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a1f      	ldr	r2, [pc, #124]	; (800459c <HAL_TIM_PWM_Start+0x17c>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d018      	beq.n	8004556 <HAL_TIM_PWM_Start+0x136>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a1d      	ldr	r2, [pc, #116]	; (80045a0 <HAL_TIM_PWM_Start+0x180>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d013      	beq.n	8004556 <HAL_TIM_PWM_Start+0x136>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a1c      	ldr	r2, [pc, #112]	; (80045a4 <HAL_TIM_PWM_Start+0x184>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d00e      	beq.n	8004556 <HAL_TIM_PWM_Start+0x136>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a16      	ldr	r2, [pc, #88]	; (8004598 <HAL_TIM_PWM_Start+0x178>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d009      	beq.n	8004556 <HAL_TIM_PWM_Start+0x136>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a18      	ldr	r2, [pc, #96]	; (80045a8 <HAL_TIM_PWM_Start+0x188>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d004      	beq.n	8004556 <HAL_TIM_PWM_Start+0x136>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a16      	ldr	r2, [pc, #88]	; (80045ac <HAL_TIM_PWM_Start+0x18c>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d111      	bne.n	800457a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f003 0307 	and.w	r3, r3, #7
 8004560:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2b06      	cmp	r3, #6
 8004566:	d010      	beq.n	800458a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f042 0201 	orr.w	r2, r2, #1
 8004576:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004578:	e007      	b.n	800458a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f042 0201 	orr.w	r2, r2, #1
 8004588:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	40010000 	.word	0x40010000
 8004598:	40010400 	.word	0x40010400
 800459c:	40000400 	.word	0x40000400
 80045a0:	40000800 	.word	0x40000800
 80045a4:	40000c00 	.word	0x40000c00
 80045a8:	40014000 	.word	0x40014000
 80045ac:	40001800 	.word	0x40001800

080045b0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e097      	b.n	80046f4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d106      	bne.n	80045de <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7fd fb8b 	bl	8001cf4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2202      	movs	r2, #2
 80045e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	6812      	ldr	r2, [r2, #0]
 80045f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045f4:	f023 0307 	bic.w	r3, r3, #7
 80045f8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	3304      	adds	r3, #4
 8004602:	4619      	mov	r1, r3
 8004604:	4610      	mov	r0, r2
 8004606:	f000 fbcb 	bl	8004da0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	4313      	orrs	r3, r2
 800462a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004632:	f023 0303 	bic.w	r3, r3, #3
 8004636:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	021b      	lsls	r3, r3, #8
 8004642:	4313      	orrs	r3, r2
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	4313      	orrs	r3, r2
 8004648:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004650:	f023 030c 	bic.w	r3, r3, #12
 8004654:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800465c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004660:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	68da      	ldr	r2, [r3, #12]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	021b      	lsls	r3, r3, #8
 800466c:	4313      	orrs	r3, r2
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	4313      	orrs	r3, r2
 8004672:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	011a      	lsls	r2, r3, #4
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	031b      	lsls	r3, r3, #12
 8004680:	4313      	orrs	r3, r2
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800468e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004696:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	011b      	lsls	r3, r3, #4
 80046a2:	4313      	orrs	r3, r2
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3718      	adds	r7, #24
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800470c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004714:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800471c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004724:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d110      	bne.n	800474e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800472c:	7bfb      	ldrb	r3, [r7, #15]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d102      	bne.n	8004738 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004732:	7b7b      	ldrb	r3, [r7, #13]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d001      	beq.n	800473c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e069      	b.n	8004810 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800474c:	e031      	b.n	80047b2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b04      	cmp	r3, #4
 8004752:	d110      	bne.n	8004776 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004754:	7bbb      	ldrb	r3, [r7, #14]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d102      	bne.n	8004760 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800475a:	7b3b      	ldrb	r3, [r7, #12]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d001      	beq.n	8004764 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e055      	b.n	8004810 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004774:	e01d      	b.n	80047b2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004776:	7bfb      	ldrb	r3, [r7, #15]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d108      	bne.n	800478e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800477c:	7bbb      	ldrb	r3, [r7, #14]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d105      	bne.n	800478e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004782:	7b7b      	ldrb	r3, [r7, #13]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d102      	bne.n	800478e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004788:	7b3b      	ldrb	r3, [r7, #12]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d001      	beq.n	8004792 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e03e      	b.n	8004810 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2202      	movs	r2, #2
 8004796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2202      	movs	r2, #2
 800479e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2202      	movs	r2, #2
 80047a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2202      	movs	r2, #2
 80047ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d003      	beq.n	80047c0 <HAL_TIM_Encoder_Start+0xc4>
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	d008      	beq.n	80047d0 <HAL_TIM_Encoder_Start+0xd4>
 80047be:	e00f      	b.n	80047e0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2201      	movs	r2, #1
 80047c6:	2100      	movs	r1, #0
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 fdd3 	bl	8005374 <TIM_CCxChannelCmd>
      break;
 80047ce:	e016      	b.n	80047fe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2201      	movs	r2, #1
 80047d6:	2104      	movs	r1, #4
 80047d8:	4618      	mov	r0, r3
 80047da:	f000 fdcb 	bl	8005374 <TIM_CCxChannelCmd>
      break;
 80047de:	e00e      	b.n	80047fe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2201      	movs	r2, #1
 80047e6:	2100      	movs	r1, #0
 80047e8:	4618      	mov	r0, r3
 80047ea:	f000 fdc3 	bl	8005374 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2201      	movs	r2, #1
 80047f4:	2104      	movs	r1, #4
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 fdbc 	bl	8005374 <TIM_CCxChannelCmd>
      break;
 80047fc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f042 0201 	orr.w	r2, r2, #1
 800480c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b02      	cmp	r3, #2
 800482c:	d122      	bne.n	8004874 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b02      	cmp	r3, #2
 800483a:	d11b      	bne.n	8004874 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f06f 0202 	mvn.w	r2, #2
 8004844:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	f003 0303 	and.w	r3, r3, #3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 fa81 	bl	8004d62 <HAL_TIM_IC_CaptureCallback>
 8004860:	e005      	b.n	800486e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 fa73 	bl	8004d4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 fa84 	bl	8004d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	f003 0304 	and.w	r3, r3, #4
 800487e:	2b04      	cmp	r3, #4
 8004880:	d122      	bne.n	80048c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b04      	cmp	r3, #4
 800488e:	d11b      	bne.n	80048c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f06f 0204 	mvn.w	r2, #4
 8004898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2202      	movs	r2, #2
 800489e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 fa57 	bl	8004d62 <HAL_TIM_IC_CaptureCallback>
 80048b4:	e005      	b.n	80048c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 fa49 	bl	8004d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 fa5a 	bl	8004d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f003 0308 	and.w	r3, r3, #8
 80048d2:	2b08      	cmp	r3, #8
 80048d4:	d122      	bne.n	800491c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f003 0308 	and.w	r3, r3, #8
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	d11b      	bne.n	800491c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f06f 0208 	mvn.w	r2, #8
 80048ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2204      	movs	r2, #4
 80048f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 fa2d 	bl	8004d62 <HAL_TIM_IC_CaptureCallback>
 8004908:	e005      	b.n	8004916 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 fa1f 	bl	8004d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 fa30 	bl	8004d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	f003 0310 	and.w	r3, r3, #16
 8004926:	2b10      	cmp	r3, #16
 8004928:	d122      	bne.n	8004970 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f003 0310 	and.w	r3, r3, #16
 8004934:	2b10      	cmp	r3, #16
 8004936:	d11b      	bne.n	8004970 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f06f 0210 	mvn.w	r2, #16
 8004940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2208      	movs	r2, #8
 8004946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 fa03 	bl	8004d62 <HAL_TIM_IC_CaptureCallback>
 800495c:	e005      	b.n	800496a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f9f5 	bl	8004d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 fa06 	bl	8004d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b01      	cmp	r3, #1
 800497c:	d10e      	bne.n	800499c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	2b01      	cmp	r3, #1
 800498a:	d107      	bne.n	800499c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f06f 0201 	mvn.w	r2, #1
 8004994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f9cf 	bl	8004d3a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a6:	2b80      	cmp	r3, #128	; 0x80
 80049a8:	d10e      	bne.n	80049c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b4:	2b80      	cmp	r3, #128	; 0x80
 80049b6:	d107      	bne.n	80049c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 fd82 	bl	80054cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d2:	2b40      	cmp	r3, #64	; 0x40
 80049d4:	d10e      	bne.n	80049f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e0:	2b40      	cmp	r3, #64	; 0x40
 80049e2:	d107      	bne.n	80049f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f9cb 	bl	8004d8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	f003 0320 	and.w	r3, r3, #32
 80049fe:	2b20      	cmp	r3, #32
 8004a00:	d10e      	bne.n	8004a20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	f003 0320 	and.w	r3, r3, #32
 8004a0c:	2b20      	cmp	r3, #32
 8004a0e:	d107      	bne.n	8004a20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f06f 0220 	mvn.w	r2, #32
 8004a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 fd4c 	bl	80054b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a20:	bf00      	nop
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a34:	2300      	movs	r3, #0
 8004a36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d101      	bne.n	8004a46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a42:	2302      	movs	r3, #2
 8004a44:	e0ae      	b.n	8004ba4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2b0c      	cmp	r3, #12
 8004a52:	f200 809f 	bhi.w	8004b94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a56:	a201      	add	r2, pc, #4	; (adr r2, 8004a5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5c:	08004a91 	.word	0x08004a91
 8004a60:	08004b95 	.word	0x08004b95
 8004a64:	08004b95 	.word	0x08004b95
 8004a68:	08004b95 	.word	0x08004b95
 8004a6c:	08004ad1 	.word	0x08004ad1
 8004a70:	08004b95 	.word	0x08004b95
 8004a74:	08004b95 	.word	0x08004b95
 8004a78:	08004b95 	.word	0x08004b95
 8004a7c:	08004b13 	.word	0x08004b13
 8004a80:	08004b95 	.word	0x08004b95
 8004a84:	08004b95 	.word	0x08004b95
 8004a88:	08004b95 	.word	0x08004b95
 8004a8c:	08004b53 	.word	0x08004b53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68b9      	ldr	r1, [r7, #8]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 fa22 	bl	8004ee0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	699a      	ldr	r2, [r3, #24]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f042 0208 	orr.w	r2, r2, #8
 8004aaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699a      	ldr	r2, [r3, #24]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 0204 	bic.w	r2, r2, #4
 8004aba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6999      	ldr	r1, [r3, #24]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	691a      	ldr	r2, [r3, #16]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	619a      	str	r2, [r3, #24]
      break;
 8004ace:	e064      	b.n	8004b9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68b9      	ldr	r1, [r7, #8]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f000 fa72 	bl	8004fc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	699a      	ldr	r2, [r3, #24]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	699a      	ldr	r2, [r3, #24]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004afa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6999      	ldr	r1, [r3, #24]
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	021a      	lsls	r2, r3, #8
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	619a      	str	r2, [r3, #24]
      break;
 8004b10:	e043      	b.n	8004b9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68b9      	ldr	r1, [r7, #8]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 fac7 	bl	80050ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	69da      	ldr	r2, [r3, #28]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f042 0208 	orr.w	r2, r2, #8
 8004b2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	69da      	ldr	r2, [r3, #28]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 0204 	bic.w	r2, r2, #4
 8004b3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	69d9      	ldr	r1, [r3, #28]
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	691a      	ldr	r2, [r3, #16]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	61da      	str	r2, [r3, #28]
      break;
 8004b50:	e023      	b.n	8004b9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68b9      	ldr	r1, [r7, #8]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f000 fb1b 	bl	8005194 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	69da      	ldr	r2, [r3, #28]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	69da      	ldr	r2, [r3, #28]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	69d9      	ldr	r1, [r3, #28]
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	021a      	lsls	r2, r3, #8
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	61da      	str	r2, [r3, #28]
      break;
 8004b92:	e002      	b.n	8004b9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	75fb      	strb	r3, [r7, #23]
      break;
 8004b98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3718      	adds	r7, #24
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d101      	bne.n	8004bc8 <HAL_TIM_ConfigClockSource+0x1c>
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	e0b4      	b.n	8004d32 <HAL_TIM_ConfigClockSource+0x186>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004be6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c00:	d03e      	beq.n	8004c80 <HAL_TIM_ConfigClockSource+0xd4>
 8004c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c06:	f200 8087 	bhi.w	8004d18 <HAL_TIM_ConfigClockSource+0x16c>
 8004c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c0e:	f000 8086 	beq.w	8004d1e <HAL_TIM_ConfigClockSource+0x172>
 8004c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c16:	d87f      	bhi.n	8004d18 <HAL_TIM_ConfigClockSource+0x16c>
 8004c18:	2b70      	cmp	r3, #112	; 0x70
 8004c1a:	d01a      	beq.n	8004c52 <HAL_TIM_ConfigClockSource+0xa6>
 8004c1c:	2b70      	cmp	r3, #112	; 0x70
 8004c1e:	d87b      	bhi.n	8004d18 <HAL_TIM_ConfigClockSource+0x16c>
 8004c20:	2b60      	cmp	r3, #96	; 0x60
 8004c22:	d050      	beq.n	8004cc6 <HAL_TIM_ConfigClockSource+0x11a>
 8004c24:	2b60      	cmp	r3, #96	; 0x60
 8004c26:	d877      	bhi.n	8004d18 <HAL_TIM_ConfigClockSource+0x16c>
 8004c28:	2b50      	cmp	r3, #80	; 0x50
 8004c2a:	d03c      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0xfa>
 8004c2c:	2b50      	cmp	r3, #80	; 0x50
 8004c2e:	d873      	bhi.n	8004d18 <HAL_TIM_ConfigClockSource+0x16c>
 8004c30:	2b40      	cmp	r3, #64	; 0x40
 8004c32:	d058      	beq.n	8004ce6 <HAL_TIM_ConfigClockSource+0x13a>
 8004c34:	2b40      	cmp	r3, #64	; 0x40
 8004c36:	d86f      	bhi.n	8004d18 <HAL_TIM_ConfigClockSource+0x16c>
 8004c38:	2b30      	cmp	r3, #48	; 0x30
 8004c3a:	d064      	beq.n	8004d06 <HAL_TIM_ConfigClockSource+0x15a>
 8004c3c:	2b30      	cmp	r3, #48	; 0x30
 8004c3e:	d86b      	bhi.n	8004d18 <HAL_TIM_ConfigClockSource+0x16c>
 8004c40:	2b20      	cmp	r3, #32
 8004c42:	d060      	beq.n	8004d06 <HAL_TIM_ConfigClockSource+0x15a>
 8004c44:	2b20      	cmp	r3, #32
 8004c46:	d867      	bhi.n	8004d18 <HAL_TIM_ConfigClockSource+0x16c>
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d05c      	beq.n	8004d06 <HAL_TIM_ConfigClockSource+0x15a>
 8004c4c:	2b10      	cmp	r3, #16
 8004c4e:	d05a      	beq.n	8004d06 <HAL_TIM_ConfigClockSource+0x15a>
 8004c50:	e062      	b.n	8004d18 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6818      	ldr	r0, [r3, #0]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	6899      	ldr	r1, [r3, #8]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	685a      	ldr	r2, [r3, #4]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	f000 fb67 	bl	8005334 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	609a      	str	r2, [r3, #8]
      break;
 8004c7e:	e04f      	b.n	8004d20 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6818      	ldr	r0, [r3, #0]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	6899      	ldr	r1, [r3, #8]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f000 fb50 	bl	8005334 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ca2:	609a      	str	r2, [r3, #8]
      break;
 8004ca4:	e03c      	b.n	8004d20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6818      	ldr	r0, [r3, #0]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	6859      	ldr	r1, [r3, #4]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	f000 fac4 	bl	8005240 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2150      	movs	r1, #80	; 0x50
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f000 fb1d 	bl	80052fe <TIM_ITRx_SetConfig>
      break;
 8004cc4:	e02c      	b.n	8004d20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6818      	ldr	r0, [r3, #0]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	6859      	ldr	r1, [r3, #4]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	f000 fae3 	bl	800529e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2160      	movs	r1, #96	; 0x60
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 fb0d 	bl	80052fe <TIM_ITRx_SetConfig>
      break;
 8004ce4:	e01c      	b.n	8004d20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6818      	ldr	r0, [r3, #0]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	6859      	ldr	r1, [r3, #4]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	f000 faa4 	bl	8005240 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2140      	movs	r1, #64	; 0x40
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f000 fafd 	bl	80052fe <TIM_ITRx_SetConfig>
      break;
 8004d04:	e00c      	b.n	8004d20 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4610      	mov	r0, r2
 8004d12:	f000 faf4 	bl	80052fe <TIM_ITRx_SetConfig>
      break;
 8004d16:	e003      	b.n	8004d20 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d1c:	e000      	b.n	8004d20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b083      	sub	sp, #12
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d42:	bf00      	nop
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr

08004d4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b083      	sub	sp, #12
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d56:	bf00      	nop
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr

08004d62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b083      	sub	sp, #12
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d6a:	bf00      	nop
 8004d6c:	370c      	adds	r7, #12
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr

08004d76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b083      	sub	sp, #12
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d7e:	bf00      	nop
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b083      	sub	sp, #12
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d92:	bf00      	nop
 8004d94:	370c      	adds	r7, #12
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
	...

08004da0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a40      	ldr	r2, [pc, #256]	; (8004eb4 <TIM_Base_SetConfig+0x114>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d013      	beq.n	8004de0 <TIM_Base_SetConfig+0x40>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dbe:	d00f      	beq.n	8004de0 <TIM_Base_SetConfig+0x40>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a3d      	ldr	r2, [pc, #244]	; (8004eb8 <TIM_Base_SetConfig+0x118>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d00b      	beq.n	8004de0 <TIM_Base_SetConfig+0x40>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a3c      	ldr	r2, [pc, #240]	; (8004ebc <TIM_Base_SetConfig+0x11c>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d007      	beq.n	8004de0 <TIM_Base_SetConfig+0x40>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a3b      	ldr	r2, [pc, #236]	; (8004ec0 <TIM_Base_SetConfig+0x120>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d003      	beq.n	8004de0 <TIM_Base_SetConfig+0x40>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a3a      	ldr	r2, [pc, #232]	; (8004ec4 <TIM_Base_SetConfig+0x124>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d108      	bne.n	8004df2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a2f      	ldr	r2, [pc, #188]	; (8004eb4 <TIM_Base_SetConfig+0x114>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d02b      	beq.n	8004e52 <TIM_Base_SetConfig+0xb2>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e00:	d027      	beq.n	8004e52 <TIM_Base_SetConfig+0xb2>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a2c      	ldr	r2, [pc, #176]	; (8004eb8 <TIM_Base_SetConfig+0x118>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d023      	beq.n	8004e52 <TIM_Base_SetConfig+0xb2>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a2b      	ldr	r2, [pc, #172]	; (8004ebc <TIM_Base_SetConfig+0x11c>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d01f      	beq.n	8004e52 <TIM_Base_SetConfig+0xb2>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a2a      	ldr	r2, [pc, #168]	; (8004ec0 <TIM_Base_SetConfig+0x120>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d01b      	beq.n	8004e52 <TIM_Base_SetConfig+0xb2>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a29      	ldr	r2, [pc, #164]	; (8004ec4 <TIM_Base_SetConfig+0x124>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d017      	beq.n	8004e52 <TIM_Base_SetConfig+0xb2>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a28      	ldr	r2, [pc, #160]	; (8004ec8 <TIM_Base_SetConfig+0x128>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d013      	beq.n	8004e52 <TIM_Base_SetConfig+0xb2>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a27      	ldr	r2, [pc, #156]	; (8004ecc <TIM_Base_SetConfig+0x12c>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d00f      	beq.n	8004e52 <TIM_Base_SetConfig+0xb2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a26      	ldr	r2, [pc, #152]	; (8004ed0 <TIM_Base_SetConfig+0x130>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d00b      	beq.n	8004e52 <TIM_Base_SetConfig+0xb2>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a25      	ldr	r2, [pc, #148]	; (8004ed4 <TIM_Base_SetConfig+0x134>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d007      	beq.n	8004e52 <TIM_Base_SetConfig+0xb2>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a24      	ldr	r2, [pc, #144]	; (8004ed8 <TIM_Base_SetConfig+0x138>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d003      	beq.n	8004e52 <TIM_Base_SetConfig+0xb2>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a23      	ldr	r2, [pc, #140]	; (8004edc <TIM_Base_SetConfig+0x13c>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d108      	bne.n	8004e64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a0a      	ldr	r2, [pc, #40]	; (8004eb4 <TIM_Base_SetConfig+0x114>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d003      	beq.n	8004e98 <TIM_Base_SetConfig+0xf8>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a0c      	ldr	r2, [pc, #48]	; (8004ec4 <TIM_Base_SetConfig+0x124>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d103      	bne.n	8004ea0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	691a      	ldr	r2, [r3, #16]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	615a      	str	r2, [r3, #20]
}
 8004ea6:	bf00      	nop
 8004ea8:	3714      	adds	r7, #20
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	40010000 	.word	0x40010000
 8004eb8:	40000400 	.word	0x40000400
 8004ebc:	40000800 	.word	0x40000800
 8004ec0:	40000c00 	.word	0x40000c00
 8004ec4:	40010400 	.word	0x40010400
 8004ec8:	40014000 	.word	0x40014000
 8004ecc:	40014400 	.word	0x40014400
 8004ed0:	40014800 	.word	0x40014800
 8004ed4:	40001800 	.word	0x40001800
 8004ed8:	40001c00 	.word	0x40001c00
 8004edc:	40002000 	.word	0x40002000

08004ee0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	f023 0201 	bic.w	r2, r3, #1
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f023 0303 	bic.w	r3, r3, #3
 8004f16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f023 0302 	bic.w	r3, r3, #2
 8004f28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a20      	ldr	r2, [pc, #128]	; (8004fb8 <TIM_OC1_SetConfig+0xd8>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d003      	beq.n	8004f44 <TIM_OC1_SetConfig+0x64>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a1f      	ldr	r2, [pc, #124]	; (8004fbc <TIM_OC1_SetConfig+0xdc>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d10c      	bne.n	8004f5e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f023 0308 	bic.w	r3, r3, #8
 8004f4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f023 0304 	bic.w	r3, r3, #4
 8004f5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a15      	ldr	r2, [pc, #84]	; (8004fb8 <TIM_OC1_SetConfig+0xd8>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d003      	beq.n	8004f6e <TIM_OC1_SetConfig+0x8e>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a14      	ldr	r2, [pc, #80]	; (8004fbc <TIM_OC1_SetConfig+0xdc>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d111      	bne.n	8004f92 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	621a      	str	r2, [r3, #32]
}
 8004fac:	bf00      	nop
 8004fae:	371c      	adds	r7, #28
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	40010000 	.word	0x40010000
 8004fbc:	40010400 	.word	0x40010400

08004fc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b087      	sub	sp, #28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	f023 0210 	bic.w	r2, r3, #16
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	021b      	lsls	r3, r3, #8
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	4313      	orrs	r3, r2
 8005002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	f023 0320 	bic.w	r3, r3, #32
 800500a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	011b      	lsls	r3, r3, #4
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	4313      	orrs	r3, r2
 8005016:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a22      	ldr	r2, [pc, #136]	; (80050a4 <TIM_OC2_SetConfig+0xe4>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d003      	beq.n	8005028 <TIM_OC2_SetConfig+0x68>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a21      	ldr	r2, [pc, #132]	; (80050a8 <TIM_OC2_SetConfig+0xe8>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d10d      	bne.n	8005044 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800502e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	011b      	lsls	r3, r3, #4
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	4313      	orrs	r3, r2
 800503a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005042:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a17      	ldr	r2, [pc, #92]	; (80050a4 <TIM_OC2_SetConfig+0xe4>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d003      	beq.n	8005054 <TIM_OC2_SetConfig+0x94>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a16      	ldr	r2, [pc, #88]	; (80050a8 <TIM_OC2_SetConfig+0xe8>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d113      	bne.n	800507c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800505a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005062:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	4313      	orrs	r3, r2
 800506e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	4313      	orrs	r3, r2
 800507a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	685a      	ldr	r2, [r3, #4]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	621a      	str	r2, [r3, #32]
}
 8005096:	bf00      	nop
 8005098:	371c      	adds	r7, #28
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	40010000 	.word	0x40010000
 80050a8:	40010400 	.word	0x40010400

080050ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b087      	sub	sp, #28
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	69db      	ldr	r3, [r3, #28]
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f023 0303 	bic.w	r3, r3, #3
 80050e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	021b      	lsls	r3, r3, #8
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	4313      	orrs	r3, r2
 8005100:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a21      	ldr	r2, [pc, #132]	; (800518c <TIM_OC3_SetConfig+0xe0>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d003      	beq.n	8005112 <TIM_OC3_SetConfig+0x66>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a20      	ldr	r2, [pc, #128]	; (8005190 <TIM_OC3_SetConfig+0xe4>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d10d      	bne.n	800512e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005118:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	021b      	lsls	r3, r3, #8
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	4313      	orrs	r3, r2
 8005124:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800512c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a16      	ldr	r2, [pc, #88]	; (800518c <TIM_OC3_SetConfig+0xe0>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d003      	beq.n	800513e <TIM_OC3_SetConfig+0x92>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a15      	ldr	r2, [pc, #84]	; (8005190 <TIM_OC3_SetConfig+0xe4>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d113      	bne.n	8005166 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005144:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800514c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	011b      	lsls	r3, r3, #4
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	4313      	orrs	r3, r2
 8005158:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	011b      	lsls	r3, r3, #4
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	4313      	orrs	r3, r2
 8005164:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	621a      	str	r2, [r3, #32]
}
 8005180:	bf00      	nop
 8005182:	371c      	adds	r7, #28
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	40010000 	.word	0x40010000
 8005190:	40010400 	.word	0x40010400

08005194 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005194:	b480      	push	{r7}
 8005196:	b087      	sub	sp, #28
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	021b      	lsls	r3, r3, #8
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	031b      	lsls	r3, r3, #12
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a12      	ldr	r2, [pc, #72]	; (8005238 <TIM_OC4_SetConfig+0xa4>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d003      	beq.n	80051fc <TIM_OC4_SetConfig+0x68>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a11      	ldr	r2, [pc, #68]	; (800523c <TIM_OC4_SetConfig+0xa8>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d109      	bne.n	8005210 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005202:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	019b      	lsls	r3, r3, #6
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	4313      	orrs	r3, r2
 800520e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	621a      	str	r2, [r3, #32]
}
 800522a:	bf00      	nop
 800522c:	371c      	adds	r7, #28
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	40010000 	.word	0x40010000
 800523c:	40010400 	.word	0x40010400

08005240 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005240:	b480      	push	{r7}
 8005242:	b087      	sub	sp, #28
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6a1b      	ldr	r3, [r3, #32]
 8005250:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	f023 0201 	bic.w	r2, r3, #1
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800526a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	011b      	lsls	r3, r3, #4
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	4313      	orrs	r3, r2
 8005274:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f023 030a 	bic.w	r3, r3, #10
 800527c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	4313      	orrs	r3, r2
 8005284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	621a      	str	r2, [r3, #32]
}
 8005292:	bf00      	nop
 8005294:	371c      	adds	r7, #28
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800529e:	b480      	push	{r7}
 80052a0:	b087      	sub	sp, #28
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	60f8      	str	r0, [r7, #12]
 80052a6:	60b9      	str	r1, [r7, #8]
 80052a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	f023 0210 	bic.w	r2, r3, #16
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6a1b      	ldr	r3, [r3, #32]
 80052c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	031b      	lsls	r3, r3, #12
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	011b      	lsls	r3, r3, #4
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	621a      	str	r2, [r3, #32]
}
 80052f2:	bf00      	nop
 80052f4:	371c      	adds	r7, #28
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052fe:	b480      	push	{r7}
 8005300:	b085      	sub	sp, #20
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
 8005306:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005314:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	4313      	orrs	r3, r2
 800531c:	f043 0307 	orr.w	r3, r3, #7
 8005320:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	609a      	str	r2, [r3, #8]
}
 8005328:	bf00      	nop
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005334:	b480      	push	{r7}
 8005336:	b087      	sub	sp, #28
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
 8005340:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800534e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	021a      	lsls	r2, r3, #8
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	431a      	orrs	r2, r3
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	4313      	orrs	r3, r2
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	4313      	orrs	r3, r2
 8005360:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	609a      	str	r2, [r3, #8]
}
 8005368:	bf00      	nop
 800536a:	371c      	adds	r7, #28
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005374:	b480      	push	{r7}
 8005376:	b087      	sub	sp, #28
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	f003 031f 	and.w	r3, r3, #31
 8005386:	2201      	movs	r2, #1
 8005388:	fa02 f303 	lsl.w	r3, r2, r3
 800538c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6a1a      	ldr	r2, [r3, #32]
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	43db      	mvns	r3, r3
 8005396:	401a      	ands	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6a1a      	ldr	r2, [r3, #32]
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	f003 031f 	and.w	r3, r3, #31
 80053a6:	6879      	ldr	r1, [r7, #4]
 80053a8:	fa01 f303 	lsl.w	r3, r1, r3
 80053ac:	431a      	orrs	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	621a      	str	r2, [r3, #32]
}
 80053b2:	bf00      	nop
 80053b4:	371c      	adds	r7, #28
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
	...

080053c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d101      	bne.n	80053d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053d4:	2302      	movs	r3, #2
 80053d6:	e05a      	b.n	800548e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2202      	movs	r2, #2
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	4313      	orrs	r3, r2
 8005408:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a21      	ldr	r2, [pc, #132]	; (800549c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d022      	beq.n	8005462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005424:	d01d      	beq.n	8005462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a1d      	ldr	r2, [pc, #116]	; (80054a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d018      	beq.n	8005462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a1b      	ldr	r2, [pc, #108]	; (80054a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d013      	beq.n	8005462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a1a      	ldr	r2, [pc, #104]	; (80054a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d00e      	beq.n	8005462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a18      	ldr	r2, [pc, #96]	; (80054ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d009      	beq.n	8005462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a17      	ldr	r2, [pc, #92]	; (80054b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d004      	beq.n	8005462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a15      	ldr	r2, [pc, #84]	; (80054b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d10c      	bne.n	800547c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005468:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	4313      	orrs	r3, r2
 8005472:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3714      	adds	r7, #20
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	40010000 	.word	0x40010000
 80054a0:	40000400 	.word	0x40000400
 80054a4:	40000800 	.word	0x40000800
 80054a8:	40000c00 	.word	0x40000c00
 80054ac:	40010400 	.word	0x40010400
 80054b0:	40014000 	.word	0x40014000
 80054b4:	40001800 	.word	0x40001800

080054b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e03f      	b.n	8005572 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d106      	bne.n	800550c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f7fc fcdc 	bl	8001ec4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2224      	movs	r2, #36	; 0x24
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68da      	ldr	r2, [r3, #12]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005522:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f829 	bl	800557c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	691a      	ldr	r2, [r3, #16]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005538:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	695a      	ldr	r2, [r3, #20]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005548:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68da      	ldr	r2, [r3, #12]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005558:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2220      	movs	r2, #32
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2220      	movs	r2, #32
 800556c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
	...

0800557c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800557c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005580:	b0c0      	sub	sp, #256	; 0x100
 8005582:	af00      	add	r7, sp, #0
 8005584:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005598:	68d9      	ldr	r1, [r3, #12]
 800559a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	ea40 0301 	orr.w	r3, r0, r1
 80055a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055aa:	689a      	ldr	r2, [r3, #8]
 80055ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	431a      	orrs	r2, r3
 80055b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	431a      	orrs	r2, r3
 80055bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80055d4:	f021 010c 	bic.w	r1, r1, #12
 80055d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80055e2:	430b      	orrs	r3, r1
 80055e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80055f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f6:	6999      	ldr	r1, [r3, #24]
 80055f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	ea40 0301 	orr.w	r3, r0, r1
 8005602:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	4b8f      	ldr	r3, [pc, #572]	; (8005848 <UART_SetConfig+0x2cc>)
 800560c:	429a      	cmp	r2, r3
 800560e:	d005      	beq.n	800561c <UART_SetConfig+0xa0>
 8005610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	4b8d      	ldr	r3, [pc, #564]	; (800584c <UART_SetConfig+0x2d0>)
 8005618:	429a      	cmp	r2, r3
 800561a:	d104      	bne.n	8005626 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800561c:	f7fe f90c 	bl	8003838 <HAL_RCC_GetPCLK2Freq>
 8005620:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005624:	e003      	b.n	800562e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005626:	f7fe f8f3 	bl	8003810 <HAL_RCC_GetPCLK1Freq>
 800562a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800562e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005632:	69db      	ldr	r3, [r3, #28]
 8005634:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005638:	f040 810c 	bne.w	8005854 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800563c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005640:	2200      	movs	r2, #0
 8005642:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005646:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800564a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800564e:	4622      	mov	r2, r4
 8005650:	462b      	mov	r3, r5
 8005652:	1891      	adds	r1, r2, r2
 8005654:	65b9      	str	r1, [r7, #88]	; 0x58
 8005656:	415b      	adcs	r3, r3
 8005658:	65fb      	str	r3, [r7, #92]	; 0x5c
 800565a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800565e:	4621      	mov	r1, r4
 8005660:	eb12 0801 	adds.w	r8, r2, r1
 8005664:	4629      	mov	r1, r5
 8005666:	eb43 0901 	adc.w	r9, r3, r1
 800566a:	f04f 0200 	mov.w	r2, #0
 800566e:	f04f 0300 	mov.w	r3, #0
 8005672:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005676:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800567a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800567e:	4690      	mov	r8, r2
 8005680:	4699      	mov	r9, r3
 8005682:	4623      	mov	r3, r4
 8005684:	eb18 0303 	adds.w	r3, r8, r3
 8005688:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800568c:	462b      	mov	r3, r5
 800568e:	eb49 0303 	adc.w	r3, r9, r3
 8005692:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80056a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80056a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80056aa:	460b      	mov	r3, r1
 80056ac:	18db      	adds	r3, r3, r3
 80056ae:	653b      	str	r3, [r7, #80]	; 0x50
 80056b0:	4613      	mov	r3, r2
 80056b2:	eb42 0303 	adc.w	r3, r2, r3
 80056b6:	657b      	str	r3, [r7, #84]	; 0x54
 80056b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80056bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80056c0:	f7fa fda0 	bl	8000204 <__aeabi_uldivmod>
 80056c4:	4602      	mov	r2, r0
 80056c6:	460b      	mov	r3, r1
 80056c8:	4b61      	ldr	r3, [pc, #388]	; (8005850 <UART_SetConfig+0x2d4>)
 80056ca:	fba3 2302 	umull	r2, r3, r3, r2
 80056ce:	095b      	lsrs	r3, r3, #5
 80056d0:	011c      	lsls	r4, r3, #4
 80056d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056d6:	2200      	movs	r2, #0
 80056d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80056e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80056e4:	4642      	mov	r2, r8
 80056e6:	464b      	mov	r3, r9
 80056e8:	1891      	adds	r1, r2, r2
 80056ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80056ec:	415b      	adcs	r3, r3
 80056ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80056f4:	4641      	mov	r1, r8
 80056f6:	eb12 0a01 	adds.w	sl, r2, r1
 80056fa:	4649      	mov	r1, r9
 80056fc:	eb43 0b01 	adc.w	fp, r3, r1
 8005700:	f04f 0200 	mov.w	r2, #0
 8005704:	f04f 0300 	mov.w	r3, #0
 8005708:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800570c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005710:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005714:	4692      	mov	sl, r2
 8005716:	469b      	mov	fp, r3
 8005718:	4643      	mov	r3, r8
 800571a:	eb1a 0303 	adds.w	r3, sl, r3
 800571e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005722:	464b      	mov	r3, r9
 8005724:	eb4b 0303 	adc.w	r3, fp, r3
 8005728:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800572c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005738:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800573c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005740:	460b      	mov	r3, r1
 8005742:	18db      	adds	r3, r3, r3
 8005744:	643b      	str	r3, [r7, #64]	; 0x40
 8005746:	4613      	mov	r3, r2
 8005748:	eb42 0303 	adc.w	r3, r2, r3
 800574c:	647b      	str	r3, [r7, #68]	; 0x44
 800574e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005752:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005756:	f7fa fd55 	bl	8000204 <__aeabi_uldivmod>
 800575a:	4602      	mov	r2, r0
 800575c:	460b      	mov	r3, r1
 800575e:	4611      	mov	r1, r2
 8005760:	4b3b      	ldr	r3, [pc, #236]	; (8005850 <UART_SetConfig+0x2d4>)
 8005762:	fba3 2301 	umull	r2, r3, r3, r1
 8005766:	095b      	lsrs	r3, r3, #5
 8005768:	2264      	movs	r2, #100	; 0x64
 800576a:	fb02 f303 	mul.w	r3, r2, r3
 800576e:	1acb      	subs	r3, r1, r3
 8005770:	00db      	lsls	r3, r3, #3
 8005772:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005776:	4b36      	ldr	r3, [pc, #216]	; (8005850 <UART_SetConfig+0x2d4>)
 8005778:	fba3 2302 	umull	r2, r3, r3, r2
 800577c:	095b      	lsrs	r3, r3, #5
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005784:	441c      	add	r4, r3
 8005786:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800578a:	2200      	movs	r2, #0
 800578c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005790:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005794:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005798:	4642      	mov	r2, r8
 800579a:	464b      	mov	r3, r9
 800579c:	1891      	adds	r1, r2, r2
 800579e:	63b9      	str	r1, [r7, #56]	; 0x38
 80057a0:	415b      	adcs	r3, r3
 80057a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80057a8:	4641      	mov	r1, r8
 80057aa:	1851      	adds	r1, r2, r1
 80057ac:	6339      	str	r1, [r7, #48]	; 0x30
 80057ae:	4649      	mov	r1, r9
 80057b0:	414b      	adcs	r3, r1
 80057b2:	637b      	str	r3, [r7, #52]	; 0x34
 80057b4:	f04f 0200 	mov.w	r2, #0
 80057b8:	f04f 0300 	mov.w	r3, #0
 80057bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80057c0:	4659      	mov	r1, fp
 80057c2:	00cb      	lsls	r3, r1, #3
 80057c4:	4651      	mov	r1, sl
 80057c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057ca:	4651      	mov	r1, sl
 80057cc:	00ca      	lsls	r2, r1, #3
 80057ce:	4610      	mov	r0, r2
 80057d0:	4619      	mov	r1, r3
 80057d2:	4603      	mov	r3, r0
 80057d4:	4642      	mov	r2, r8
 80057d6:	189b      	adds	r3, r3, r2
 80057d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057dc:	464b      	mov	r3, r9
 80057de:	460a      	mov	r2, r1
 80057e0:	eb42 0303 	adc.w	r3, r2, r3
 80057e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80057e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80057f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80057f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80057fc:	460b      	mov	r3, r1
 80057fe:	18db      	adds	r3, r3, r3
 8005800:	62bb      	str	r3, [r7, #40]	; 0x28
 8005802:	4613      	mov	r3, r2
 8005804:	eb42 0303 	adc.w	r3, r2, r3
 8005808:	62fb      	str	r3, [r7, #44]	; 0x2c
 800580a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800580e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005812:	f7fa fcf7 	bl	8000204 <__aeabi_uldivmod>
 8005816:	4602      	mov	r2, r0
 8005818:	460b      	mov	r3, r1
 800581a:	4b0d      	ldr	r3, [pc, #52]	; (8005850 <UART_SetConfig+0x2d4>)
 800581c:	fba3 1302 	umull	r1, r3, r3, r2
 8005820:	095b      	lsrs	r3, r3, #5
 8005822:	2164      	movs	r1, #100	; 0x64
 8005824:	fb01 f303 	mul.w	r3, r1, r3
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	3332      	adds	r3, #50	; 0x32
 800582e:	4a08      	ldr	r2, [pc, #32]	; (8005850 <UART_SetConfig+0x2d4>)
 8005830:	fba2 2303 	umull	r2, r3, r2, r3
 8005834:	095b      	lsrs	r3, r3, #5
 8005836:	f003 0207 	and.w	r2, r3, #7
 800583a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4422      	add	r2, r4
 8005842:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005844:	e105      	b.n	8005a52 <UART_SetConfig+0x4d6>
 8005846:	bf00      	nop
 8005848:	40011000 	.word	0x40011000
 800584c:	40011400 	.word	0x40011400
 8005850:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005854:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005858:	2200      	movs	r2, #0
 800585a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800585e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005862:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005866:	4642      	mov	r2, r8
 8005868:	464b      	mov	r3, r9
 800586a:	1891      	adds	r1, r2, r2
 800586c:	6239      	str	r1, [r7, #32]
 800586e:	415b      	adcs	r3, r3
 8005870:	627b      	str	r3, [r7, #36]	; 0x24
 8005872:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005876:	4641      	mov	r1, r8
 8005878:	1854      	adds	r4, r2, r1
 800587a:	4649      	mov	r1, r9
 800587c:	eb43 0501 	adc.w	r5, r3, r1
 8005880:	f04f 0200 	mov.w	r2, #0
 8005884:	f04f 0300 	mov.w	r3, #0
 8005888:	00eb      	lsls	r3, r5, #3
 800588a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800588e:	00e2      	lsls	r2, r4, #3
 8005890:	4614      	mov	r4, r2
 8005892:	461d      	mov	r5, r3
 8005894:	4643      	mov	r3, r8
 8005896:	18e3      	adds	r3, r4, r3
 8005898:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800589c:	464b      	mov	r3, r9
 800589e:	eb45 0303 	adc.w	r3, r5, r3
 80058a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80058a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058b6:	f04f 0200 	mov.w	r2, #0
 80058ba:	f04f 0300 	mov.w	r3, #0
 80058be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80058c2:	4629      	mov	r1, r5
 80058c4:	008b      	lsls	r3, r1, #2
 80058c6:	4621      	mov	r1, r4
 80058c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058cc:	4621      	mov	r1, r4
 80058ce:	008a      	lsls	r2, r1, #2
 80058d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80058d4:	f7fa fc96 	bl	8000204 <__aeabi_uldivmod>
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	4b60      	ldr	r3, [pc, #384]	; (8005a60 <UART_SetConfig+0x4e4>)
 80058de:	fba3 2302 	umull	r2, r3, r3, r2
 80058e2:	095b      	lsrs	r3, r3, #5
 80058e4:	011c      	lsls	r4, r3, #4
 80058e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058ea:	2200      	movs	r2, #0
 80058ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80058f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80058f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80058f8:	4642      	mov	r2, r8
 80058fa:	464b      	mov	r3, r9
 80058fc:	1891      	adds	r1, r2, r2
 80058fe:	61b9      	str	r1, [r7, #24]
 8005900:	415b      	adcs	r3, r3
 8005902:	61fb      	str	r3, [r7, #28]
 8005904:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005908:	4641      	mov	r1, r8
 800590a:	1851      	adds	r1, r2, r1
 800590c:	6139      	str	r1, [r7, #16]
 800590e:	4649      	mov	r1, r9
 8005910:	414b      	adcs	r3, r1
 8005912:	617b      	str	r3, [r7, #20]
 8005914:	f04f 0200 	mov.w	r2, #0
 8005918:	f04f 0300 	mov.w	r3, #0
 800591c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005920:	4659      	mov	r1, fp
 8005922:	00cb      	lsls	r3, r1, #3
 8005924:	4651      	mov	r1, sl
 8005926:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800592a:	4651      	mov	r1, sl
 800592c:	00ca      	lsls	r2, r1, #3
 800592e:	4610      	mov	r0, r2
 8005930:	4619      	mov	r1, r3
 8005932:	4603      	mov	r3, r0
 8005934:	4642      	mov	r2, r8
 8005936:	189b      	adds	r3, r3, r2
 8005938:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800593c:	464b      	mov	r3, r9
 800593e:	460a      	mov	r2, r1
 8005940:	eb42 0303 	adc.w	r3, r2, r3
 8005944:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	67bb      	str	r3, [r7, #120]	; 0x78
 8005952:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005954:	f04f 0200 	mov.w	r2, #0
 8005958:	f04f 0300 	mov.w	r3, #0
 800595c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005960:	4649      	mov	r1, r9
 8005962:	008b      	lsls	r3, r1, #2
 8005964:	4641      	mov	r1, r8
 8005966:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800596a:	4641      	mov	r1, r8
 800596c:	008a      	lsls	r2, r1, #2
 800596e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005972:	f7fa fc47 	bl	8000204 <__aeabi_uldivmod>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	4b39      	ldr	r3, [pc, #228]	; (8005a60 <UART_SetConfig+0x4e4>)
 800597c:	fba3 1302 	umull	r1, r3, r3, r2
 8005980:	095b      	lsrs	r3, r3, #5
 8005982:	2164      	movs	r1, #100	; 0x64
 8005984:	fb01 f303 	mul.w	r3, r1, r3
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	011b      	lsls	r3, r3, #4
 800598c:	3332      	adds	r3, #50	; 0x32
 800598e:	4a34      	ldr	r2, [pc, #208]	; (8005a60 <UART_SetConfig+0x4e4>)
 8005990:	fba2 2303 	umull	r2, r3, r2, r3
 8005994:	095b      	lsrs	r3, r3, #5
 8005996:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800599a:	441c      	add	r4, r3
 800599c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059a0:	2200      	movs	r2, #0
 80059a2:	673b      	str	r3, [r7, #112]	; 0x70
 80059a4:	677a      	str	r2, [r7, #116]	; 0x74
 80059a6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80059aa:	4642      	mov	r2, r8
 80059ac:	464b      	mov	r3, r9
 80059ae:	1891      	adds	r1, r2, r2
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	415b      	adcs	r3, r3
 80059b4:	60fb      	str	r3, [r7, #12]
 80059b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059ba:	4641      	mov	r1, r8
 80059bc:	1851      	adds	r1, r2, r1
 80059be:	6039      	str	r1, [r7, #0]
 80059c0:	4649      	mov	r1, r9
 80059c2:	414b      	adcs	r3, r1
 80059c4:	607b      	str	r3, [r7, #4]
 80059c6:	f04f 0200 	mov.w	r2, #0
 80059ca:	f04f 0300 	mov.w	r3, #0
 80059ce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059d2:	4659      	mov	r1, fp
 80059d4:	00cb      	lsls	r3, r1, #3
 80059d6:	4651      	mov	r1, sl
 80059d8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059dc:	4651      	mov	r1, sl
 80059de:	00ca      	lsls	r2, r1, #3
 80059e0:	4610      	mov	r0, r2
 80059e2:	4619      	mov	r1, r3
 80059e4:	4603      	mov	r3, r0
 80059e6:	4642      	mov	r2, r8
 80059e8:	189b      	adds	r3, r3, r2
 80059ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80059ec:	464b      	mov	r3, r9
 80059ee:	460a      	mov	r2, r1
 80059f0:	eb42 0303 	adc.w	r3, r2, r3
 80059f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	663b      	str	r3, [r7, #96]	; 0x60
 8005a00:	667a      	str	r2, [r7, #100]	; 0x64
 8005a02:	f04f 0200 	mov.w	r2, #0
 8005a06:	f04f 0300 	mov.w	r3, #0
 8005a0a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005a0e:	4649      	mov	r1, r9
 8005a10:	008b      	lsls	r3, r1, #2
 8005a12:	4641      	mov	r1, r8
 8005a14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a18:	4641      	mov	r1, r8
 8005a1a:	008a      	lsls	r2, r1, #2
 8005a1c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005a20:	f7fa fbf0 	bl	8000204 <__aeabi_uldivmod>
 8005a24:	4602      	mov	r2, r0
 8005a26:	460b      	mov	r3, r1
 8005a28:	4b0d      	ldr	r3, [pc, #52]	; (8005a60 <UART_SetConfig+0x4e4>)
 8005a2a:	fba3 1302 	umull	r1, r3, r3, r2
 8005a2e:	095b      	lsrs	r3, r3, #5
 8005a30:	2164      	movs	r1, #100	; 0x64
 8005a32:	fb01 f303 	mul.w	r3, r1, r3
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	011b      	lsls	r3, r3, #4
 8005a3a:	3332      	adds	r3, #50	; 0x32
 8005a3c:	4a08      	ldr	r2, [pc, #32]	; (8005a60 <UART_SetConfig+0x4e4>)
 8005a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a42:	095b      	lsrs	r3, r3, #5
 8005a44:	f003 020f 	and.w	r2, r3, #15
 8005a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4422      	add	r2, r4
 8005a50:	609a      	str	r2, [r3, #8]
}
 8005a52:	bf00      	nop
 8005a54:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a5e:	bf00      	nop
 8005a60:	51eb851f 	.word	0x51eb851f

08005a64 <__libc_init_array>:
 8005a64:	b570      	push	{r4, r5, r6, lr}
 8005a66:	4d0d      	ldr	r5, [pc, #52]	; (8005a9c <__libc_init_array+0x38>)
 8005a68:	4c0d      	ldr	r4, [pc, #52]	; (8005aa0 <__libc_init_array+0x3c>)
 8005a6a:	1b64      	subs	r4, r4, r5
 8005a6c:	10a4      	asrs	r4, r4, #2
 8005a6e:	2600      	movs	r6, #0
 8005a70:	42a6      	cmp	r6, r4
 8005a72:	d109      	bne.n	8005a88 <__libc_init_array+0x24>
 8005a74:	4d0b      	ldr	r5, [pc, #44]	; (8005aa4 <__libc_init_array+0x40>)
 8005a76:	4c0c      	ldr	r4, [pc, #48]	; (8005aa8 <__libc_init_array+0x44>)
 8005a78:	f000 f820 	bl	8005abc <_init>
 8005a7c:	1b64      	subs	r4, r4, r5
 8005a7e:	10a4      	asrs	r4, r4, #2
 8005a80:	2600      	movs	r6, #0
 8005a82:	42a6      	cmp	r6, r4
 8005a84:	d105      	bne.n	8005a92 <__libc_init_array+0x2e>
 8005a86:	bd70      	pop	{r4, r5, r6, pc}
 8005a88:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a8c:	4798      	blx	r3
 8005a8e:	3601      	adds	r6, #1
 8005a90:	e7ee      	b.n	8005a70 <__libc_init_array+0xc>
 8005a92:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a96:	4798      	blx	r3
 8005a98:	3601      	adds	r6, #1
 8005a9a:	e7f2      	b.n	8005a82 <__libc_init_array+0x1e>
 8005a9c:	08005afc 	.word	0x08005afc
 8005aa0:	08005afc 	.word	0x08005afc
 8005aa4:	08005afc 	.word	0x08005afc
 8005aa8:	08005b00 	.word	0x08005b00

08005aac <memset>:
 8005aac:	4402      	add	r2, r0
 8005aae:	4603      	mov	r3, r0
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d100      	bne.n	8005ab6 <memset+0xa>
 8005ab4:	4770      	bx	lr
 8005ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8005aba:	e7f9      	b.n	8005ab0 <memset+0x4>

08005abc <_init>:
 8005abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005abe:	bf00      	nop
 8005ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ac2:	bc08      	pop	{r3}
 8005ac4:	469e      	mov	lr, r3
 8005ac6:	4770      	bx	lr

08005ac8 <_fini>:
 8005ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aca:	bf00      	nop
 8005acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ace:	bc08      	pop	{r3}
 8005ad0:	469e      	mov	lr, r3
 8005ad2:	4770      	bx	lr
