
ADC_CURRENT_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006498  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000820  08006660  08006660  00016660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e80  08006e80  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006e80  08006e80  00016e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e88  08006e88  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e88  08006e88  00016e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e8c  08006e8c  00016e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006e90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000424  20000010  08006ea0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  08006ea0  00020434  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff4d  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002028  00000000  00000000  0002ff8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  00031fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d60  00000000  00000000  00032dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000233c1  00000000  00000000  00033b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c56  00000000  00000000  00056ef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dddfb  00000000  00000000  00067b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00145942  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d44  00000000  00000000  00145994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000010 	.word	0x20000010
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006648 	.word	0x08006648

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000014 	.word	0x20000014
 8000204:	08006648 	.word	0x08006648

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2iz>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009ac:	d215      	bcs.n	80009da <__aeabi_d2iz+0x36>
 80009ae:	d511      	bpl.n	80009d4 <__aeabi_d2iz+0x30>
 80009b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d912      	bls.n	80009e0 <__aeabi_d2iz+0x3c>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ca:	fa23 f002 	lsr.w	r0, r3, r2
 80009ce:	bf18      	it	ne
 80009d0:	4240      	negne	r0, r0
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009de:	d105      	bne.n	80009ec <__aeabi_d2iz+0x48>
 80009e0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	bf08      	it	eq
 80009e6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b974 	b.w	8000d94 <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9d08      	ldr	r5, [sp, #32]
 8000aca:	4604      	mov	r4, r0
 8000acc:	468e      	mov	lr, r1
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d14d      	bne.n	8000b6e <__udivmoddi4+0xaa>
 8000ad2:	428a      	cmp	r2, r1
 8000ad4:	4694      	mov	ip, r2
 8000ad6:	d969      	bls.n	8000bac <__udivmoddi4+0xe8>
 8000ad8:	fab2 f282 	clz	r2, r2
 8000adc:	b152      	cbz	r2, 8000af4 <__udivmoddi4+0x30>
 8000ade:	fa01 f302 	lsl.w	r3, r1, r2
 8000ae2:	f1c2 0120 	rsb	r1, r2, #32
 8000ae6:	fa20 f101 	lsr.w	r1, r0, r1
 8000aea:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aee:	ea41 0e03 	orr.w	lr, r1, r3
 8000af2:	4094      	lsls	r4, r2
 8000af4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000af8:	0c21      	lsrs	r1, r4, #16
 8000afa:	fbbe f6f8 	udiv	r6, lr, r8
 8000afe:	fa1f f78c 	uxth.w	r7, ip
 8000b02:	fb08 e316 	mls	r3, r8, r6, lr
 8000b06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b0a:	fb06 f107 	mul.w	r1, r6, r7
 8000b0e:	4299      	cmp	r1, r3
 8000b10:	d90a      	bls.n	8000b28 <__udivmoddi4+0x64>
 8000b12:	eb1c 0303 	adds.w	r3, ip, r3
 8000b16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b1a:	f080 811f 	bcs.w	8000d5c <__udivmoddi4+0x298>
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	f240 811c 	bls.w	8000d5c <__udivmoddi4+0x298>
 8000b24:	3e02      	subs	r6, #2
 8000b26:	4463      	add	r3, ip
 8000b28:	1a5b      	subs	r3, r3, r1
 8000b2a:	b2a4      	uxth	r4, r4
 8000b2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b30:	fb08 3310 	mls	r3, r8, r0, r3
 8000b34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b38:	fb00 f707 	mul.w	r7, r0, r7
 8000b3c:	42a7      	cmp	r7, r4
 8000b3e:	d90a      	bls.n	8000b56 <__udivmoddi4+0x92>
 8000b40:	eb1c 0404 	adds.w	r4, ip, r4
 8000b44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b48:	f080 810a 	bcs.w	8000d60 <__udivmoddi4+0x29c>
 8000b4c:	42a7      	cmp	r7, r4
 8000b4e:	f240 8107 	bls.w	8000d60 <__udivmoddi4+0x29c>
 8000b52:	4464      	add	r4, ip
 8000b54:	3802      	subs	r0, #2
 8000b56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b5a:	1be4      	subs	r4, r4, r7
 8000b5c:	2600      	movs	r6, #0
 8000b5e:	b11d      	cbz	r5, 8000b68 <__udivmoddi4+0xa4>
 8000b60:	40d4      	lsrs	r4, r2
 8000b62:	2300      	movs	r3, #0
 8000b64:	e9c5 4300 	strd	r4, r3, [r5]
 8000b68:	4631      	mov	r1, r6
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	428b      	cmp	r3, r1
 8000b70:	d909      	bls.n	8000b86 <__udivmoddi4+0xc2>
 8000b72:	2d00      	cmp	r5, #0
 8000b74:	f000 80ef 	beq.w	8000d56 <__udivmoddi4+0x292>
 8000b78:	2600      	movs	r6, #0
 8000b7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b7e:	4630      	mov	r0, r6
 8000b80:	4631      	mov	r1, r6
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	fab3 f683 	clz	r6, r3
 8000b8a:	2e00      	cmp	r6, #0
 8000b8c:	d14a      	bne.n	8000c24 <__udivmoddi4+0x160>
 8000b8e:	428b      	cmp	r3, r1
 8000b90:	d302      	bcc.n	8000b98 <__udivmoddi4+0xd4>
 8000b92:	4282      	cmp	r2, r0
 8000b94:	f200 80f9 	bhi.w	8000d8a <__udivmoddi4+0x2c6>
 8000b98:	1a84      	subs	r4, r0, r2
 8000b9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	469e      	mov	lr, r3
 8000ba2:	2d00      	cmp	r5, #0
 8000ba4:	d0e0      	beq.n	8000b68 <__udivmoddi4+0xa4>
 8000ba6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000baa:	e7dd      	b.n	8000b68 <__udivmoddi4+0xa4>
 8000bac:	b902      	cbnz	r2, 8000bb0 <__udivmoddi4+0xec>
 8000bae:	deff      	udf	#255	; 0xff
 8000bb0:	fab2 f282 	clz	r2, r2
 8000bb4:	2a00      	cmp	r2, #0
 8000bb6:	f040 8092 	bne.w	8000cde <__udivmoddi4+0x21a>
 8000bba:	eba1 010c 	sub.w	r1, r1, ip
 8000bbe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bc2:	fa1f fe8c 	uxth.w	lr, ip
 8000bc6:	2601      	movs	r6, #1
 8000bc8:	0c20      	lsrs	r0, r4, #16
 8000bca:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bce:	fb07 1113 	mls	r1, r7, r3, r1
 8000bd2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd6:	fb0e f003 	mul.w	r0, lr, r3
 8000bda:	4288      	cmp	r0, r1
 8000bdc:	d908      	bls.n	8000bf0 <__udivmoddi4+0x12c>
 8000bde:	eb1c 0101 	adds.w	r1, ip, r1
 8000be2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x12a>
 8000be8:	4288      	cmp	r0, r1
 8000bea:	f200 80cb 	bhi.w	8000d84 <__udivmoddi4+0x2c0>
 8000bee:	4643      	mov	r3, r8
 8000bf0:	1a09      	subs	r1, r1, r0
 8000bf2:	b2a4      	uxth	r4, r4
 8000bf4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bfc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c00:	fb0e fe00 	mul.w	lr, lr, r0
 8000c04:	45a6      	cmp	lr, r4
 8000c06:	d908      	bls.n	8000c1a <__udivmoddi4+0x156>
 8000c08:	eb1c 0404 	adds.w	r4, ip, r4
 8000c0c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c10:	d202      	bcs.n	8000c18 <__udivmoddi4+0x154>
 8000c12:	45a6      	cmp	lr, r4
 8000c14:	f200 80bb 	bhi.w	8000d8e <__udivmoddi4+0x2ca>
 8000c18:	4608      	mov	r0, r1
 8000c1a:	eba4 040e 	sub.w	r4, r4, lr
 8000c1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c22:	e79c      	b.n	8000b5e <__udivmoddi4+0x9a>
 8000c24:	f1c6 0720 	rsb	r7, r6, #32
 8000c28:	40b3      	lsls	r3, r6
 8000c2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c32:	fa20 f407 	lsr.w	r4, r0, r7
 8000c36:	fa01 f306 	lsl.w	r3, r1, r6
 8000c3a:	431c      	orrs	r4, r3
 8000c3c:	40f9      	lsrs	r1, r7
 8000c3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c42:	fa00 f306 	lsl.w	r3, r0, r6
 8000c46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c4a:	0c20      	lsrs	r0, r4, #16
 8000c4c:	fa1f fe8c 	uxth.w	lr, ip
 8000c50:	fb09 1118 	mls	r1, r9, r8, r1
 8000c54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c58:	fb08 f00e 	mul.w	r0, r8, lr
 8000c5c:	4288      	cmp	r0, r1
 8000c5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c62:	d90b      	bls.n	8000c7c <__udivmoddi4+0x1b8>
 8000c64:	eb1c 0101 	adds.w	r1, ip, r1
 8000c68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c6c:	f080 8088 	bcs.w	8000d80 <__udivmoddi4+0x2bc>
 8000c70:	4288      	cmp	r0, r1
 8000c72:	f240 8085 	bls.w	8000d80 <__udivmoddi4+0x2bc>
 8000c76:	f1a8 0802 	sub.w	r8, r8, #2
 8000c7a:	4461      	add	r1, ip
 8000c7c:	1a09      	subs	r1, r1, r0
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c84:	fb09 1110 	mls	r1, r9, r0, r1
 8000c88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c90:	458e      	cmp	lr, r1
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x1e2>
 8000c94:	eb1c 0101 	adds.w	r1, ip, r1
 8000c98:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c9c:	d26c      	bcs.n	8000d78 <__udivmoddi4+0x2b4>
 8000c9e:	458e      	cmp	lr, r1
 8000ca0:	d96a      	bls.n	8000d78 <__udivmoddi4+0x2b4>
 8000ca2:	3802      	subs	r0, #2
 8000ca4:	4461      	add	r1, ip
 8000ca6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000caa:	fba0 9402 	umull	r9, r4, r0, r2
 8000cae:	eba1 010e 	sub.w	r1, r1, lr
 8000cb2:	42a1      	cmp	r1, r4
 8000cb4:	46c8      	mov	r8, r9
 8000cb6:	46a6      	mov	lr, r4
 8000cb8:	d356      	bcc.n	8000d68 <__udivmoddi4+0x2a4>
 8000cba:	d053      	beq.n	8000d64 <__udivmoddi4+0x2a0>
 8000cbc:	b15d      	cbz	r5, 8000cd6 <__udivmoddi4+0x212>
 8000cbe:	ebb3 0208 	subs.w	r2, r3, r8
 8000cc2:	eb61 010e 	sbc.w	r1, r1, lr
 8000cc6:	fa01 f707 	lsl.w	r7, r1, r7
 8000cca:	fa22 f306 	lsr.w	r3, r2, r6
 8000cce:	40f1      	lsrs	r1, r6
 8000cd0:	431f      	orrs	r7, r3
 8000cd2:	e9c5 7100 	strd	r7, r1, [r5]
 8000cd6:	2600      	movs	r6, #0
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	f1c2 0320 	rsb	r3, r2, #32
 8000ce2:	40d8      	lsrs	r0, r3
 8000ce4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce8:	fa21 f303 	lsr.w	r3, r1, r3
 8000cec:	4091      	lsls	r1, r2
 8000cee:	4301      	orrs	r1, r0
 8000cf0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf4:	fa1f fe8c 	uxth.w	lr, ip
 8000cf8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cfc:	fb07 3610 	mls	r6, r7, r0, r3
 8000d00:	0c0b      	lsrs	r3, r1, #16
 8000d02:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d06:	fb00 f60e 	mul.w	r6, r0, lr
 8000d0a:	429e      	cmp	r6, r3
 8000d0c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x260>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d1a:	d22f      	bcs.n	8000d7c <__udivmoddi4+0x2b8>
 8000d1c:	429e      	cmp	r6, r3
 8000d1e:	d92d      	bls.n	8000d7c <__udivmoddi4+0x2b8>
 8000d20:	3802      	subs	r0, #2
 8000d22:	4463      	add	r3, ip
 8000d24:	1b9b      	subs	r3, r3, r6
 8000d26:	b289      	uxth	r1, r1
 8000d28:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d2c:	fb07 3316 	mls	r3, r7, r6, r3
 8000d30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d34:	fb06 f30e 	mul.w	r3, r6, lr
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x28a>
 8000d3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d40:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d44:	d216      	bcs.n	8000d74 <__udivmoddi4+0x2b0>
 8000d46:	428b      	cmp	r3, r1
 8000d48:	d914      	bls.n	8000d74 <__udivmoddi4+0x2b0>
 8000d4a:	3e02      	subs	r6, #2
 8000d4c:	4461      	add	r1, ip
 8000d4e:	1ac9      	subs	r1, r1, r3
 8000d50:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d54:	e738      	b.n	8000bc8 <__udivmoddi4+0x104>
 8000d56:	462e      	mov	r6, r5
 8000d58:	4628      	mov	r0, r5
 8000d5a:	e705      	b.n	8000b68 <__udivmoddi4+0xa4>
 8000d5c:	4606      	mov	r6, r0
 8000d5e:	e6e3      	b.n	8000b28 <__udivmoddi4+0x64>
 8000d60:	4618      	mov	r0, r3
 8000d62:	e6f8      	b.n	8000b56 <__udivmoddi4+0x92>
 8000d64:	454b      	cmp	r3, r9
 8000d66:	d2a9      	bcs.n	8000cbc <__udivmoddi4+0x1f8>
 8000d68:	ebb9 0802 	subs.w	r8, r9, r2
 8000d6c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d70:	3801      	subs	r0, #1
 8000d72:	e7a3      	b.n	8000cbc <__udivmoddi4+0x1f8>
 8000d74:	4646      	mov	r6, r8
 8000d76:	e7ea      	b.n	8000d4e <__udivmoddi4+0x28a>
 8000d78:	4620      	mov	r0, r4
 8000d7a:	e794      	b.n	8000ca6 <__udivmoddi4+0x1e2>
 8000d7c:	4640      	mov	r0, r8
 8000d7e:	e7d1      	b.n	8000d24 <__udivmoddi4+0x260>
 8000d80:	46d0      	mov	r8, sl
 8000d82:	e77b      	b.n	8000c7c <__udivmoddi4+0x1b8>
 8000d84:	3b02      	subs	r3, #2
 8000d86:	4461      	add	r1, ip
 8000d88:	e732      	b.n	8000bf0 <__udivmoddi4+0x12c>
 8000d8a:	4630      	mov	r0, r6
 8000d8c:	e709      	b.n	8000ba2 <__udivmoddi4+0xde>
 8000d8e:	4464      	add	r4, ip
 8000d90:	3802      	subs	r0, #2
 8000d92:	e742      	b.n	8000c1a <__udivmoddi4+0x156>

08000d94 <__aeabi_idiv0>:
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop

08000d98 <FastSin>:
const float Multiplier = 81.4873308631f;
const float sint[] = {
    0,0.012296,0.024589,0.036879,0.049164,0.061441,0.073708,0.085965,0.098208,0.11044,0.12265,0.13484,0.14702,0.15917,0.17129,0.18339,0.19547,0.20751,0.21952,0.2315,0.24345,0.25535,0.26722,0.27905,0.29084,0.30258,0.31427,0.32592,0.33752,0.34907,0.36057,0.37201,0.38339,0.39472,0.40599,0.41719,0.42834,0.43941,0.45043,0.46137,0.47224,0.48305,0.49378,0.50443,0.51501,0.52551,0.53593,0.54627,0.55653,0.5667,0.57679,0.58679,0.5967,0.60652,0.61625,0.62589,0.63543,0.64488,0.65423,0.66348,0.67263,0.68167,0.69062,0.69946,0.70819,0.71682,0.72534,0.73375,0.74205,0.75023,0.75831,0.76626,0.77411,0.78183,0.78944,0.79693,0.80429,0.81154,0.81866,0.82566,0.83254,0.83928,0.84591,0.8524,0.85876,0.865,0.8711,0.87708,0.88292,0.88862,0.89419,0.89963,0.90493,0.9101,0.91512,0.92001,0.92476,0.92937,0.93384,0.93816,0.94235,0.94639,0.95029,0.95405,0.95766,0.96113,0.96445,0.96763,0.97066,0.97354,0.97628,0.97887,0.98131,0.9836,0.98574,0.98774,0.98958,0.99128,0.99282,0.99422,0.99546,0.99656,0.9975,0.99829,0.99894,0.99943,0.99977,0.99996,1,0.99988,0.99962,0.9992,0.99863,0.99792,0.99705,0.99603,0.99486,0.99354,0.99207,0.99045,0.98868,0.98676,0.98469,0.98247,0.9801,0.97759,0.97493,0.97212,0.96916,0.96606,0.96281,0.95941,0.95587,0.95219,0.94836,0.94439,0.94028,0.93602,0.93162,0.92708,0.9224,0.91758,0.91263,0.90753,0.9023,0.89693,0.89142,0.88579,0.88001,0.87411,0.86807,0.8619,0.8556,0.84917,0.84261,0.83593,0.82911,0.82218,0.81512,0.80793,0.80062,0.7932,0.78565,0.77798,0.7702,0.7623,0.75428,0.74615,0.73791,0.72956,0.72109,0.71252,0.70384,0.69505,0.68616,0.67716,0.66806,0.65886,0.64956,0.64017,0.63067,0.62108,0.6114,0.60162,0.59176,0.5818,0.57176,0.56163,0.55141,0.54111,0.53073,0.52027,0.50973,0.49911,0.48842,0.47765,0.46682,0.45591,0.44493,0.43388,0.42277,0.4116,0.40036,0.38906,0.37771,0.36629,0.35483,0.3433,0.33173,0.32011,0.30843,0.29671,0.28495,0.27314,0.26129,0.2494,0.23748,0.22552,0.21352,0.20149,0.18943,0.17735,0.16523,0.15309,0.14093,0.12875,0.11655,0.10432,0.092088,0.079838,0.067576,0.055303,0.043022,0.030735,0.018443,0.0061479,-0.0061479,-0.018443,-0.030735,-0.043022,-0.055303,-0.067576,-0.079838,-0.092088,-0.10432,-0.11655,-0.12875,-0.14093,-0.15309,-0.16523,-0.17735,-0.18943,-0.20149,-0.21352,-0.22552,-0.23748,-0.2494,-0.26129,-0.27314,-0.28495,-0.29671,-0.30843,-0.32011,-0.33173,-0.3433,-0.35483,-0.36629,-0.37771,-0.38906,-0.40036,-0.4116,-0.42277,-0.43388,-0.44493,-0.45591,-0.46682,-0.47765,-0.48842,-0.49911,-0.50973,-0.52027,-0.53073,-0.54111,-0.55141,-0.56163,-0.57176,-0.5818,-0.59176,-0.60162,-0.6114,-0.62108,-0.63067,-0.64017,-0.64956,-0.65886,-0.66806,-0.67716,-0.68616,-0.69505,-0.70384,-0.71252,-0.72109,-0.72956,-0.73791,-0.74615,-0.75428,-0.7623,-0.7702,-0.77798,-0.78565,-0.7932,-0.80062,-0.80793,-0.81512,-0.82218,-0.82911,-0.83593,-0.84261,-0.84917,-0.8556,-0.8619,-0.86807,-0.87411,-0.88001,-0.88579,-0.89142,-0.89693,-0.9023,-0.90753,-0.91263,-0.91758,-0.9224,-0.92708,-0.93162,-0.93602,-0.94028,-0.94439,-0.94836,-0.95219,-0.95587,-0.95941,-0.96281,-0.96606,-0.96916,-0.97212,-0.97493,-0.97759,-0.9801,-0.98247,-0.98469,-0.98676,-0.98868,-0.99045,-0.99207,-0.99354,-0.99486,-0.99603,-0.99705,-0.99792,-0.99863,-0.9992,-0.99962,-0.99988,-1,-0.99996,-0.99977,-0.99943,-0.99894,-0.99829,-0.9975,-0.99656,-0.99546,-0.99422,-0.99282,-0.99128,-0.98958,-0.98774,-0.98574,-0.9836,-0.98131,-0.97887,-0.97628,-0.97354,-0.97066,-0.96763,-0.96445,-0.96113,-0.95766,-0.95405,-0.95029,-0.94639,-0.94235,-0.93816,-0.93384,-0.92937,-0.92476,-0.92001,-0.91512,-0.9101,-0.90493,-0.89963,-0.89419,-0.88862,-0.88292,-0.87708,-0.8711,-0.865,-0.85876,-0.8524,-0.84591,-0.83928,-0.83254,-0.82566,-0.81866,-0.81154,-0.80429,-0.79693,-0.78944,-0.78183,-0.77411,-0.76626,-0.75831,-0.75023,-0.74205,-0.73375,-0.72534,-0.71682,-0.70819,-0.69946,-0.69062,-0.68167,-0.67263,-0.66348,-0.65423,-0.64488,-0.63543,-0.62589,-0.61625,-0.60652,-0.5967,-0.58679,-0.57679,-0.5667,-0.55653,-0.54627,-0.53593,-0.52551,-0.51501,-0.50443,-0.49378,-0.48305,-0.47224,-0.46137,-0.45043,-0.43941,-0.42834,-0.41719,-0.40599,-0.39472,-0.38339,-0.37201,-0.36057,-0.34907,-0.33752,-0.32592,-0.31427,-0.30258,-0.29084,-0.27905,-0.26722,-0.25535,-0.24345,-0.2315,-0.21952,-0.20751,-0.19547,-0.18339,-0.17129,-0.15917,-0.14702,-0.13484,-0.12265,-0.11044,-0.098208,-0.085965,-0.073708,-0.061441,-0.049164,-0.036879,-0.024589,-0.012296,0
};

float FastSin(float theta){
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	ed87 0a01 	vstr	s0, [r7, #4]
    while (theta < 0.0f) theta += 6.28318530718f;
 8000da2:	e007      	b.n	8000db4 <FastSin+0x1c>
 8000da4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000da8:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000e14 <FastSin+0x7c>
 8000dac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000db0:	edc7 7a01 	vstr	s15, [r7, #4]
 8000db4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000db8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc0:	d4f0      	bmi.n	8000da4 <FastSin+0xc>
    while (theta >= 6.28318530718f) theta -= 6.28318530718f;
 8000dc2:	e007      	b.n	8000dd4 <FastSin+0x3c>
 8000dc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dc8:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000e14 <FastSin+0x7c>
 8000dcc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000dd0:	edc7 7a01 	vstr	s15, [r7, #4]
 8000dd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dd8:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000e14 <FastSin+0x7c>
 8000ddc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000de4:	daee      	bge.n	8000dc4 <FastSin+0x2c>
    return sint[(int) (Multiplier*theta)] ;
 8000de6:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000e18 <FastSin+0x80>
 8000dea:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000df2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000df6:	ee17 3a90 	vmov	r3, s15
 8000dfa:	4a08      	ldr	r2, [pc, #32]	; (8000e1c <FastSin+0x84>)
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	4413      	add	r3, r2
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	ee07 3a90 	vmov	s15, r3
    }
 8000e06:	eeb0 0a67 	vmov.f32	s0, s15
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	40c90fdb 	.word	0x40c90fdb
 8000e18:	42a2f983 	.word	0x42a2f983
 8000e1c:	08006660 	.word	0x08006660

08000e20 <HAL_ADC_ConvCpltCallback>:
    return FastSin(1.57079632679f - theta);
    }


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1) //This should be the main loop
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]

	///current_define
	if(phase_uni ==1)
 8000e28:	4b77      	ldr	r3, [pc, #476]	; (8001008 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d118      	bne.n	8000e62 <HAL_ADC_ConvCpltCallback+0x42>
	{
		b_current_2 = (int32_t)dma_buffer_2[0]-2048;
 8000e30:	4b76      	ldr	r3, [pc, #472]	; (800100c <HAL_ADC_ConvCpltCallback+0x1ec>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000e38:	4a75      	ldr	r2, [pc, #468]	; (8001010 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8000e3a:	6013      	str	r3, [r2, #0]
		c_current_2 = (int32_t)dma_buffer_3[0]-2048;
 8000e3c:	4b75      	ldr	r3, [pc, #468]	; (8001014 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000e44:	4a74      	ldr	r2, [pc, #464]	; (8001018 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8000e46:	6013      	str	r3, [r2, #0]
		a_current_2 = (-b_current_2)+(-c_current_2);
 8000e48:	4b71      	ldr	r3, [pc, #452]	; (8001010 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	425a      	negs	r2, r3
 8000e4e:	4b72      	ldr	r3, [pc, #456]	; (8001018 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	4a71      	ldr	r2, [pc, #452]	; (800101c <HAL_ADC_ConvCpltCallback+0x1fc>)
 8000e56:	6013      	str	r3, [r2, #0]
		angle = (float)0*((float)M_PI/(float)180);
 8000e58:	4b71      	ldr	r3, [pc, #452]	; (8001020 <HAL_ADC_ConvCpltCallback+0x200>)
 8000e5a:	f04f 0200 	mov.w	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	e096      	b.n	8000f90 <HAL_ADC_ConvCpltCallback+0x170>
	}
	else if(phase_uni == 2)
 8000e62:	4b69      	ldr	r3, [pc, #420]	; (8001008 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d11b      	bne.n	8000ea2 <HAL_ADC_ConvCpltCallback+0x82>
	{

		c_current_2 = (int32_t)dma_buffer_3[0]-2048;
 8000e6a:	4b6a      	ldr	r3, [pc, #424]	; (8001014 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000e72:	4a69      	ldr	r2, [pc, #420]	; (8001018 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8000e74:	6013      	str	r3, [r2, #0]
		a_current_2 = -(c_current_2/2);
 8000e76:	4b68      	ldr	r3, [pc, #416]	; (8001018 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	0fda      	lsrs	r2, r3, #31
 8000e7c:	4413      	add	r3, r2
 8000e7e:	105b      	asrs	r3, r3, #1
 8000e80:	425b      	negs	r3, r3
 8000e82:	461a      	mov	r2, r3
 8000e84:	4b65      	ldr	r3, [pc, #404]	; (800101c <HAL_ADC_ConvCpltCallback+0x1fc>)
 8000e86:	601a      	str	r2, [r3, #0]
		b_current_2 = -(c_current_2/2);
 8000e88:	4b63      	ldr	r3, [pc, #396]	; (8001018 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	0fda      	lsrs	r2, r3, #31
 8000e8e:	4413      	add	r3, r2
 8000e90:	105b      	asrs	r3, r3, #1
 8000e92:	425b      	negs	r3, r3
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b5e      	ldr	r3, [pc, #376]	; (8001010 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8000e98:	601a      	str	r2, [r3, #0]
		angle = (float)60*((float)M_PI/(float)180);
 8000e9a:	4b61      	ldr	r3, [pc, #388]	; (8001020 <HAL_ADC_ConvCpltCallback+0x200>)
 8000e9c:	4a61      	ldr	r2, [pc, #388]	; (8001024 <HAL_ADC_ConvCpltCallback+0x204>)
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	e076      	b.n	8000f90 <HAL_ADC_ConvCpltCallback+0x170>
	}
	else if(phase_uni == 3)
 8000ea2:	4b59      	ldr	r3, [pc, #356]	; (8001008 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2b03      	cmp	r3, #3
 8000ea8:	d117      	bne.n	8000eda <HAL_ADC_ConvCpltCallback+0xba>
	{
		a_current_2 = (int32_t)dma_buffer_1[0]-2048;
 8000eaa:	4b5f      	ldr	r3, [pc, #380]	; (8001028 <HAL_ADC_ConvCpltCallback+0x208>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000eb2:	4a5a      	ldr	r2, [pc, #360]	; (800101c <HAL_ADC_ConvCpltCallback+0x1fc>)
 8000eb4:	6013      	str	r3, [r2, #0]
		c_current_2 = (int32_t)dma_buffer_3[0]-2048;
 8000eb6:	4b57      	ldr	r3, [pc, #348]	; (8001014 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000ebe:	4a56      	ldr	r2, [pc, #344]	; (8001018 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8000ec0:	6013      	str	r3, [r2, #0]
		b_current_2 = (-a_current_2)+(-c_current_2);
 8000ec2:	4b56      	ldr	r3, [pc, #344]	; (800101c <HAL_ADC_ConvCpltCallback+0x1fc>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	425a      	negs	r2, r3
 8000ec8:	4b53      	ldr	r3, [pc, #332]	; (8001018 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	4a50      	ldr	r2, [pc, #320]	; (8001010 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8000ed0:	6013      	str	r3, [r2, #0]
		angle = (float)120*((float)M_PI/(float)180);
 8000ed2:	4b53      	ldr	r3, [pc, #332]	; (8001020 <HAL_ADC_ConvCpltCallback+0x200>)
 8000ed4:	4a55      	ldr	r2, [pc, #340]	; (800102c <HAL_ADC_ConvCpltCallback+0x20c>)
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	e05a      	b.n	8000f90 <HAL_ADC_ConvCpltCallback+0x170>
	}
	else if(phase_uni == 4)
 8000eda:	4b4b      	ldr	r3, [pc, #300]	; (8001008 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2b04      	cmp	r3, #4
 8000ee0:	d11b      	bne.n	8000f1a <HAL_ADC_ConvCpltCallback+0xfa>
	{
		a_current_2 = (int32_t)dma_buffer_1[0]-2048;
 8000ee2:	4b51      	ldr	r3, [pc, #324]	; (8001028 <HAL_ADC_ConvCpltCallback+0x208>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000eea:	4a4c      	ldr	r2, [pc, #304]	; (800101c <HAL_ADC_ConvCpltCallback+0x1fc>)
 8000eec:	6013      	str	r3, [r2, #0]
		b_current_2 = -(a_current_2/2);
 8000eee:	4b4b      	ldr	r3, [pc, #300]	; (800101c <HAL_ADC_ConvCpltCallback+0x1fc>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	0fda      	lsrs	r2, r3, #31
 8000ef4:	4413      	add	r3, r2
 8000ef6:	105b      	asrs	r3, r3, #1
 8000ef8:	425b      	negs	r3, r3
 8000efa:	461a      	mov	r2, r3
 8000efc:	4b44      	ldr	r3, [pc, #272]	; (8001010 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8000efe:	601a      	str	r2, [r3, #0]
		c_current_2 = -(a_current_2/2);
 8000f00:	4b46      	ldr	r3, [pc, #280]	; (800101c <HAL_ADC_ConvCpltCallback+0x1fc>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	0fda      	lsrs	r2, r3, #31
 8000f06:	4413      	add	r3, r2
 8000f08:	105b      	asrs	r3, r3, #1
 8000f0a:	425b      	negs	r3, r3
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b42      	ldr	r3, [pc, #264]	; (8001018 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8000f10:	601a      	str	r2, [r3, #0]
		angle = (float)180*((float)M_PI/(float)180);
 8000f12:	4b43      	ldr	r3, [pc, #268]	; (8001020 <HAL_ADC_ConvCpltCallback+0x200>)
 8000f14:	4a46      	ldr	r2, [pc, #280]	; (8001030 <HAL_ADC_ConvCpltCallback+0x210>)
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	e03a      	b.n	8000f90 <HAL_ADC_ConvCpltCallback+0x170>
	}
	else if(phase_uni == 5)
 8000f1a:	4b3b      	ldr	r3, [pc, #236]	; (8001008 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2b05      	cmp	r3, #5
 8000f20:	d117      	bne.n	8000f52 <HAL_ADC_ConvCpltCallback+0x132>
	{
		a_current_2 = (int32_t)dma_buffer_1[0]-2048;
 8000f22:	4b41      	ldr	r3, [pc, #260]	; (8001028 <HAL_ADC_ConvCpltCallback+0x208>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000f2a:	4a3c      	ldr	r2, [pc, #240]	; (800101c <HAL_ADC_ConvCpltCallback+0x1fc>)
 8000f2c:	6013      	str	r3, [r2, #0]
		b_current_2 = (int32_t)dma_buffer_2[0]-2048;
 8000f2e:	4b37      	ldr	r3, [pc, #220]	; (800100c <HAL_ADC_ConvCpltCallback+0x1ec>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000f36:	4a36      	ldr	r2, [pc, #216]	; (8001010 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8000f38:	6013      	str	r3, [r2, #0]
		c_current_2 = (-a_current_2)+(-b_current_2);
 8000f3a:	4b38      	ldr	r3, [pc, #224]	; (800101c <HAL_ADC_ConvCpltCallback+0x1fc>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	425a      	negs	r2, r3
 8000f40:	4b33      	ldr	r3, [pc, #204]	; (8001010 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	4a34      	ldr	r2, [pc, #208]	; (8001018 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8000f48:	6013      	str	r3, [r2, #0]
		angle = (float)240*((float)M_PI/(float)180);
 8000f4a:	4b35      	ldr	r3, [pc, #212]	; (8001020 <HAL_ADC_ConvCpltCallback+0x200>)
 8000f4c:	4a39      	ldr	r2, [pc, #228]	; (8001034 <HAL_ADC_ConvCpltCallback+0x214>)
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	e01e      	b.n	8000f90 <HAL_ADC_ConvCpltCallback+0x170>
	}
	else if(phase_uni == 6)
 8000f52:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2b06      	cmp	r3, #6
 8000f58:	d11a      	bne.n	8000f90 <HAL_ADC_ConvCpltCallback+0x170>
	{
		b_current_2 = (int32_t)dma_buffer_2[0]-2048;
 8000f5a:	4b2c      	ldr	r3, [pc, #176]	; (800100c <HAL_ADC_ConvCpltCallback+0x1ec>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000f62:	4a2b      	ldr	r2, [pc, #172]	; (8001010 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8000f64:	6013      	str	r3, [r2, #0]
		a_current_2 = -(b_current_2/2);
 8000f66:	4b2a      	ldr	r3, [pc, #168]	; (8001010 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	0fda      	lsrs	r2, r3, #31
 8000f6c:	4413      	add	r3, r2
 8000f6e:	105b      	asrs	r3, r3, #1
 8000f70:	425b      	negs	r3, r3
 8000f72:	461a      	mov	r2, r3
 8000f74:	4b29      	ldr	r3, [pc, #164]	; (800101c <HAL_ADC_ConvCpltCallback+0x1fc>)
 8000f76:	601a      	str	r2, [r3, #0]
		c_current_2 = -(b_current_2/2);
 8000f78:	4b25      	ldr	r3, [pc, #148]	; (8001010 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	0fda      	lsrs	r2, r3, #31
 8000f7e:	4413      	add	r3, r2
 8000f80:	105b      	asrs	r3, r3, #1
 8000f82:	425b      	negs	r3, r3
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b24      	ldr	r3, [pc, #144]	; (8001018 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8000f88:	601a      	str	r2, [r3, #0]
		angle = (float)300*((float)M_PI/(float)180);
 8000f8a:	4b25      	ldr	r3, [pc, #148]	; (8001020 <HAL_ADC_ConvCpltCallback+0x200>)
 8000f8c:	4a2a      	ldr	r2, [pc, #168]	; (8001038 <HAL_ADC_ConvCpltCallback+0x218>)
 8000f8e:	601a      	str	r2, [r3, #0]
	}

	alpha_current = (float)(0.666666)*(float)a_current_2-(float)(0.333333)*((float)b_current_2+(float)c_current_2);
 8000f90:	4b22      	ldr	r3, [pc, #136]	; (800101c <HAL_ADC_ConvCpltCallback+0x1fc>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	ee07 3a90 	vmov	s15, r3
 8000f98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f9c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800103c <HAL_ADC_ConvCpltCallback+0x21c>
 8000fa0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fa4:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	ee07 3a90 	vmov	s15, r3
 8000fac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000fb0:	4b19      	ldr	r3, [pc, #100]	; (8001018 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	ee07 3a90 	vmov	s15, r3
 8000fb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000fc0:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001040 <HAL_ADC_ConvCpltCallback+0x220>
 8000fc4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000fc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fcc:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <HAL_ADC_ConvCpltCallback+0x224>)
 8000fce:	edc3 7a00 	vstr	s15, [r3]
	beta_current = (float)(0.57735026)*((float)b_current_2-(float)c_current_2);
 8000fd2:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	ee07 3a90 	vmov	s15, r3
 8000fda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	ee07 3a90 	vmov	s15, r3
 8000fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fee:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001048 <HAL_ADC_ConvCpltCallback+0x228>
 8000ff2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <HAL_ADC_ConvCpltCallback+0x22c>)
 8000ff8:	edc3 7a00 	vstr	s15, [r3]

	//d_current = FastCos((float)angle)*(float)alpha_current+FastSin((float)angle)*(float)beta_current;
	//q_current = -FastSin(angle)*(float)alpha_current+FastCos(angle)*(float)beta_current;


}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	200003f0 	.word	0x200003f0
 800100c:	200003d8 	.word	0x200003d8
 8001010:	2000041c 	.word	0x2000041c
 8001014:	200003e0 	.word	0x200003e0
 8001018:	20000420 	.word	0x20000420
 800101c:	20000418 	.word	0x20000418
 8001020:	20000408 	.word	0x20000408
 8001024:	3f860a92 	.word	0x3f860a92
 8001028:	200003d0 	.word	0x200003d0
 800102c:	40060a92 	.word	0x40060a92
 8001030:	40490fdb 	.word	0x40490fdb
 8001034:	40860a92 	.word	0x40860a92
 8001038:	40a78d36 	.word	0x40a78d36
 800103c:	3f2aaa9f 	.word	0x3f2aaa9f
 8001040:	3eaaaa9f 	.word	0x3eaaaa9f
 8001044:	20000424 	.word	0x20000424
 8001048:	3f13cd3a 	.word	0x3f13cd3a
 800104c:	20000428 	.word	0x20000428

08001050 <update_encoder>:

void update_encoder()
{
 8001050:	b580      	push	{r7, lr}
 8001052:	ed2d 8b02 	vpush	{d8}
 8001056:	af00      	add	r7, sp, #0
	encoder = (TIM2->CNT>>2);
 8001058:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800105c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105e:	089b      	lsrs	r3, r3, #2
 8001060:	461a      	mov	r2, r3
 8001062:	4b57      	ldr	r3, [pc, #348]	; (80011c0 <update_encoder+0x170>)
 8001064:	601a      	str	r2, [r3, #0]
	if(encoder > 2048)
 8001066:	4b56      	ldr	r3, [pc, #344]	; (80011c0 <update_encoder+0x170>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800106e:	dd0a      	ble.n	8001086 <update_encoder+0x36>
	{
		encoder = (encoder)%2048;
 8001070:	4b53      	ldr	r3, [pc, #332]	; (80011c0 <update_encoder+0x170>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	425a      	negs	r2, r3
 8001076:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800107a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800107e:	bf58      	it	pl
 8001080:	4253      	negpl	r3, r2
 8001082:	4a4f      	ldr	r2, [pc, #316]	; (80011c0 <update_encoder+0x170>)
 8001084:	6013      	str	r3, [r2, #0]
	}

	mech_angle = encoder*(2*pi/cpr);
 8001086:	4b4e      	ldr	r3, [pc, #312]	; (80011c0 <update_encoder+0x170>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	ee07 3a90 	vmov	s15, r3
 800108e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001092:	eddf 7a4c 	vldr	s15, [pc, #304]	; 80011c4 <update_encoder+0x174>
 8001096:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800109a:	eddf 7a4b 	vldr	s15, [pc, #300]	; 80011c8 <update_encoder+0x178>
 800109e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80010a2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80010a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010aa:	4b48      	ldr	r3, [pc, #288]	; (80011cc <update_encoder+0x17c>)
 80010ac:	edc3 7a00 	vstr	s15, [r3]
	multiply = (int)(((mech_angle*(float)pole_pair)/(2*M_PI)));
 80010b0:	eddf 7a47 	vldr	s15, [pc, #284]	; 80011d0 <update_encoder+0x180>
 80010b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010b8:	4b44      	ldr	r3, [pc, #272]	; (80011cc <update_encoder+0x17c>)
 80010ba:	edd3 7a00 	vldr	s15, [r3]
 80010be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c2:	ee17 0a90 	vmov	r0, s15
 80010c6:	f7ff fa03 	bl	80004d0 <__aeabi_f2d>
 80010ca:	a33b      	add	r3, pc, #236	; (adr r3, 80011b8 <update_encoder+0x168>)
 80010cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d0:	f7ff fb80 	bl	80007d4 <__aeabi_ddiv>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4610      	mov	r0, r2
 80010da:	4619      	mov	r1, r3
 80010dc:	f7ff fc62 	bl	80009a4 <__aeabi_d2iz>
 80010e0:	4603      	mov	r3, r0
 80010e2:	4a3c      	ldr	r2, [pc, #240]	; (80011d4 <update_encoder+0x184>)
 80010e4:	6013      	str	r3, [r2, #0]
	elec_angle = (mech_angle*pole_pair)-(float)((2*M_PI)*(float)multiply);
 80010e6:	eddf 7a3a 	vldr	s15, [pc, #232]	; 80011d0 <update_encoder+0x180>
 80010ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ee:	4b37      	ldr	r3, [pc, #220]	; (80011cc <update_encoder+0x17c>)
 80010f0:	edd3 7a00 	vldr	s15, [r3]
 80010f4:	ee27 8a27 	vmul.f32	s16, s14, s15
 80010f8:	4b36      	ldr	r3, [pc, #216]	; (80011d4 <update_encoder+0x184>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	ee07 3a90 	vmov	s15, r3
 8001100:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001104:	ee17 0a90 	vmov	r0, s15
 8001108:	f7ff f9e2 	bl	80004d0 <__aeabi_f2d>
 800110c:	a32a      	add	r3, pc, #168	; (adr r3, 80011b8 <update_encoder+0x168>)
 800110e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001112:	f7ff fa35 	bl	8000580 <__aeabi_dmul>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	4610      	mov	r0, r2
 800111c:	4619      	mov	r1, r3
 800111e:	f7ff fc69 	bl	80009f4 <__aeabi_d2f>
 8001122:	ee07 0a90 	vmov	s15, r0
 8001126:	ee78 7a67 	vsub.f32	s15, s16, s15
 800112a:	4b2b      	ldr	r3, [pc, #172]	; (80011d8 <update_encoder+0x188>)
 800112c:	edc3 7a00 	vstr	s15, [r3]

	//control angle calculation
	multiply = (int)(((elec_angle)/(pi/3)));
 8001130:	4b29      	ldr	r3, [pc, #164]	; (80011d8 <update_encoder+0x188>)
 8001132:	edd3 6a00 	vldr	s13, [r3]
 8001136:	ed9f 6a23 	vldr	s12, [pc, #140]	; 80011c4 <update_encoder+0x174>
 800113a:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800113e:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8001142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001146:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800114a:	ee17 2a90 	vmov	r2, s15
 800114e:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <update_encoder+0x184>)
 8001150:	601a      	str	r2, [r3, #0]
	control_angle = (elec_angle)-(float)((pi/3)*(float)multiply);
 8001152:	4b21      	ldr	r3, [pc, #132]	; (80011d8 <update_encoder+0x188>)
 8001154:	ed93 7a00 	vldr	s14, [r3]
 8001158:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 80011c4 <update_encoder+0x174>
 800115c:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8001160:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001164:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <update_encoder+0x184>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	ee07 3a90 	vmov	s15, r3
 800116c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001170:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001174:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001178:	4b18      	ldr	r3, [pc, #96]	; (80011dc <update_encoder+0x18c>)
 800117a:	edc3 7a00 	vstr	s15, [r3]

	//calculate the phase
	phase = (elec_angle/(pi/3))+1;
 800117e:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <update_encoder+0x188>)
 8001180:	edd3 6a00 	vldr	s13, [r3]
 8001184:	ed9f 6a0f 	vldr	s12, [pc, #60]	; 80011c4 <update_encoder+0x174>
 8001188:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800118c:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8001190:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001194:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001198:	ee77 7a87 	vadd.f32	s15, s15, s14
 800119c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a0:	ee17 2a90 	vmov	r2, s15
 80011a4:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <update_encoder+0x190>)
 80011a6:	601a      	str	r2, [r3, #0]
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	ecbd 8b02 	vpop	{d8}
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	f3af 8000 	nop.w
 80011b8:	54442d18 	.word	0x54442d18
 80011bc:	401921fb 	.word	0x401921fb
 80011c0:	200003e8 	.word	0x200003e8
 80011c4:	40490fdb 	.word	0x40490fdb
 80011c8:	00000800 	.word	0x00000800
 80011cc:	200003fc 	.word	0x200003fc
 80011d0:	0000000a 	.word	0x0000000a
 80011d4:	200003f8 	.word	0x200003f8
 80011d8:	20000400 	.word	0x20000400
 80011dc:	20000404 	.word	0x20000404
 80011e0:	200003f4 	.word	0x200003f4

080011e4 <delay_us>:

void delay_us (uint16_t us)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim12,0);  // set the counter value a 0
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <delay_us+0x30>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2200      	movs	r2, #0
 80011f4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim12) < us);  // wait for the counter to reach the us input in the parameter
 80011f6:	bf00      	nop
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <delay_us+0x30>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011fe:	88fb      	ldrh	r3, [r7, #6]
 8001200:	429a      	cmp	r2, r3
 8001202:	d3f9      	bcc.n	80011f8 <delay_us+0x14>
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	20000344 	.word	0x20000344

08001218 <drive>:

void drive(int voltage,int angle)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	ed2d 8b02 	vpush	{d8}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
	//printf("phase %d",phase);

	t1 = period*FastSin(M_PI/3 - (float)control_angle);
 8001226:	eddf 7ab0 	vldr	s15, [pc, #704]	; 80014e8 <drive+0x2d0>
 800122a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800122e:	4baf      	ldr	r3, [pc, #700]	; (80014ec <drive+0x2d4>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f94c 	bl	80004d0 <__aeabi_f2d>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	a1a8      	add	r1, pc, #672	; (adr r1, 80014e0 <drive+0x2c8>)
 800123e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001242:	f7fe ffe5 	bl	8000210 <__aeabi_dsub>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	f7ff fbd1 	bl	80009f4 <__aeabi_d2f>
 8001252:	4603      	mov	r3, r0
 8001254:	ee00 3a10 	vmov	s0, r3
 8001258:	f7ff fd9e 	bl	8000d98 <FastSin>
 800125c:	eef0 7a40 	vmov.f32	s15, s0
 8001260:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001264:	4ba2      	ldr	r3, [pc, #648]	; (80014f0 <drive+0x2d8>)
 8001266:	edc3 7a00 	vstr	s15, [r3]
	t2 = period*FastSin((float)control_angle);
 800126a:	eddf 7a9f 	vldr	s15, [pc, #636]	; 80014e8 <drive+0x2d0>
 800126e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001272:	4b9e      	ldr	r3, [pc, #632]	; (80014ec <drive+0x2d4>)
 8001274:	edd3 7a00 	vldr	s15, [r3]
 8001278:	eeb0 0a67 	vmov.f32	s0, s15
 800127c:	f7ff fd8c 	bl	8000d98 <FastSin>
 8001280:	eef0 7a40 	vmov.f32	s15, s0
 8001284:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001288:	4b9a      	ldr	r3, [pc, #616]	; (80014f4 <drive+0x2dc>)
 800128a:	edc3 7a00 	vstr	s15, [r3]
	t3 = period-t1-t2;
 800128e:	eddf 7a96 	vldr	s15, [pc, #600]	; 80014e8 <drive+0x2d0>
 8001292:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001296:	4b96      	ldr	r3, [pc, #600]	; (80014f0 <drive+0x2d8>)
 8001298:	edd3 7a00 	vldr	s15, [r3]
 800129c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012a0:	4b94      	ldr	r3, [pc, #592]	; (80014f4 <drive+0x2dc>)
 80012a2:	edd3 7a00 	vldr	s15, [r3]
 80012a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012aa:	4b93      	ldr	r3, [pc, #588]	; (80014f8 <drive+0x2e0>)
 80012ac:	edc3 7a00 	vstr	s15, [r3]

	switch (phase) {
 80012b0:	4b92      	ldr	r3, [pc, #584]	; (80014fc <drive+0x2e4>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	2b05      	cmp	r3, #5
 80012b8:	f200 8337 	bhi.w	800192a <drive+0x712>
 80012bc:	a201      	add	r2, pc, #4	; (adr r2, 80012c4 <drive+0xac>)
 80012be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c2:	bf00      	nop
 80012c4:	080012dd 	.word	0x080012dd
 80012c8:	080013df 	.word	0x080013df
 80012cc:	08001505 	.word	0x08001505
 80012d0:	08001607 	.word	0x08001607
 80012d4:	08001717 	.word	0x08001717
 80012d8:	08001829 	.word	0x08001829
		case 1:
			execute_phase(0,voltage);
 80012dc:	6879      	ldr	r1, [r7, #4]
 80012de:	2000      	movs	r0, #0
 80012e0:	f000 fb32 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t3/3);
 80012e4:	4b84      	ldr	r3, [pc, #528]	; (80014f8 <drive+0x2e0>)
 80012e6:	edd3 7a00 	vldr	s15, [r3]
 80012ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012ee:	ee17 3a90 	vmov	r3, s15
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	4a82      	ldr	r2, [pc, #520]	; (8001500 <drive+0x2e8>)
 80012f6:	fba2 2303 	umull	r2, r3, r2, r3
 80012fa:	085b      	lsrs	r3, r3, #1
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ff70 	bl	80011e4 <delay_us>
			execute_phase(1,voltage);
 8001304:	6879      	ldr	r1, [r7, #4]
 8001306:	2001      	movs	r0, #1
 8001308:	f000 fb1e 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t1/2);
 800130c:	4b78      	ldr	r3, [pc, #480]	; (80014f0 <drive+0x2d8>)
 800130e:	edd3 7a00 	vldr	s15, [r3]
 8001312:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001316:	ee17 3a90 	vmov	r3, s15
 800131a:	b29b      	uxth	r3, r3
 800131c:	085b      	lsrs	r3, r3, #1
 800131e:	b29b      	uxth	r3, r3
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff5f 	bl	80011e4 <delay_us>
			execute_phase(2,voltage);
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	2002      	movs	r0, #2
 800132a:	f000 fb0d 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t2/2);
 800132e:	4b71      	ldr	r3, [pc, #452]	; (80014f4 <drive+0x2dc>)
 8001330:	edd3 7a00 	vldr	s15, [r3]
 8001334:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001338:	ee17 3a90 	vmov	r3, s15
 800133c:	b29b      	uxth	r3, r3
 800133e:	085b      	lsrs	r3, r3, #1
 8001340:	b29b      	uxth	r3, r3
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff ff4e 	bl	80011e4 <delay_us>
			execute_phase(7,voltage);
 8001348:	6879      	ldr	r1, [r7, #4]
 800134a:	2007      	movs	r0, #7
 800134c:	f000 fafc 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t3/3);
 8001350:	4b69      	ldr	r3, [pc, #420]	; (80014f8 <drive+0x2e0>)
 8001352:	edd3 7a00 	vldr	s15, [r3]
 8001356:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800135a:	ee17 3a90 	vmov	r3, s15
 800135e:	b29b      	uxth	r3, r3
 8001360:	4a67      	ldr	r2, [pc, #412]	; (8001500 <drive+0x2e8>)
 8001362:	fba2 2303 	umull	r2, r3, r2, r3
 8001366:	085b      	lsrs	r3, r3, #1
 8001368:	b29b      	uxth	r3, r3
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff ff3a 	bl	80011e4 <delay_us>
			execute_phase(2,voltage);
 8001370:	6879      	ldr	r1, [r7, #4]
 8001372:	2002      	movs	r0, #2
 8001374:	f000 fae8 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t2/2);
 8001378:	4b5e      	ldr	r3, [pc, #376]	; (80014f4 <drive+0x2dc>)
 800137a:	edd3 7a00 	vldr	s15, [r3]
 800137e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001382:	ee17 3a90 	vmov	r3, s15
 8001386:	b29b      	uxth	r3, r3
 8001388:	085b      	lsrs	r3, r3, #1
 800138a:	b29b      	uxth	r3, r3
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff29 	bl	80011e4 <delay_us>
			execute_phase(1,voltage);
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	2001      	movs	r0, #1
 8001396:	f000 fad7 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t1/2);
 800139a:	4b55      	ldr	r3, [pc, #340]	; (80014f0 <drive+0x2d8>)
 800139c:	edd3 7a00 	vldr	s15, [r3]
 80013a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013a4:	ee17 3a90 	vmov	r3, s15
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	085b      	lsrs	r3, r3, #1
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff ff18 	bl	80011e4 <delay_us>
			execute_phase(0,voltage);
 80013b4:	6879      	ldr	r1, [r7, #4]
 80013b6:	2000      	movs	r0, #0
 80013b8:	f000 fac6 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t3/3);
 80013bc:	4b4e      	ldr	r3, [pc, #312]	; (80014f8 <drive+0x2e0>)
 80013be:	edd3 7a00 	vldr	s15, [r3]
 80013c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013c6:	ee17 3a90 	vmov	r3, s15
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	4a4c      	ldr	r2, [pc, #304]	; (8001500 <drive+0x2e8>)
 80013ce:	fba2 2303 	umull	r2, r3, r2, r3
 80013d2:	085b      	lsrs	r3, r3, #1
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff ff04 	bl	80011e4 <delay_us>

			break;
 80013dc:	e2a5      	b.n	800192a <drive+0x712>
		case 2:
			execute_phase(0,voltage);
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	2000      	movs	r0, #0
 80013e2:	f000 fab1 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t3/3);
 80013e6:	4b44      	ldr	r3, [pc, #272]	; (80014f8 <drive+0x2e0>)
 80013e8:	edd3 7a00 	vldr	s15, [r3]
 80013ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013f0:	ee17 3a90 	vmov	r3, s15
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	4a42      	ldr	r2, [pc, #264]	; (8001500 <drive+0x2e8>)
 80013f8:	fba2 2303 	umull	r2, r3, r2, r3
 80013fc:	085b      	lsrs	r3, r3, #1
 80013fe:	b29b      	uxth	r3, r3
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff feef 	bl	80011e4 <delay_us>
			execute_phase(3,voltage);
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	2003      	movs	r0, #3
 800140a:	f000 fa9d 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t2/2);
 800140e:	4b39      	ldr	r3, [pc, #228]	; (80014f4 <drive+0x2dc>)
 8001410:	edd3 7a00 	vldr	s15, [r3]
 8001414:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001418:	ee17 3a90 	vmov	r3, s15
 800141c:	b29b      	uxth	r3, r3
 800141e:	085b      	lsrs	r3, r3, #1
 8001420:	b29b      	uxth	r3, r3
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fede 	bl	80011e4 <delay_us>
			execute_phase(2,voltage);
 8001428:	6879      	ldr	r1, [r7, #4]
 800142a:	2002      	movs	r0, #2
 800142c:	f000 fa8c 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t1/2);
 8001430:	4b2f      	ldr	r3, [pc, #188]	; (80014f0 <drive+0x2d8>)
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800143a:	ee17 3a90 	vmov	r3, s15
 800143e:	b29b      	uxth	r3, r3
 8001440:	085b      	lsrs	r3, r3, #1
 8001442:	b29b      	uxth	r3, r3
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fecd 	bl	80011e4 <delay_us>
			execute_phase(7,voltage);
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	2007      	movs	r0, #7
 800144e:	f000 fa7b 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t3/3);
 8001452:	4b29      	ldr	r3, [pc, #164]	; (80014f8 <drive+0x2e0>)
 8001454:	edd3 7a00 	vldr	s15, [r3]
 8001458:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800145c:	ee17 3a90 	vmov	r3, s15
 8001460:	b29b      	uxth	r3, r3
 8001462:	4a27      	ldr	r2, [pc, #156]	; (8001500 <drive+0x2e8>)
 8001464:	fba2 2303 	umull	r2, r3, r2, r3
 8001468:	085b      	lsrs	r3, r3, #1
 800146a:	b29b      	uxth	r3, r3
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff feb9 	bl	80011e4 <delay_us>
			execute_phase(2,voltage);
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	2002      	movs	r0, #2
 8001476:	f000 fa67 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t1/2);
 800147a:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <drive+0x2d8>)
 800147c:	edd3 7a00 	vldr	s15, [r3]
 8001480:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001484:	ee17 3a90 	vmov	r3, s15
 8001488:	b29b      	uxth	r3, r3
 800148a:	085b      	lsrs	r3, r3, #1
 800148c:	b29b      	uxth	r3, r3
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fea8 	bl	80011e4 <delay_us>
			execute_phase(3,voltage);
 8001494:	6879      	ldr	r1, [r7, #4]
 8001496:	2003      	movs	r0, #3
 8001498:	f000 fa56 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t2/2);
 800149c:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <drive+0x2dc>)
 800149e:	edd3 7a00 	vldr	s15, [r3]
 80014a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014a6:	ee17 3a90 	vmov	r3, s15
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	085b      	lsrs	r3, r3, #1
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fe97 	bl	80011e4 <delay_us>
			execute_phase(0,voltage);
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	2000      	movs	r0, #0
 80014ba:	f000 fa45 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t3/3);
 80014be:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <drive+0x2e0>)
 80014c0:	edd3 7a00 	vldr	s15, [r3]
 80014c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014c8:	ee17 3a90 	vmov	r3, s15
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	4a0c      	ldr	r2, [pc, #48]	; (8001500 <drive+0x2e8>)
 80014d0:	fba2 2303 	umull	r2, r3, r2, r3
 80014d4:	085b      	lsrs	r3, r3, #1
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fe83 	bl	80011e4 <delay_us>
			break;
 80014de:	e224      	b.n	800192a <drive+0x712>
 80014e0:	382d7365 	.word	0x382d7365
 80014e4:	3ff0c152 	.word	0x3ff0c152
 80014e8:	000000fa 	.word	0x000000fa
 80014ec:	20000404 	.word	0x20000404
 80014f0:	2000040c 	.word	0x2000040c
 80014f4:	20000410 	.word	0x20000410
 80014f8:	20000414 	.word	0x20000414
 80014fc:	200003f4 	.word	0x200003f4
 8001500:	aaaaaaab 	.word	0xaaaaaaab
		case 3:
			execute_phase(0,voltage);
 8001504:	6879      	ldr	r1, [r7, #4]
 8001506:	2000      	movs	r0, #0
 8001508:	f000 fa1e 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t3/3);
 800150c:	4bc2      	ldr	r3, [pc, #776]	; (8001818 <drive+0x600>)
 800150e:	edd3 7a00 	vldr	s15, [r3]
 8001512:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001516:	ee17 3a90 	vmov	r3, s15
 800151a:	b29b      	uxth	r3, r3
 800151c:	4abf      	ldr	r2, [pc, #764]	; (800181c <drive+0x604>)
 800151e:	fba2 2303 	umull	r2, r3, r2, r3
 8001522:	085b      	lsrs	r3, r3, #1
 8001524:	b29b      	uxth	r3, r3
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fe5c 	bl	80011e4 <delay_us>
			execute_phase(3,voltage);
 800152c:	6879      	ldr	r1, [r7, #4]
 800152e:	2003      	movs	r0, #3
 8001530:	f000 fa0a 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t1/2);
 8001534:	4bba      	ldr	r3, [pc, #744]	; (8001820 <drive+0x608>)
 8001536:	edd3 7a00 	vldr	s15, [r3]
 800153a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800153e:	ee17 3a90 	vmov	r3, s15
 8001542:	b29b      	uxth	r3, r3
 8001544:	085b      	lsrs	r3, r3, #1
 8001546:	b29b      	uxth	r3, r3
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff fe4b 	bl	80011e4 <delay_us>
			execute_phase(4,voltage);
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	2004      	movs	r0, #4
 8001552:	f000 f9f9 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t2/2);
 8001556:	4bb3      	ldr	r3, [pc, #716]	; (8001824 <drive+0x60c>)
 8001558:	edd3 7a00 	vldr	s15, [r3]
 800155c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001560:	ee17 3a90 	vmov	r3, s15
 8001564:	b29b      	uxth	r3, r3
 8001566:	085b      	lsrs	r3, r3, #1
 8001568:	b29b      	uxth	r3, r3
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fe3a 	bl	80011e4 <delay_us>
			execute_phase(7,voltage);
 8001570:	6879      	ldr	r1, [r7, #4]
 8001572:	2007      	movs	r0, #7
 8001574:	f000 f9e8 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t3/3);
 8001578:	4ba7      	ldr	r3, [pc, #668]	; (8001818 <drive+0x600>)
 800157a:	edd3 7a00 	vldr	s15, [r3]
 800157e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001582:	ee17 3a90 	vmov	r3, s15
 8001586:	b29b      	uxth	r3, r3
 8001588:	4aa4      	ldr	r2, [pc, #656]	; (800181c <drive+0x604>)
 800158a:	fba2 2303 	umull	r2, r3, r2, r3
 800158e:	085b      	lsrs	r3, r3, #1
 8001590:	b29b      	uxth	r3, r3
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fe26 	bl	80011e4 <delay_us>
			execute_phase(4,voltage);
 8001598:	6879      	ldr	r1, [r7, #4]
 800159a:	2004      	movs	r0, #4
 800159c:	f000 f9d4 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t2/2);
 80015a0:	4ba0      	ldr	r3, [pc, #640]	; (8001824 <drive+0x60c>)
 80015a2:	edd3 7a00 	vldr	s15, [r3]
 80015a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015aa:	ee17 3a90 	vmov	r3, s15
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	085b      	lsrs	r3, r3, #1
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff fe15 	bl	80011e4 <delay_us>
			execute_phase(3,voltage);
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	2003      	movs	r0, #3
 80015be:	f000 f9c3 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t1/2);
 80015c2:	4b97      	ldr	r3, [pc, #604]	; (8001820 <drive+0x608>)
 80015c4:	edd3 7a00 	vldr	s15, [r3]
 80015c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015cc:	ee17 3a90 	vmov	r3, s15
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	085b      	lsrs	r3, r3, #1
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fe04 	bl	80011e4 <delay_us>
			execute_phase(0,voltage);
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	2000      	movs	r0, #0
 80015e0:	f000 f9b2 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t3/3);
 80015e4:	4b8c      	ldr	r3, [pc, #560]	; (8001818 <drive+0x600>)
 80015e6:	edd3 7a00 	vldr	s15, [r3]
 80015ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015ee:	ee17 3a90 	vmov	r3, s15
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	4a89      	ldr	r2, [pc, #548]	; (800181c <drive+0x604>)
 80015f6:	fba2 2303 	umull	r2, r3, r2, r3
 80015fa:	085b      	lsrs	r3, r3, #1
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fdf0 	bl	80011e4 <delay_us>
			break;
 8001604:	e191      	b.n	800192a <drive+0x712>
		case 4:
			execute_phase(0,voltage);
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	2000      	movs	r0, #0
 800160a:	f000 f99d 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t3/3);
 800160e:	4b82      	ldr	r3, [pc, #520]	; (8001818 <drive+0x600>)
 8001610:	edd3 7a00 	vldr	s15, [r3]
 8001614:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001618:	ee17 3a90 	vmov	r3, s15
 800161c:	b29b      	uxth	r3, r3
 800161e:	4a7f      	ldr	r2, [pc, #508]	; (800181c <drive+0x604>)
 8001620:	fba2 2303 	umull	r2, r3, r2, r3
 8001624:	085b      	lsrs	r3, r3, #1
 8001626:	b29b      	uxth	r3, r3
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fddb 	bl	80011e4 <delay_us>
			execute_phase(4,voltage);
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	2004      	movs	r0, #4
 8001632:	f000 f989 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t1/3);
 8001636:	4b7a      	ldr	r3, [pc, #488]	; (8001820 <drive+0x608>)
 8001638:	edd3 7a00 	vldr	s15, [r3]
 800163c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001640:	ee17 3a90 	vmov	r3, s15
 8001644:	b29b      	uxth	r3, r3
 8001646:	4a75      	ldr	r2, [pc, #468]	; (800181c <drive+0x604>)
 8001648:	fba2 2303 	umull	r2, r3, r2, r3
 800164c:	085b      	lsrs	r3, r3, #1
 800164e:	b29b      	uxth	r3, r3
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fdc7 	bl	80011e4 <delay_us>
			execute_phase(4,voltage);
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	2004      	movs	r0, #4
 800165a:	f000 f975 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t1/3);
 800165e:	4b70      	ldr	r3, [pc, #448]	; (8001820 <drive+0x608>)
 8001660:	edd3 7a00 	vldr	s15, [r3]
 8001664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001668:	ee17 3a90 	vmov	r3, s15
 800166c:	b29b      	uxth	r3, r3
 800166e:	4a6b      	ldr	r2, [pc, #428]	; (800181c <drive+0x604>)
 8001670:	fba2 2303 	umull	r2, r3, r2, r3
 8001674:	085b      	lsrs	r3, r3, #1
 8001676:	b29b      	uxth	r3, r3
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fdb3 	bl	80011e4 <delay_us>
			execute_phase(7,voltage);
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	2007      	movs	r0, #7
 8001682:	f000 f961 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t3/3);
 8001686:	4b64      	ldr	r3, [pc, #400]	; (8001818 <drive+0x600>)
 8001688:	edd3 7a00 	vldr	s15, [r3]
 800168c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001690:	ee17 3a90 	vmov	r3, s15
 8001694:	b29b      	uxth	r3, r3
 8001696:	4a61      	ldr	r2, [pc, #388]	; (800181c <drive+0x604>)
 8001698:	fba2 2303 	umull	r2, r3, r2, r3
 800169c:	085b      	lsrs	r3, r3, #1
 800169e:	b29b      	uxth	r3, r3
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fd9f 	bl	80011e4 <delay_us>
			execute_phase(4,voltage);
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	2004      	movs	r0, #4
 80016aa:	f000 f94d 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t1/3);
 80016ae:	4b5c      	ldr	r3, [pc, #368]	; (8001820 <drive+0x608>)
 80016b0:	edd3 7a00 	vldr	s15, [r3]
 80016b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016b8:	ee17 3a90 	vmov	r3, s15
 80016bc:	b29b      	uxth	r3, r3
 80016be:	4a57      	ldr	r2, [pc, #348]	; (800181c <drive+0x604>)
 80016c0:	fba2 2303 	umull	r2, r3, r2, r3
 80016c4:	085b      	lsrs	r3, r3, #1
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fd8b 	bl	80011e4 <delay_us>
			execute_phase(5,voltage);
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	2005      	movs	r0, #5
 80016d2:	f000 f939 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t2);
 80016d6:	4b53      	ldr	r3, [pc, #332]	; (8001824 <drive+0x60c>)
 80016d8:	edd3 7a00 	vldr	s15, [r3]
 80016dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016e0:	ee17 3a90 	vmov	r3, s15
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fd7c 	bl	80011e4 <delay_us>
			execute_phase(0,voltage);
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	2000      	movs	r0, #0
 80016f0:	f000 f92a 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t3/3);
 80016f4:	4b48      	ldr	r3, [pc, #288]	; (8001818 <drive+0x600>)
 80016f6:	edd3 7a00 	vldr	s15, [r3]
 80016fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016fe:	ee17 3a90 	vmov	r3, s15
 8001702:	b29b      	uxth	r3, r3
 8001704:	4a45      	ldr	r2, [pc, #276]	; (800181c <drive+0x604>)
 8001706:	fba2 2303 	umull	r2, r3, r2, r3
 800170a:	085b      	lsrs	r3, r3, #1
 800170c:	b29b      	uxth	r3, r3
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fd68 	bl	80011e4 <delay_us>
			break;
 8001714:	e109      	b.n	800192a <drive+0x712>
		case 5:
			execute_phase(0,voltage);
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	2000      	movs	r0, #0
 800171a:	f000 f915 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t3/3);
 800171e:	4b3e      	ldr	r3, [pc, #248]	; (8001818 <drive+0x600>)
 8001720:	edd3 7a00 	vldr	s15, [r3]
 8001724:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001728:	ee17 3a90 	vmov	r3, s15
 800172c:	b29b      	uxth	r3, r3
 800172e:	4a3b      	ldr	r2, [pc, #236]	; (800181c <drive+0x604>)
 8001730:	fba2 2303 	umull	r2, r3, r2, r3
 8001734:	085b      	lsrs	r3, r3, #1
 8001736:	b29b      	uxth	r3, r3
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fd53 	bl	80011e4 <delay_us>
			execute_phase(5,voltage);
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	2005      	movs	r0, #5
 8001742:	f000 f901 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t1/2);
 8001746:	4b36      	ldr	r3, [pc, #216]	; (8001820 <drive+0x608>)
 8001748:	edd3 7a00 	vldr	s15, [r3]
 800174c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001750:	ee17 3a90 	vmov	r3, s15
 8001754:	b29b      	uxth	r3, r3
 8001756:	085b      	lsrs	r3, r3, #1
 8001758:	b29b      	uxth	r3, r3
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fd42 	bl	80011e4 <delay_us>
			execute_phase(6,voltage);
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	2006      	movs	r0, #6
 8001764:	f000 f8f0 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t2/2);
 8001768:	4b2e      	ldr	r3, [pc, #184]	; (8001824 <drive+0x60c>)
 800176a:	edd3 7a00 	vldr	s15, [r3]
 800176e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001772:	ee17 3a90 	vmov	r3, s15
 8001776:	b29b      	uxth	r3, r3
 8001778:	085b      	lsrs	r3, r3, #1
 800177a:	b29b      	uxth	r3, r3
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff fd31 	bl	80011e4 <delay_us>
			execute_phase(7,voltage);
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	2007      	movs	r0, #7
 8001786:	f000 f8df 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t3/3);
 800178a:	4b23      	ldr	r3, [pc, #140]	; (8001818 <drive+0x600>)
 800178c:	edd3 7a00 	vldr	s15, [r3]
 8001790:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001794:	ee17 3a90 	vmov	r3, s15
 8001798:	b29b      	uxth	r3, r3
 800179a:	4a20      	ldr	r2, [pc, #128]	; (800181c <drive+0x604>)
 800179c:	fba2 2303 	umull	r2, r3, r2, r3
 80017a0:	085b      	lsrs	r3, r3, #1
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fd1d 	bl	80011e4 <delay_us>
			execute_phase(6,voltage);
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	2006      	movs	r0, #6
 80017ae:	f000 f8cb 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t2/2);
 80017b2:	4b1c      	ldr	r3, [pc, #112]	; (8001824 <drive+0x60c>)
 80017b4:	edd3 7a00 	vldr	s15, [r3]
 80017b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017bc:	ee17 3a90 	vmov	r3, s15
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	085b      	lsrs	r3, r3, #1
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fd0c 	bl	80011e4 <delay_us>
			execute_phase(5,voltage);
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	2005      	movs	r0, #5
 80017d0:	f000 f8ba 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t1/2);
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <drive+0x608>)
 80017d6:	edd3 7a00 	vldr	s15, [r3]
 80017da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017de:	ee17 3a90 	vmov	r3, s15
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	085b      	lsrs	r3, r3, #1
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fcfb 	bl	80011e4 <delay_us>
			execute_phase(0,voltage);
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	2000      	movs	r0, #0
 80017f2:	f000 f8a9 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t3/3);
 80017f6:	4b08      	ldr	r3, [pc, #32]	; (8001818 <drive+0x600>)
 80017f8:	edd3 7a00 	vldr	s15, [r3]
 80017fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001800:	ee17 3a90 	vmov	r3, s15
 8001804:	b29b      	uxth	r3, r3
 8001806:	4a05      	ldr	r2, [pc, #20]	; (800181c <drive+0x604>)
 8001808:	fba2 2303 	umull	r2, r3, r2, r3
 800180c:	085b      	lsrs	r3, r3, #1
 800180e:	b29b      	uxth	r3, r3
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fce7 	bl	80011e4 <delay_us>
			break;
 8001816:	e088      	b.n	800192a <drive+0x712>
 8001818:	20000414 	.word	0x20000414
 800181c:	aaaaaaab 	.word	0xaaaaaaab
 8001820:	2000040c 	.word	0x2000040c
 8001824:	20000410 	.word	0x20000410
		case 6:
			execute_phase(0,voltage);
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	2000      	movs	r0, #0
 800182c:	f000 f88c 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t3/3);
 8001830:	4b41      	ldr	r3, [pc, #260]	; (8001938 <drive+0x720>)
 8001832:	edd3 7a00 	vldr	s15, [r3]
 8001836:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800183a:	ee17 3a90 	vmov	r3, s15
 800183e:	b29b      	uxth	r3, r3
 8001840:	4a3e      	ldr	r2, [pc, #248]	; (800193c <drive+0x724>)
 8001842:	fba2 2303 	umull	r2, r3, r2, r3
 8001846:	085b      	lsrs	r3, r3, #1
 8001848:	b29b      	uxth	r3, r3
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fcca 	bl	80011e4 <delay_us>
			execute_phase(1,voltage);
 8001850:	6879      	ldr	r1, [r7, #4]
 8001852:	2001      	movs	r0, #1
 8001854:	f000 f878 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t2/2);
 8001858:	4b39      	ldr	r3, [pc, #228]	; (8001940 <drive+0x728>)
 800185a:	edd3 7a00 	vldr	s15, [r3]
 800185e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001862:	ee17 3a90 	vmov	r3, s15
 8001866:	b29b      	uxth	r3, r3
 8001868:	085b      	lsrs	r3, r3, #1
 800186a:	b29b      	uxth	r3, r3
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fcb9 	bl	80011e4 <delay_us>
			execute_phase(6,voltage);
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	2006      	movs	r0, #6
 8001876:	f000 f867 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t1/2);
 800187a:	4b32      	ldr	r3, [pc, #200]	; (8001944 <drive+0x72c>)
 800187c:	edd3 7a00 	vldr	s15, [r3]
 8001880:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001884:	ee17 3a90 	vmov	r3, s15
 8001888:	b29b      	uxth	r3, r3
 800188a:	085b      	lsrs	r3, r3, #1
 800188c:	b29b      	uxth	r3, r3
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff fca8 	bl	80011e4 <delay_us>
			execute_phase(7,voltage);
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	2007      	movs	r0, #7
 8001898:	f000 f856 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t3/3);
 800189c:	4b26      	ldr	r3, [pc, #152]	; (8001938 <drive+0x720>)
 800189e:	edd3 7a00 	vldr	s15, [r3]
 80018a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018a6:	ee17 3a90 	vmov	r3, s15
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	4a23      	ldr	r2, [pc, #140]	; (800193c <drive+0x724>)
 80018ae:	fba2 2303 	umull	r2, r3, r2, r3
 80018b2:	085b      	lsrs	r3, r3, #1
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fc94 	bl	80011e4 <delay_us>
			execute_phase(6,voltage);
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	2006      	movs	r0, #6
 80018c0:	f000 f842 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t1/2);
 80018c4:	4b1f      	ldr	r3, [pc, #124]	; (8001944 <drive+0x72c>)
 80018c6:	edd3 7a00 	vldr	s15, [r3]
 80018ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018ce:	ee17 3a90 	vmov	r3, s15
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	085b      	lsrs	r3, r3, #1
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fc83 	bl	80011e4 <delay_us>
			execute_phase(1,voltage);
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	2001      	movs	r0, #1
 80018e2:	f000 f831 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t2/2);
 80018e6:	4b16      	ldr	r3, [pc, #88]	; (8001940 <drive+0x728>)
 80018e8:	edd3 7a00 	vldr	s15, [r3]
 80018ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018f0:	ee17 3a90 	vmov	r3, s15
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	085b      	lsrs	r3, r3, #1
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fc72 	bl	80011e4 <delay_us>
			execute_phase(0,voltage);
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	2000      	movs	r0, #0
 8001904:	f000 f820 	bl	8001948 <execute_phase>
			delay_us((uint16_t)t3/3);
 8001908:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <drive+0x720>)
 800190a:	edd3 7a00 	vldr	s15, [r3]
 800190e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001912:	ee17 3a90 	vmov	r3, s15
 8001916:	b29b      	uxth	r3, r3
 8001918:	4a08      	ldr	r2, [pc, #32]	; (800193c <drive+0x724>)
 800191a:	fba2 2303 	umull	r2, r3, r2, r3
 800191e:	085b      	lsrs	r3, r3, #1
 8001920:	b29b      	uxth	r3, r3
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fc5e 	bl	80011e4 <delay_us>
			break;
 8001928:	bf00      	nop
	}

}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	ecbd 8b02 	vpop	{d8}
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000414 	.word	0x20000414
 800193c:	aaaaaaab 	.word	0xaaaaaaab
 8001940:	20000410 	.word	0x20000410
 8001944:	2000040c 	.word	0x2000040c

08001948 <execute_phase>:

void execute_phase(int phase,int speed)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
	phase_uni = phase;
 8001952:	4a5c      	ldr	r2, [pc, #368]	; (8001ac4 <execute_phase+0x17c>)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6013      	str	r3, [r2, #0]

	switch (phase) {
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b07      	cmp	r3, #7
 800195c:	f200 80ac 	bhi.w	8001ab8 <execute_phase+0x170>
 8001960:	a201      	add	r2, pc, #4	; (adr r2, 8001968 <execute_phase+0x20>)
 8001962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001966:	bf00      	nop
 8001968:	08001989 	.word	0x08001989
 800196c:	080019af 	.word	0x080019af
 8001970:	080019d5 	.word	0x080019d5
 8001974:	080019fb 	.word	0x080019fb
 8001978:	08001a21 	.word	0x08001a21
 800197c:	08001a47 	.word	0x08001a47
 8001980:	08001a6d 	.word	0x08001a6d
 8001984:	08001a93 	.word	0x08001a93
		case 0:
			TIM3->CCR1 = 0;
 8001988:	4b4f      	ldr	r3, [pc, #316]	; (8001ac8 <execute_phase+0x180>)
 800198a:	2200      	movs	r2, #0
 800198c:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 0;
 800198e:	4b4e      	ldr	r3, [pc, #312]	; (8001ac8 <execute_phase+0x180>)
 8001990:	2200      	movs	r2, #0
 8001992:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3->CCR3 = 0;
 8001994:	4b4c      	ldr	r3, [pc, #304]	; (8001ac8 <execute_phase+0x180>)
 8001996:	2200      	movs	r2, #0
 8001998:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM4->CCR1 = 0;
 800199a:	4b4c      	ldr	r3, [pc, #304]	; (8001acc <execute_phase+0x184>)
 800199c:	2200      	movs	r2, #0
 800199e:	635a      	str	r2, [r3, #52]	; 0x34
			TIM4->CCR2 = 0;
 80019a0:	4b4a      	ldr	r3, [pc, #296]	; (8001acc <execute_phase+0x184>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	639a      	str	r2, [r3, #56]	; 0x38
			TIM4->CCR3 = 0;
 80019a6:	4b49      	ldr	r3, [pc, #292]	; (8001acc <execute_phase+0x184>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80019ac:	e084      	b.n	8001ab8 <execute_phase+0x170>
		case 1:
			TIM3->CCR1 = 0;
 80019ae:	4b46      	ldr	r3, [pc, #280]	; (8001ac8 <execute_phase+0x180>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = speed;
 80019b4:	4a44      	ldr	r2, [pc, #272]	; (8001ac8 <execute_phase+0x180>)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	6393      	str	r3, [r2, #56]	; 0x38
			TIM3->CCR3 = speed;
 80019ba:	4a43      	ldr	r2, [pc, #268]	; (8001ac8 <execute_phase+0x180>)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM4->CCR1 = speed;
 80019c0:	4a42      	ldr	r2, [pc, #264]	; (8001acc <execute_phase+0x184>)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	6353      	str	r3, [r2, #52]	; 0x34
			TIM4->CCR2 = 0;
 80019c6:	4b41      	ldr	r3, [pc, #260]	; (8001acc <execute_phase+0x184>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	639a      	str	r2, [r3, #56]	; 0x38
			TIM4->CCR3 = 0;
 80019cc:	4b3f      	ldr	r3, [pc, #252]	; (8001acc <execute_phase+0x184>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80019d2:	e071      	b.n	8001ab8 <execute_phase+0x170>
		case 2:
			TIM3->CCR1 = 0;
 80019d4:	4b3c      	ldr	r3, [pc, #240]	; (8001ac8 <execute_phase+0x180>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 0;
 80019da:	4b3b      	ldr	r3, [pc, #236]	; (8001ac8 <execute_phase+0x180>)
 80019dc:	2200      	movs	r2, #0
 80019de:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3->CCR3 = speed;
 80019e0:	4a39      	ldr	r2, [pc, #228]	; (8001ac8 <execute_phase+0x180>)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM4->CCR1 = speed;
 80019e6:	4a39      	ldr	r2, [pc, #228]	; (8001acc <execute_phase+0x184>)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	6353      	str	r3, [r2, #52]	; 0x34
			TIM4->CCR2 = speed;
 80019ec:	4a37      	ldr	r2, [pc, #220]	; (8001acc <execute_phase+0x184>)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	6393      	str	r3, [r2, #56]	; 0x38
			TIM4->CCR3 = 0;
 80019f2:	4b36      	ldr	r3, [pc, #216]	; (8001acc <execute_phase+0x184>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80019f8:	e05e      	b.n	8001ab8 <execute_phase+0x170>
		case 3:
			TIM3->CCR1 = speed;
 80019fa:	4a33      	ldr	r2, [pc, #204]	; (8001ac8 <execute_phase+0x180>)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	6353      	str	r3, [r2, #52]	; 0x34
			TIM3->CCR2 = 0;
 8001a00:	4b31      	ldr	r3, [pc, #196]	; (8001ac8 <execute_phase+0x180>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3->CCR3 = speed;
 8001a06:	4a30      	ldr	r2, [pc, #192]	; (8001ac8 <execute_phase+0x180>)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM4->CCR1 = 0;
 8001a0c:	4b2f      	ldr	r3, [pc, #188]	; (8001acc <execute_phase+0x184>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	635a      	str	r2, [r3, #52]	; 0x34
			TIM4->CCR2 = speed;
 8001a12:	4a2e      	ldr	r2, [pc, #184]	; (8001acc <execute_phase+0x184>)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	6393      	str	r3, [r2, #56]	; 0x38
			TIM4->CCR3 = 0;
 8001a18:	4b2c      	ldr	r3, [pc, #176]	; (8001acc <execute_phase+0x184>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8001a1e:	e04b      	b.n	8001ab8 <execute_phase+0x170>
		case 4:
			TIM3->CCR1 = speed;
 8001a20:	4a29      	ldr	r2, [pc, #164]	; (8001ac8 <execute_phase+0x180>)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	6353      	str	r3, [r2, #52]	; 0x34
			TIM3->CCR2 = 0;
 8001a26:	4b28      	ldr	r3, [pc, #160]	; (8001ac8 <execute_phase+0x180>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3->CCR3 = 0;
 8001a2c:	4b26      	ldr	r3, [pc, #152]	; (8001ac8 <execute_phase+0x180>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM4->CCR1 = 0;
 8001a32:	4b26      	ldr	r3, [pc, #152]	; (8001acc <execute_phase+0x184>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	635a      	str	r2, [r3, #52]	; 0x34
			TIM4->CCR2 = speed;
 8001a38:	4a24      	ldr	r2, [pc, #144]	; (8001acc <execute_phase+0x184>)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	6393      	str	r3, [r2, #56]	; 0x38
			TIM4->CCR3 = speed;
 8001a3e:	4a23      	ldr	r2, [pc, #140]	; (8001acc <execute_phase+0x184>)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 8001a44:	e038      	b.n	8001ab8 <execute_phase+0x170>
		case 5:
			TIM3->CCR1 = speed;
 8001a46:	4a20      	ldr	r2, [pc, #128]	; (8001ac8 <execute_phase+0x180>)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	6353      	str	r3, [r2, #52]	; 0x34
			TIM3->CCR2 = speed;
 8001a4c:	4a1e      	ldr	r2, [pc, #120]	; (8001ac8 <execute_phase+0x180>)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	6393      	str	r3, [r2, #56]	; 0x38
			TIM3->CCR3 = 0;
 8001a52:	4b1d      	ldr	r3, [pc, #116]	; (8001ac8 <execute_phase+0x180>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM4->CCR1 = 0;
 8001a58:	4b1c      	ldr	r3, [pc, #112]	; (8001acc <execute_phase+0x184>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	635a      	str	r2, [r3, #52]	; 0x34
			TIM4->CCR2 = 0;
 8001a5e:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <execute_phase+0x184>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	639a      	str	r2, [r3, #56]	; 0x38
			TIM4->CCR3 = speed;
 8001a64:	4a19      	ldr	r2, [pc, #100]	; (8001acc <execute_phase+0x184>)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 8001a6a:	e025      	b.n	8001ab8 <execute_phase+0x170>
		case 6:
			TIM3->CCR1 = 0;
 8001a6c:	4b16      	ldr	r3, [pc, #88]	; (8001ac8 <execute_phase+0x180>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = speed;
 8001a72:	4a15      	ldr	r2, [pc, #84]	; (8001ac8 <execute_phase+0x180>)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	6393      	str	r3, [r2, #56]	; 0x38
			TIM3->CCR3 = 0;
 8001a78:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <execute_phase+0x180>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM4->CCR1 = speed;
 8001a7e:	4a13      	ldr	r2, [pc, #76]	; (8001acc <execute_phase+0x184>)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	6353      	str	r3, [r2, #52]	; 0x34
			TIM4->CCR2 = 0;
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <execute_phase+0x184>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	639a      	str	r2, [r3, #56]	; 0x38
			TIM4->CCR3 = speed;
 8001a8a:	4a10      	ldr	r2, [pc, #64]	; (8001acc <execute_phase+0x184>)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 8001a90:	e012      	b.n	8001ab8 <execute_phase+0x170>
		case 7:
			TIM3->CCR1 = speed;
 8001a92:	4a0d      	ldr	r2, [pc, #52]	; (8001ac8 <execute_phase+0x180>)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	6353      	str	r3, [r2, #52]	; 0x34
			TIM3->CCR2 = speed;
 8001a98:	4a0b      	ldr	r2, [pc, #44]	; (8001ac8 <execute_phase+0x180>)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	6393      	str	r3, [r2, #56]	; 0x38
			TIM3->CCR3 = speed;
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <execute_phase+0x180>)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM4->CCR1 = speed;
 8001aa4:	4a09      	ldr	r2, [pc, #36]	; (8001acc <execute_phase+0x184>)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	6353      	str	r3, [r2, #52]	; 0x34
			TIM4->CCR2 = speed;
 8001aaa:	4a08      	ldr	r2, [pc, #32]	; (8001acc <execute_phase+0x184>)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	6393      	str	r3, [r2, #56]	; 0x38
			TIM4->CCR3 = speed;
 8001ab0:	4a06      	ldr	r2, [pc, #24]	; (8001acc <execute_phase+0x184>)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 8001ab6:	bf00      	nop

	}
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	200003f0 	.word	0x200003f0
 8001ac8:	40000400 	.word	0x40000400
 8001acc:	40000800 	.word	0x40000800

08001ad0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ad4:	f001 f892 	bl	8002bfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ad8:	f000 f8c0 	bl	8001c5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001adc:	f000 fc70 	bl	80023c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001ae0:	f000 fc14 	bl	800230c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001ae4:	f000 fac0 	bl	8002068 <MX_TIM3_Init>
  MX_DMA_Init();
 8001ae8:	f000 fc3a 	bl	8002360 <MX_DMA_Init>
  MX_ADC1_Init();
 8001aec:	f000 f922 	bl	8001d34 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001af0:	f000 fb46 	bl	8002180 <MX_TIM4_Init>
  MX_ADC2_Init();
 8001af4:	f000 f970 	bl	8001dd8 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001af8:	f000 f9c0 	bl	8001e7c <MX_ADC3_Init>
  MX_TIM12_Init();
 8001afc:	f000 fbcc 	bl	8002298 <MX_TIM12_Init>
  MX_TIM2_Init();
 8001b00:	f000 fa5e 	bl	8001fc0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001b04:	f000 fa0c 	bl	8001f20 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim12);
 8001b08:	4843      	ldr	r0, [pc, #268]	; (8001c18 <main+0x148>)
 8001b0a:	f003 f98d 	bl	8004e28 <HAL_TIM_Base_Start>

  HAL_TIM_Base_Start(&htim3);
 8001b0e:	4843      	ldr	r0, [pc, #268]	; (8001c1c <main+0x14c>)
 8001b10:	f003 f98a 	bl	8004e28 <HAL_TIM_Base_Start>
  delay_us(96); // for the pwm gitter control
 8001b14:	2060      	movs	r0, #96	; 0x60
 8001b16:	f7ff fb65 	bl	80011e4 <delay_us>
  HAL_TIM_Base_Start(&htim4);
 8001b1a:	4841      	ldr	r0, [pc, #260]	; (8001c20 <main+0x150>)
 8001b1c:	f003 f984 	bl	8004e28 <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001b20:	2100      	movs	r1, #0
 8001b22:	483e      	ldr	r0, [pc, #248]	; (8001c1c <main+0x14c>)
 8001b24:	f003 fa42 	bl	8004fac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001b28:	2104      	movs	r1, #4
 8001b2a:	483c      	ldr	r0, [pc, #240]	; (8001c1c <main+0x14c>)
 8001b2c:	f003 fa3e 	bl	8004fac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001b30:	2108      	movs	r1, #8
 8001b32:	483a      	ldr	r0, [pc, #232]	; (8001c1c <main+0x14c>)
 8001b34:	f003 fa3a 	bl	8004fac <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4839      	ldr	r0, [pc, #228]	; (8001c20 <main+0x150>)
 8001b3c:	f003 fa36 	bl	8004fac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001b40:	2104      	movs	r1, #4
 8001b42:	4837      	ldr	r0, [pc, #220]	; (8001c20 <main+0x150>)
 8001b44:	f003 fa32 	bl	8004fac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001b48:	2108      	movs	r1, #8
 8001b4a:	4835      	ldr	r0, [pc, #212]	; (8001c20 <main+0x150>)
 8001b4c:	f003 fa2e 	bl	8004fac <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001b50:	213c      	movs	r1, #60	; 0x3c
 8001b52:	4834      	ldr	r0, [pc, #208]	; (8001c24 <main+0x154>)
 8001b54:	f003 fb98 	bl	8005288 <HAL_TIM_Encoder_Start>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET); //enable the gate driver
 8001b58:	2201      	movs	r2, #1
 8001b5a:	2110      	movs	r1, #16
 8001b5c:	4832      	ldr	r0, [pc, #200]	; (8001c28 <main+0x158>)
 8001b5e:	f002 fb11 	bl	8004184 <HAL_GPIO_WritePin>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)dma_buffer_1, 2);
 8001b62:	2202      	movs	r2, #2
 8001b64:	4931      	ldr	r1, [pc, #196]	; (8001c2c <main+0x15c>)
 8001b66:	4832      	ldr	r0, [pc, #200]	; (8001c30 <main+0x160>)
 8001b68:	f001 f922 	bl	8002db0 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)dma_buffer_2, 2);
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	4931      	ldr	r1, [pc, #196]	; (8001c34 <main+0x164>)
 8001b70:	4831      	ldr	r0, [pc, #196]	; (8001c38 <main+0x168>)
 8001b72:	f001 f91d 	bl	8002db0 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)dma_buffer_3, 2);
 8001b76:	2202      	movs	r2, #2
 8001b78:	4930      	ldr	r1, [pc, #192]	; (8001c3c <main+0x16c>)
 8001b7a:	4831      	ldr	r0, [pc, #196]	; (8001c40 <main+0x170>)
 8001b7c:	f001 f918 	bl	8002db0 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  execute_phase(1, 1400);
 8001b80:	f44f 61af 	mov.w	r1, #1400	; 0x578
 8001b84:	2001      	movs	r0, #1
 8001b86:	f7ff fedf 	bl	8001948 <execute_phase>
  HAL_Delay(1000);
 8001b8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b8e:	f001 f8a7 	bl	8002ce0 <HAL_Delay>
  __HAL_TIM_SET_COUNTER(&htim2,0);
 8001b92:	4b24      	ldr	r3, [pc, #144]	; (8001c24 <main+0x154>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2200      	movs	r2, #0
 8001b98:	625a      	str	r2, [r3, #36]	; 0x24
  tick = HAL_GetTick();
 8001b9a:	f001 f895 	bl	8002cc8 <HAL_GetTick>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	4a28      	ldr	r2, [pc, #160]	; (8001c44 <main+0x174>)
 8001ba2:	6013      	str	r3, [r2, #0]
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  update_encoder();
 8001ba4:	f7ff fa54 	bl	8001050 <update_encoder>
	  //encoder_updated = 359- ((int)((encoder*1.7578125))) %360 ;
	  encoder_updated = 359-((int)((encoder*1.7578125)))%360;
 8001ba8:	4b27      	ldr	r3, [pc, #156]	; (8001c48 <main+0x178>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7fe fc7d 	bl	80004ac <__aeabi_i2d>
 8001bb2:	f04f 0200 	mov.w	r2, #0
 8001bb6:	4b25      	ldr	r3, [pc, #148]	; (8001c4c <main+0x17c>)
 8001bb8:	f7fe fce2 	bl	8000580 <__aeabi_dmul>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4610      	mov	r0, r2
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	f7fe feee 	bl	80009a4 <__aeabi_d2iz>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	4a21      	ldr	r2, [pc, #132]	; (8001c50 <main+0x180>)
 8001bcc:	fb82 1203 	smull	r1, r2, r2, r3
 8001bd0:	441a      	add	r2, r3
 8001bd2:	1211      	asrs	r1, r2, #8
 8001bd4:	17da      	asrs	r2, r3, #31
 8001bd6:	1a8a      	subs	r2, r1, r2
 8001bd8:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001bdc:	fb01 f202 	mul.w	r2, r1, r2
 8001be0:	1a9a      	subs	r2, r3, r2
 8001be2:	f5c2 73b3 	rsb	r3, r2, #358	; 0x166
 8001be6:	3301      	adds	r3, #1
 8001be8:	4a1a      	ldr	r2, [pc, #104]	; (8001c54 <main+0x184>)
 8001bea:	6013      	str	r3, [r2, #0]
	  drive(speed2,(encoder_updated+270)%360);
 8001bec:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <main+0x188>)
 8001bee:	6818      	ldr	r0, [r3, #0]
 8001bf0:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <main+0x184>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8001bf8:	4a15      	ldr	r2, [pc, #84]	; (8001c50 <main+0x180>)
 8001bfa:	fb82 1203 	smull	r1, r2, r2, r3
 8001bfe:	441a      	add	r2, r3
 8001c00:	1211      	asrs	r1, r2, #8
 8001c02:	17da      	asrs	r2, r3, #31
 8001c04:	1a8a      	subs	r2, r1, r2
 8001c06:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001c0a:	fb01 f202 	mul.w	r2, r1, r2
 8001c0e:	1a9a      	subs	r2, r3, r2
 8001c10:	4611      	mov	r1, r2
 8001c12:	f7ff fb01 	bl	8001218 <drive>
	  update_encoder();
 8001c16:	e7c5      	b.n	8001ba4 <main+0xd4>
 8001c18:	20000344 	.word	0x20000344
 8001c1c:	200002b4 	.word	0x200002b4
 8001c20:	200002fc 	.word	0x200002fc
 8001c24:	2000026c 	.word	0x2000026c
 8001c28:	40020800 	.word	0x40020800
 8001c2c:	200003d0 	.word	0x200003d0
 8001c30:	2000002c 	.word	0x2000002c
 8001c34:	200003d8 	.word	0x200003d8
 8001c38:	20000074 	.word	0x20000074
 8001c3c:	200003e0 	.word	0x200003e0
 8001c40:	200000bc 	.word	0x200000bc
 8001c44:	2000042c 	.word	0x2000042c
 8001c48:	200003e8 	.word	0x200003e8
 8001c4c:	3ffc2000 	.word	0x3ffc2000
 8001c50:	b60b60b7 	.word	0xb60b60b7
 8001c54:	200003ec 	.word	0x200003ec
 8001c58:	20000000 	.word	0x20000000

08001c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b094      	sub	sp, #80	; 0x50
 8001c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c62:	f107 031c 	add.w	r3, r7, #28
 8001c66:	2234      	movs	r2, #52	; 0x34
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f004 fce4 	bl	8006638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c70:	f107 0308 	add.w	r3, r7, #8
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c80:	2300      	movs	r3, #0
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	4b29      	ldr	r3, [pc, #164]	; (8001d2c <SystemClock_Config+0xd0>)
 8001c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c88:	4a28      	ldr	r2, [pc, #160]	; (8001d2c <SystemClock_Config+0xd0>)
 8001c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c90:	4b26      	ldr	r3, [pc, #152]	; (8001d2c <SystemClock_Config+0xd0>)
 8001c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c98:	607b      	str	r3, [r7, #4]
 8001c9a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	603b      	str	r3, [r7, #0]
 8001ca0:	4b23      	ldr	r3, [pc, #140]	; (8001d30 <SystemClock_Config+0xd4>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ca8:	4a21      	ldr	r2, [pc, #132]	; (8001d30 <SystemClock_Config+0xd4>)
 8001caa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cae:	6013      	str	r3, [r2, #0]
 8001cb0:	4b1f      	ldr	r3, [pc, #124]	; (8001d30 <SystemClock_Config+0xd4>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cb8:	603b      	str	r3, [r7, #0]
 8001cba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cc4:	2310      	movs	r3, #16
 8001cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001cd0:	2308      	movs	r3, #8
 8001cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001cd4:	2354      	movs	r3, #84	; 0x54
 8001cd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ce4:	f107 031c 	add.w	r3, r7, #28
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f002 fdaf 	bl	800484c <HAL_RCC_OscConfig>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001cf4:	f000 fbe6 	bl	80024c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cf8:	230f      	movs	r3, #15
 8001cfa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d00:	2300      	movs	r3, #0
 8001d02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d0e:	f107 0308 	add.w	r3, r7, #8
 8001d12:	2102      	movs	r1, #2
 8001d14:	4618      	mov	r0, r3
 8001d16:	f002 fa4f 	bl	80041b8 <HAL_RCC_ClockConfig>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001d20:	f000 fbd0 	bl	80024c4 <Error_Handler>
  }
}
 8001d24:	bf00      	nop
 8001d26:	3750      	adds	r7, #80	; 0x50
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40007000 	.word	0x40007000

08001d34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d3a:	463b      	mov	r3, r7
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d46:	4b22      	ldr	r3, [pc, #136]	; (8001dd0 <MX_ADC1_Init+0x9c>)
 8001d48:	4a22      	ldr	r2, [pc, #136]	; (8001dd4 <MX_ADC1_Init+0xa0>)
 8001d4a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d4c:	4b20      	ldr	r3, [pc, #128]	; (8001dd0 <MX_ADC1_Init+0x9c>)
 8001d4e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d52:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d54:	4b1e      	ldr	r3, [pc, #120]	; (8001dd0 <MX_ADC1_Init+0x9c>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001d5a:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <MX_ADC1_Init+0x9c>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d60:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <MX_ADC1_Init+0x9c>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d66:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <MX_ADC1_Init+0x9c>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001d6e:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <MX_ADC1_Init+0x9c>)
 8001d70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d74:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001d76:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <MX_ADC1_Init+0x9c>)
 8001d78:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d7c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d7e:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <MX_ADC1_Init+0x9c>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001d84:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <MX_ADC1_Init+0x9c>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001d8a:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <MX_ADC1_Init+0x9c>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d92:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <MX_ADC1_Init+0x9c>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d98:	480d      	ldr	r0, [pc, #52]	; (8001dd0 <MX_ADC1_Init+0x9c>)
 8001d9a:	f000 ffc5 	bl	8002d28 <HAL_ADC_Init>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001da4:	f000 fb8e 	bl	80024c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001dac:	2301      	movs	r3, #1
 8001dae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001db0:	2301      	movs	r3, #1
 8001db2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001db4:	463b      	mov	r3, r7
 8001db6:	4619      	mov	r1, r3
 8001db8:	4805      	ldr	r0, [pc, #20]	; (8001dd0 <MX_ADC1_Init+0x9c>)
 8001dba:	f001 f91d 	bl	8002ff8 <HAL_ADC_ConfigChannel>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001dc4:	f000 fb7e 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001dc8:	bf00      	nop
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	2000002c 	.word	0x2000002c
 8001dd4:	40012000 	.word	0x40012000

08001dd8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001dde:	463b      	mov	r3, r7
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001dea:	4b22      	ldr	r3, [pc, #136]	; (8001e74 <MX_ADC2_Init+0x9c>)
 8001dec:	4a22      	ldr	r2, [pc, #136]	; (8001e78 <MX_ADC2_Init+0xa0>)
 8001dee:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001df0:	4b20      	ldr	r3, [pc, #128]	; (8001e74 <MX_ADC2_Init+0x9c>)
 8001df2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001df6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001df8:	4b1e      	ldr	r3, [pc, #120]	; (8001e74 <MX_ADC2_Init+0x9c>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001dfe:	4b1d      	ldr	r3, [pc, #116]	; (8001e74 <MX_ADC2_Init+0x9c>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001e04:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <MX_ADC2_Init+0x9c>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001e0a:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <MX_ADC2_Init+0x9c>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001e12:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <MX_ADC2_Init+0x9c>)
 8001e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e18:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001e1a:	4b16      	ldr	r3, [pc, #88]	; (8001e74 <MX_ADC2_Init+0x9c>)
 8001e1c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e20:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e22:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <MX_ADC2_Init+0x9c>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001e28:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <MX_ADC2_Init+0x9c>)
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001e2e:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <MX_ADC2_Init+0x9c>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e36:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <MX_ADC2_Init+0x9c>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001e3c:	480d      	ldr	r0, [pc, #52]	; (8001e74 <MX_ADC2_Init+0x9c>)
 8001e3e:	f000 ff73 	bl	8002d28 <HAL_ADC_Init>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8001e48:	f000 fb3c 	bl	80024c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e50:	2301      	movs	r3, #1
 8001e52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001e54:	2301      	movs	r3, #1
 8001e56:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001e58:	463b      	mov	r3, r7
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4805      	ldr	r0, [pc, #20]	; (8001e74 <MX_ADC2_Init+0x9c>)
 8001e5e:	f001 f8cb 	bl	8002ff8 <HAL_ADC_ConfigChannel>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8001e68:	f000 fb2c 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001e6c:	bf00      	nop
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20000074 	.word	0x20000074
 8001e78:	40012100 	.word	0x40012100

08001e7c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e82:	463b      	mov	r3, r7
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001e8e:	4b22      	ldr	r3, [pc, #136]	; (8001f18 <MX_ADC3_Init+0x9c>)
 8001e90:	4a22      	ldr	r2, [pc, #136]	; (8001f1c <MX_ADC3_Init+0xa0>)
 8001e92:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e94:	4b20      	ldr	r3, [pc, #128]	; (8001f18 <MX_ADC3_Init+0x9c>)
 8001e96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e9a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001e9c:	4b1e      	ldr	r3, [pc, #120]	; (8001f18 <MX_ADC3_Init+0x9c>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001ea2:	4b1d      	ldr	r3, [pc, #116]	; (8001f18 <MX_ADC3_Init+0x9c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001ea8:	4b1b      	ldr	r3, [pc, #108]	; (8001f18 <MX_ADC3_Init+0x9c>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001eae:	4b1a      	ldr	r3, [pc, #104]	; (8001f18 <MX_ADC3_Init+0x9c>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001eb6:	4b18      	ldr	r3, [pc, #96]	; (8001f18 <MX_ADC3_Init+0x9c>)
 8001eb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ebc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001ebe:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <MX_ADC3_Init+0x9c>)
 8001ec0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ec4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ec6:	4b14      	ldr	r3, [pc, #80]	; (8001f18 <MX_ADC3_Init+0x9c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001ecc:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <MX_ADC3_Init+0x9c>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001ed2:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <MX_ADC3_Init+0x9c>)
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001eda:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <MX_ADC3_Init+0x9c>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001ee0:	480d      	ldr	r0, [pc, #52]	; (8001f18 <MX_ADC3_Init+0x9c>)
 8001ee2:	f000 ff21 	bl	8002d28 <HAL_ADC_Init>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 8001eec:	f000 faea 	bl	80024c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001ef0:	230a      	movs	r3, #10
 8001ef2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001efc:	463b      	mov	r3, r7
 8001efe:	4619      	mov	r1, r3
 8001f00:	4805      	ldr	r0, [pc, #20]	; (8001f18 <MX_ADC3_Init+0x9c>)
 8001f02:	f001 f879 	bl	8002ff8 <HAL_ADC_ConfigChannel>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8001f0c:	f000 fada 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001f10:	bf00      	nop
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	200000bc 	.word	0x200000bc
 8001f1c:	40012200 	.word	0x40012200

08001f20 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f26:	f107 0308 	add.w	r3, r7, #8
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	605a      	str	r2, [r3, #4]
 8001f30:	609a      	str	r2, [r3, #8]
 8001f32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f34:	463b      	mov	r3, r7
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f3c:	4b1e      	ldr	r3, [pc, #120]	; (8001fb8 <MX_TIM1_Init+0x98>)
 8001f3e:	4a1f      	ldr	r2, [pc, #124]	; (8001fbc <MX_TIM1_Init+0x9c>)
 8001f40:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 42-1;
 8001f42:	4b1d      	ldr	r3, [pc, #116]	; (8001fb8 <MX_TIM1_Init+0x98>)
 8001f44:	2229      	movs	r2, #41	; 0x29
 8001f46:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f48:	4b1b      	ldr	r3, [pc, #108]	; (8001fb8 <MX_TIM1_Init+0x98>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001f4e:	4b1a      	ldr	r3, [pc, #104]	; (8001fb8 <MX_TIM1_Init+0x98>)
 8001f50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f54:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f56:	4b18      	ldr	r3, [pc, #96]	; (8001fb8 <MX_TIM1_Init+0x98>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f5c:	4b16      	ldr	r3, [pc, #88]	; (8001fb8 <MX_TIM1_Init+0x98>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f62:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <MX_TIM1_Init+0x98>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f68:	4813      	ldr	r0, [pc, #76]	; (8001fb8 <MX_TIM1_Init+0x98>)
 8001f6a:	f002 ff0d 	bl	8004d88 <HAL_TIM_Base_Init>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001f74:	f000 faa6 	bl	80024c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f7e:	f107 0308 	add.w	r3, r7, #8
 8001f82:	4619      	mov	r1, r3
 8001f84:	480c      	ldr	r0, [pc, #48]	; (8001fb8 <MX_TIM1_Init+0x98>)
 8001f86:	f003 fbd7 	bl	8005738 <HAL_TIM_ConfigClockSource>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001f90:	f000 fa98 	bl	80024c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f94:	2300      	movs	r3, #0
 8001f96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f9c:	463b      	mov	r3, r7
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4805      	ldr	r0, [pc, #20]	; (8001fb8 <MX_TIM1_Init+0x98>)
 8001fa2:	f003 ffd3 	bl	8005f4c <HAL_TIMEx_MasterConfigSynchronization>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001fac:	f000 fa8a 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001fb0:	bf00      	nop
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	20000224 	.word	0x20000224
 8001fbc:	40010000 	.word	0x40010000

08001fc0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08c      	sub	sp, #48	; 0x30
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fc6:	f107 030c 	add.w	r3, r7, #12
 8001fca:	2224      	movs	r2, #36	; 0x24
 8001fcc:	2100      	movs	r1, #0
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f004 fb32 	bl	8006638 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fd4:	1d3b      	adds	r3, r7, #4
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fdc:	4b21      	ldr	r3, [pc, #132]	; (8002064 <MX_TIM2_Init+0xa4>)
 8001fde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fe2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001fe4:	4b1f      	ldr	r3, [pc, #124]	; (8002064 <MX_TIM2_Init+0xa4>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fea:	4b1e      	ldr	r3, [pc, #120]	; (8002064 <MX_TIM2_Init+0xa4>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001ff0:	4b1c      	ldr	r3, [pc, #112]	; (8002064 <MX_TIM2_Init+0xa4>)
 8001ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff8:	4b1a      	ldr	r3, [pc, #104]	; (8002064 <MX_TIM2_Init+0xa4>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ffe:	4b19      	ldr	r3, [pc, #100]	; (8002064 <MX_TIM2_Init+0xa4>)
 8002000:	2280      	movs	r2, #128	; 0x80
 8002002:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002004:	2303      	movs	r3, #3
 8002006:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002008:	2300      	movs	r3, #0
 800200a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800200c:	2301      	movs	r3, #1
 800200e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002010:	2300      	movs	r3, #0
 8002012:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002018:	2300      	movs	r3, #0
 800201a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800201c:	2301      	movs	r3, #1
 800201e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002020:	2300      	movs	r3, #0
 8002022:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002028:	f107 030c 	add.w	r3, r7, #12
 800202c:	4619      	mov	r1, r3
 800202e:	480d      	ldr	r0, [pc, #52]	; (8002064 <MX_TIM2_Init+0xa4>)
 8002030:	f003 f884 	bl	800513c <HAL_TIM_Encoder_Init>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800203a:	f000 fa43 	bl	80024c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800203e:	2300      	movs	r3, #0
 8002040:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002042:	2300      	movs	r3, #0
 8002044:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002046:	1d3b      	adds	r3, r7, #4
 8002048:	4619      	mov	r1, r3
 800204a:	4806      	ldr	r0, [pc, #24]	; (8002064 <MX_TIM2_Init+0xa4>)
 800204c:	f003 ff7e 	bl	8005f4c <HAL_TIMEx_MasterConfigSynchronization>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002056:	f000 fa35 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800205a:	bf00      	nop
 800205c:	3730      	adds	r7, #48	; 0x30
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	2000026c 	.word	0x2000026c

08002068 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08e      	sub	sp, #56	; 0x38
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800206e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	605a      	str	r2, [r3, #4]
 8002078:	609a      	str	r2, [r3, #8]
 800207a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800207c:	f107 0320 	add.w	r3, r7, #32
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002086:	1d3b      	adds	r3, r7, #4
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
 8002094:	615a      	str	r2, [r3, #20]
 8002096:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002098:	4b37      	ldr	r3, [pc, #220]	; (8002178 <MX_TIM3_Init+0x110>)
 800209a:	4a38      	ldr	r2, [pc, #224]	; (800217c <MX_TIM3_Init+0x114>)
 800209c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800209e:	4b36      	ldr	r3, [pc, #216]	; (8002178 <MX_TIM3_Init+0x110>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80020a4:	4b34      	ldr	r3, [pc, #208]	; (8002178 <MX_TIM3_Init+0x110>)
 80020a6:	2220      	movs	r2, #32
 80020a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2100;
 80020aa:	4b33      	ldr	r3, [pc, #204]	; (8002178 <MX_TIM3_Init+0x110>)
 80020ac:	f640 0234 	movw	r2, #2100	; 0x834
 80020b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b2:	4b31      	ldr	r3, [pc, #196]	; (8002178 <MX_TIM3_Init+0x110>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b8:	4b2f      	ldr	r3, [pc, #188]	; (8002178 <MX_TIM3_Init+0x110>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020be:	482e      	ldr	r0, [pc, #184]	; (8002178 <MX_TIM3_Init+0x110>)
 80020c0:	f002 fe62 	bl	8004d88 <HAL_TIM_Base_Init>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80020ca:	f000 f9fb 	bl	80024c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020d2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020d8:	4619      	mov	r1, r3
 80020da:	4827      	ldr	r0, [pc, #156]	; (8002178 <MX_TIM3_Init+0x110>)
 80020dc:	f003 fb2c 	bl	8005738 <HAL_TIM_ConfigClockSource>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80020e6:	f000 f9ed 	bl	80024c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80020ea:	4823      	ldr	r0, [pc, #140]	; (8002178 <MX_TIM3_Init+0x110>)
 80020ec:	f002 ff04 	bl	8004ef8 <HAL_TIM_PWM_Init>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80020f6:	f000 f9e5 	bl	80024c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80020fa:	2320      	movs	r3, #32
 80020fc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020fe:	2300      	movs	r3, #0
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002102:	f107 0320 	add.w	r3, r7, #32
 8002106:	4619      	mov	r1, r3
 8002108:	481b      	ldr	r0, [pc, #108]	; (8002178 <MX_TIM3_Init+0x110>)
 800210a:	f003 ff1f 	bl	8005f4c <HAL_TIMEx_MasterConfigSynchronization>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002114:	f000 f9d6 	bl	80024c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002118:	2360      	movs	r3, #96	; 0x60
 800211a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800211c:	2300      	movs	r3, #0
 800211e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002120:	2300      	movs	r3, #0
 8002122:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002124:	2304      	movs	r3, #4
 8002126:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002128:	1d3b      	adds	r3, r7, #4
 800212a:	2200      	movs	r2, #0
 800212c:	4619      	mov	r1, r3
 800212e:	4812      	ldr	r0, [pc, #72]	; (8002178 <MX_TIM3_Init+0x110>)
 8002130:	f003 fa40 	bl	80055b4 <HAL_TIM_PWM_ConfigChannel>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800213a:	f000 f9c3 	bl	80024c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800213e:	1d3b      	adds	r3, r7, #4
 8002140:	2204      	movs	r2, #4
 8002142:	4619      	mov	r1, r3
 8002144:	480c      	ldr	r0, [pc, #48]	; (8002178 <MX_TIM3_Init+0x110>)
 8002146:	f003 fa35 	bl	80055b4 <HAL_TIM_PWM_ConfigChannel>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002150:	f000 f9b8 	bl	80024c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002154:	1d3b      	adds	r3, r7, #4
 8002156:	2208      	movs	r2, #8
 8002158:	4619      	mov	r1, r3
 800215a:	4807      	ldr	r0, [pc, #28]	; (8002178 <MX_TIM3_Init+0x110>)
 800215c:	f003 fa2a 	bl	80055b4 <HAL_TIM_PWM_ConfigChannel>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8002166:	f000 f9ad 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800216a:	4803      	ldr	r0, [pc, #12]	; (8002178 <MX_TIM3_Init+0x110>)
 800216c:	f000 fbf0 	bl	8002950 <HAL_TIM_MspPostInit>

}
 8002170:	bf00      	nop
 8002172:	3738      	adds	r7, #56	; 0x38
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	200002b4 	.word	0x200002b4
 800217c:	40000400 	.word	0x40000400

08002180 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b08e      	sub	sp, #56	; 0x38
 8002184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002186:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	605a      	str	r2, [r3, #4]
 8002190:	609a      	str	r2, [r3, #8]
 8002192:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002194:	f107 0320 	add.w	r3, r7, #32
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800219e:	1d3b      	adds	r3, r7, #4
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	611a      	str	r2, [r3, #16]
 80021ac:	615a      	str	r2, [r3, #20]
 80021ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021b0:	4b37      	ldr	r3, [pc, #220]	; (8002290 <MX_TIM4_Init+0x110>)
 80021b2:	4a38      	ldr	r2, [pc, #224]	; (8002294 <MX_TIM4_Init+0x114>)
 80021b4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80021b6:	4b36      	ldr	r3, [pc, #216]	; (8002290 <MX_TIM4_Init+0x110>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80021bc:	4b34      	ldr	r3, [pc, #208]	; (8002290 <MX_TIM4_Init+0x110>)
 80021be:	2220      	movs	r2, #32
 80021c0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2100;
 80021c2:	4b33      	ldr	r3, [pc, #204]	; (8002290 <MX_TIM4_Init+0x110>)
 80021c4:	f640 0234 	movw	r2, #2100	; 0x834
 80021c8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ca:	4b31      	ldr	r3, [pc, #196]	; (8002290 <MX_TIM4_Init+0x110>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021d0:	4b2f      	ldr	r3, [pc, #188]	; (8002290 <MX_TIM4_Init+0x110>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80021d6:	482e      	ldr	r0, [pc, #184]	; (8002290 <MX_TIM4_Init+0x110>)
 80021d8:	f002 fdd6 	bl	8004d88 <HAL_TIM_Base_Init>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80021e2:	f000 f96f 	bl	80024c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80021ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021f0:	4619      	mov	r1, r3
 80021f2:	4827      	ldr	r0, [pc, #156]	; (8002290 <MX_TIM4_Init+0x110>)
 80021f4:	f003 faa0 	bl	8005738 <HAL_TIM_ConfigClockSource>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80021fe:	f000 f961 	bl	80024c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002202:	4823      	ldr	r0, [pc, #140]	; (8002290 <MX_TIM4_Init+0x110>)
 8002204:	f002 fe78 	bl	8004ef8 <HAL_TIM_PWM_Init>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800220e:	f000 f959 	bl	80024c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002212:	2300      	movs	r3, #0
 8002214:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002216:	2300      	movs	r3, #0
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800221a:	f107 0320 	add.w	r3, r7, #32
 800221e:	4619      	mov	r1, r3
 8002220:	481b      	ldr	r0, [pc, #108]	; (8002290 <MX_TIM4_Init+0x110>)
 8002222:	f003 fe93 	bl	8005f4c <HAL_TIMEx_MasterConfigSynchronization>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800222c:	f000 f94a 	bl	80024c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002230:	2360      	movs	r3, #96	; 0x60
 8002232:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002234:	2300      	movs	r3, #0
 8002236:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002238:	2300      	movs	r3, #0
 800223a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800223c:	2304      	movs	r3, #4
 800223e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002240:	1d3b      	adds	r3, r7, #4
 8002242:	2200      	movs	r2, #0
 8002244:	4619      	mov	r1, r3
 8002246:	4812      	ldr	r0, [pc, #72]	; (8002290 <MX_TIM4_Init+0x110>)
 8002248:	f003 f9b4 	bl	80055b4 <HAL_TIM_PWM_ConfigChannel>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002252:	f000 f937 	bl	80024c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002256:	1d3b      	adds	r3, r7, #4
 8002258:	2204      	movs	r2, #4
 800225a:	4619      	mov	r1, r3
 800225c:	480c      	ldr	r0, [pc, #48]	; (8002290 <MX_TIM4_Init+0x110>)
 800225e:	f003 f9a9 	bl	80055b4 <HAL_TIM_PWM_ConfigChannel>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8002268:	f000 f92c 	bl	80024c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800226c:	1d3b      	adds	r3, r7, #4
 800226e:	2208      	movs	r2, #8
 8002270:	4619      	mov	r1, r3
 8002272:	4807      	ldr	r0, [pc, #28]	; (8002290 <MX_TIM4_Init+0x110>)
 8002274:	f003 f99e 	bl	80055b4 <HAL_TIM_PWM_ConfigChannel>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 800227e:	f000 f921 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002282:	4803      	ldr	r0, [pc, #12]	; (8002290 <MX_TIM4_Init+0x110>)
 8002284:	f000 fb64 	bl	8002950 <HAL_TIM_MspPostInit>

}
 8002288:	bf00      	nop
 800228a:	3738      	adds	r7, #56	; 0x38
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	200002fc 	.word	0x200002fc
 8002294:	40000800 	.word	0x40000800

08002298 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800229e:	463b      	mov	r3, r7
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80022aa:	4b16      	ldr	r3, [pc, #88]	; (8002304 <MX_TIM12_Init+0x6c>)
 80022ac:	4a16      	ldr	r2, [pc, #88]	; (8002308 <MX_TIM12_Init+0x70>)
 80022ae:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 42-1;
 80022b0:	4b14      	ldr	r3, [pc, #80]	; (8002304 <MX_TIM12_Init+0x6c>)
 80022b2:	2229      	movs	r2, #41	; 0x29
 80022b4:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b6:	4b13      	ldr	r3, [pc, #76]	; (8002304 <MX_TIM12_Init+0x6c>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80022bc:	4b11      	ldr	r3, [pc, #68]	; (8002304 <MX_TIM12_Init+0x6c>)
 80022be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022c2:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022c4:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <MX_TIM12_Init+0x6c>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ca:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <MX_TIM12_Init+0x6c>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80022d0:	480c      	ldr	r0, [pc, #48]	; (8002304 <MX_TIM12_Init+0x6c>)
 80022d2:	f002 fd59 	bl	8004d88 <HAL_TIM_Base_Init>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 80022dc:	f000 f8f2 	bl	80024c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022e4:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80022e6:	463b      	mov	r3, r7
 80022e8:	4619      	mov	r1, r3
 80022ea:	4806      	ldr	r0, [pc, #24]	; (8002304 <MX_TIM12_Init+0x6c>)
 80022ec:	f003 fa24 	bl	8005738 <HAL_TIM_ConfigClockSource>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 80022f6:	f000 f8e5 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80022fa:	bf00      	nop
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000344 	.word	0x20000344
 8002308:	40001800 	.word	0x40001800

0800230c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002310:	4b11      	ldr	r3, [pc, #68]	; (8002358 <MX_USART2_UART_Init+0x4c>)
 8002312:	4a12      	ldr	r2, [pc, #72]	; (800235c <MX_USART2_UART_Init+0x50>)
 8002314:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002316:	4b10      	ldr	r3, [pc, #64]	; (8002358 <MX_USART2_UART_Init+0x4c>)
 8002318:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800231c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800231e:	4b0e      	ldr	r3, [pc, #56]	; (8002358 <MX_USART2_UART_Init+0x4c>)
 8002320:	2200      	movs	r2, #0
 8002322:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002324:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <MX_USART2_UART_Init+0x4c>)
 8002326:	2200      	movs	r2, #0
 8002328:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800232a:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <MX_USART2_UART_Init+0x4c>)
 800232c:	2200      	movs	r2, #0
 800232e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002330:	4b09      	ldr	r3, [pc, #36]	; (8002358 <MX_USART2_UART_Init+0x4c>)
 8002332:	220c      	movs	r2, #12
 8002334:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002336:	4b08      	ldr	r3, [pc, #32]	; (8002358 <MX_USART2_UART_Init+0x4c>)
 8002338:	2200      	movs	r2, #0
 800233a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800233c:	4b06      	ldr	r3, [pc, #24]	; (8002358 <MX_USART2_UART_Init+0x4c>)
 800233e:	2200      	movs	r2, #0
 8002340:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002342:	4805      	ldr	r0, [pc, #20]	; (8002358 <MX_USART2_UART_Init+0x4c>)
 8002344:	f003 fe92 	bl	800606c <HAL_UART_Init>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800234e:	f000 f8b9 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	2000038c 	.word	0x2000038c
 800235c:	40004400 	.word	0x40004400

08002360 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	607b      	str	r3, [r7, #4]
 800236a:	4b14      	ldr	r3, [pc, #80]	; (80023bc <MX_DMA_Init+0x5c>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	4a13      	ldr	r2, [pc, #76]	; (80023bc <MX_DMA_Init+0x5c>)
 8002370:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002374:	6313      	str	r3, [r2, #48]	; 0x30
 8002376:	4b11      	ldr	r3, [pc, #68]	; (80023bc <MX_DMA_Init+0x5c>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800237e:	607b      	str	r3, [r7, #4]
 8002380:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002382:	2200      	movs	r2, #0
 8002384:	2100      	movs	r1, #0
 8002386:	2038      	movs	r0, #56	; 0x38
 8002388:	f001 f9c1 	bl	800370e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800238c:	2038      	movs	r0, #56	; 0x38
 800238e:	f001 f9da 	bl	8003746 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002392:	2200      	movs	r2, #0
 8002394:	2100      	movs	r1, #0
 8002396:	2039      	movs	r0, #57	; 0x39
 8002398:	f001 f9b9 	bl	800370e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800239c:	2039      	movs	r0, #57	; 0x39
 800239e:	f001 f9d2 	bl	8003746 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80023a2:	2200      	movs	r2, #0
 80023a4:	2100      	movs	r1, #0
 80023a6:	203a      	movs	r0, #58	; 0x3a
 80023a8:	f001 f9b1 	bl	800370e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80023ac:	203a      	movs	r0, #58	; 0x3a
 80023ae:	f001 f9ca 	bl	8003746 <HAL_NVIC_EnableIRQ>

}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40023800 	.word	0x40023800

080023c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08a      	sub	sp, #40	; 0x28
 80023c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c6:	f107 0314 	add.w	r3, r7, #20
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	605a      	str	r2, [r3, #4]
 80023d0:	609a      	str	r2, [r3, #8]
 80023d2:	60da      	str	r2, [r3, #12]
 80023d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	613b      	str	r3, [r7, #16]
 80023da:	4b37      	ldr	r3, [pc, #220]	; (80024b8 <MX_GPIO_Init+0xf8>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	4a36      	ldr	r2, [pc, #216]	; (80024b8 <MX_GPIO_Init+0xf8>)
 80023e0:	f043 0304 	orr.w	r3, r3, #4
 80023e4:	6313      	str	r3, [r2, #48]	; 0x30
 80023e6:	4b34      	ldr	r3, [pc, #208]	; (80024b8 <MX_GPIO_Init+0xf8>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	f003 0304 	and.w	r3, r3, #4
 80023ee:	613b      	str	r3, [r7, #16]
 80023f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	4b30      	ldr	r3, [pc, #192]	; (80024b8 <MX_GPIO_Init+0xf8>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	4a2f      	ldr	r2, [pc, #188]	; (80024b8 <MX_GPIO_Init+0xf8>)
 80023fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002400:	6313      	str	r3, [r2, #48]	; 0x30
 8002402:	4b2d      	ldr	r3, [pc, #180]	; (80024b8 <MX_GPIO_Init+0xf8>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	60bb      	str	r3, [r7, #8]
 8002412:	4b29      	ldr	r3, [pc, #164]	; (80024b8 <MX_GPIO_Init+0xf8>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	4a28      	ldr	r2, [pc, #160]	; (80024b8 <MX_GPIO_Init+0xf8>)
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	6313      	str	r3, [r2, #48]	; 0x30
 800241e:	4b26      	ldr	r3, [pc, #152]	; (80024b8 <MX_GPIO_Init+0xf8>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	60bb      	str	r3, [r7, #8]
 8002428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	607b      	str	r3, [r7, #4]
 800242e:	4b22      	ldr	r3, [pc, #136]	; (80024b8 <MX_GPIO_Init+0xf8>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	4a21      	ldr	r2, [pc, #132]	; (80024b8 <MX_GPIO_Init+0xf8>)
 8002434:	f043 0302 	orr.w	r3, r3, #2
 8002438:	6313      	str	r3, [r2, #48]	; 0x30
 800243a:	4b1f      	ldr	r3, [pc, #124]	; (80024b8 <MX_GPIO_Init+0xf8>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	607b      	str	r3, [r7, #4]
 8002444:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8002446:	2200      	movs	r2, #0
 8002448:	2130      	movs	r1, #48	; 0x30
 800244a:	481c      	ldr	r0, [pc, #112]	; (80024bc <MX_GPIO_Init+0xfc>)
 800244c:	f001 fe9a 	bl	8004184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8002450:	2200      	movs	r2, #0
 8002452:	2110      	movs	r1, #16
 8002454:	481a      	ldr	r0, [pc, #104]	; (80024c0 <MX_GPIO_Init+0x100>)
 8002456:	f001 fe95 	bl	8004184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800245a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800245e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002460:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800246a:	f107 0314 	add.w	r3, r7, #20
 800246e:	4619      	mov	r1, r3
 8002470:	4813      	ldr	r0, [pc, #76]	; (80024c0 <MX_GPIO_Init+0x100>)
 8002472:	f001 fcf3 	bl	8003e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8002476:	2330      	movs	r3, #48	; 0x30
 8002478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800247a:	2301      	movs	r3, #1
 800247c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247e:	2300      	movs	r3, #0
 8002480:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002482:	2300      	movs	r3, #0
 8002484:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002486:	f107 0314 	add.w	r3, r7, #20
 800248a:	4619      	mov	r1, r3
 800248c:	480b      	ldr	r0, [pc, #44]	; (80024bc <MX_GPIO_Init+0xfc>)
 800248e:	f001 fce5 	bl	8003e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002492:	2310      	movs	r3, #16
 8002494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002496:	2301      	movs	r3, #1
 8002498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249e:	2300      	movs	r3, #0
 80024a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024a2:	f107 0314 	add.w	r3, r7, #20
 80024a6:	4619      	mov	r1, r3
 80024a8:	4805      	ldr	r0, [pc, #20]	; (80024c0 <MX_GPIO_Init+0x100>)
 80024aa:	f001 fcd7 	bl	8003e5c <HAL_GPIO_Init>

}
 80024ae:	bf00      	nop
 80024b0:	3728      	adds	r7, #40	; 0x28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40023800 	.word	0x40023800
 80024bc:	40020000 	.word	0x40020000
 80024c0:	40020800 	.word	0x40020800

080024c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024c8:	b672      	cpsid	i
}
 80024ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024cc:	e7fe      	b.n	80024cc <Error_Handler+0x8>
	...

080024d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	607b      	str	r3, [r7, #4]
 80024da:	4b10      	ldr	r3, [pc, #64]	; (800251c <HAL_MspInit+0x4c>)
 80024dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024de:	4a0f      	ldr	r2, [pc, #60]	; (800251c <HAL_MspInit+0x4c>)
 80024e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024e4:	6453      	str	r3, [r2, #68]	; 0x44
 80024e6:	4b0d      	ldr	r3, [pc, #52]	; (800251c <HAL_MspInit+0x4c>)
 80024e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ee:	607b      	str	r3, [r7, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	603b      	str	r3, [r7, #0]
 80024f6:	4b09      	ldr	r3, [pc, #36]	; (800251c <HAL_MspInit+0x4c>)
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	4a08      	ldr	r2, [pc, #32]	; (800251c <HAL_MspInit+0x4c>)
 80024fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002500:	6413      	str	r3, [r2, #64]	; 0x40
 8002502:	4b06      	ldr	r3, [pc, #24]	; (800251c <HAL_MspInit+0x4c>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250a:	603b      	str	r3, [r7, #0]
 800250c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800250e:	2007      	movs	r0, #7
 8002510:	f001 f8f2 	bl	80036f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002514:	bf00      	nop
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40023800 	.word	0x40023800

08002520 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08e      	sub	sp, #56	; 0x38
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	60da      	str	r2, [r3, #12]
 8002536:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a8f      	ldr	r2, [pc, #572]	; (800277c <HAL_ADC_MspInit+0x25c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d159      	bne.n	80025f6 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	623b      	str	r3, [r7, #32]
 8002546:	4b8e      	ldr	r3, [pc, #568]	; (8002780 <HAL_ADC_MspInit+0x260>)
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254a:	4a8d      	ldr	r2, [pc, #564]	; (8002780 <HAL_ADC_MspInit+0x260>)
 800254c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002550:	6453      	str	r3, [r2, #68]	; 0x44
 8002552:	4b8b      	ldr	r3, [pc, #556]	; (8002780 <HAL_ADC_MspInit+0x260>)
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255a:	623b      	str	r3, [r7, #32]
 800255c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
 8002562:	4b87      	ldr	r3, [pc, #540]	; (8002780 <HAL_ADC_MspInit+0x260>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	4a86      	ldr	r2, [pc, #536]	; (8002780 <HAL_ADC_MspInit+0x260>)
 8002568:	f043 0301 	orr.w	r3, r3, #1
 800256c:	6313      	str	r3, [r2, #48]	; 0x30
 800256e:	4b84      	ldr	r3, [pc, #528]	; (8002780 <HAL_ADC_MspInit+0x260>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	61fb      	str	r3, [r7, #28]
 8002578:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800257a:	2301      	movs	r3, #1
 800257c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800257e:	2303      	movs	r3, #3
 8002580:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800258a:	4619      	mov	r1, r3
 800258c:	487d      	ldr	r0, [pc, #500]	; (8002784 <HAL_ADC_MspInit+0x264>)
 800258e:	f001 fc65 	bl	8003e5c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002592:	4b7d      	ldr	r3, [pc, #500]	; (8002788 <HAL_ADC_MspInit+0x268>)
 8002594:	4a7d      	ldr	r2, [pc, #500]	; (800278c <HAL_ADC_MspInit+0x26c>)
 8002596:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002598:	4b7b      	ldr	r3, [pc, #492]	; (8002788 <HAL_ADC_MspInit+0x268>)
 800259a:	2200      	movs	r2, #0
 800259c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800259e:	4b7a      	ldr	r3, [pc, #488]	; (8002788 <HAL_ADC_MspInit+0x268>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80025a4:	4b78      	ldr	r3, [pc, #480]	; (8002788 <HAL_ADC_MspInit+0x268>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80025aa:	4b77      	ldr	r3, [pc, #476]	; (8002788 <HAL_ADC_MspInit+0x268>)
 80025ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025b0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80025b2:	4b75      	ldr	r3, [pc, #468]	; (8002788 <HAL_ADC_MspInit+0x268>)
 80025b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025b8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80025ba:	4b73      	ldr	r3, [pc, #460]	; (8002788 <HAL_ADC_MspInit+0x268>)
 80025bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025c0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80025c2:	4b71      	ldr	r3, [pc, #452]	; (8002788 <HAL_ADC_MspInit+0x268>)
 80025c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80025ca:	4b6f      	ldr	r3, [pc, #444]	; (8002788 <HAL_ADC_MspInit+0x268>)
 80025cc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80025d0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025d2:	4b6d      	ldr	r3, [pc, #436]	; (8002788 <HAL_ADC_MspInit+0x268>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80025d8:	486b      	ldr	r0, [pc, #428]	; (8002788 <HAL_ADC_MspInit+0x268>)
 80025da:	f001 f8cf 	bl	800377c <HAL_DMA_Init>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80025e4:	f7ff ff6e 	bl	80024c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a67      	ldr	r2, [pc, #412]	; (8002788 <HAL_ADC_MspInit+0x268>)
 80025ec:	639a      	str	r2, [r3, #56]	; 0x38
 80025ee:	4a66      	ldr	r2, [pc, #408]	; (8002788 <HAL_ADC_MspInit+0x268>)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80025f4:	e0be      	b.n	8002774 <HAL_ADC_MspInit+0x254>
  else if(hadc->Instance==ADC2)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a65      	ldr	r2, [pc, #404]	; (8002790 <HAL_ADC_MspInit+0x270>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d15a      	bne.n	80026b6 <HAL_ADC_MspInit+0x196>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002600:	2300      	movs	r3, #0
 8002602:	61bb      	str	r3, [r7, #24]
 8002604:	4b5e      	ldr	r3, [pc, #376]	; (8002780 <HAL_ADC_MspInit+0x260>)
 8002606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002608:	4a5d      	ldr	r2, [pc, #372]	; (8002780 <HAL_ADC_MspInit+0x260>)
 800260a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800260e:	6453      	str	r3, [r2, #68]	; 0x44
 8002610:	4b5b      	ldr	r3, [pc, #364]	; (8002780 <HAL_ADC_MspInit+0x260>)
 8002612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002614:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002618:	61bb      	str	r3, [r7, #24]
 800261a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
 8002620:	4b57      	ldr	r3, [pc, #348]	; (8002780 <HAL_ADC_MspInit+0x260>)
 8002622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002624:	4a56      	ldr	r2, [pc, #344]	; (8002780 <HAL_ADC_MspInit+0x260>)
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	6313      	str	r3, [r2, #48]	; 0x30
 800262c:	4b54      	ldr	r3, [pc, #336]	; (8002780 <HAL_ADC_MspInit+0x260>)
 800262e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	617b      	str	r3, [r7, #20]
 8002636:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002638:	2302      	movs	r3, #2
 800263a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800263c:	2303      	movs	r3, #3
 800263e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002648:	4619      	mov	r1, r3
 800264a:	484e      	ldr	r0, [pc, #312]	; (8002784 <HAL_ADC_MspInit+0x264>)
 800264c:	f001 fc06 	bl	8003e5c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8002650:	4b50      	ldr	r3, [pc, #320]	; (8002794 <HAL_ADC_MspInit+0x274>)
 8002652:	4a51      	ldr	r2, [pc, #324]	; (8002798 <HAL_ADC_MspInit+0x278>)
 8002654:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8002656:	4b4f      	ldr	r3, [pc, #316]	; (8002794 <HAL_ADC_MspInit+0x274>)
 8002658:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800265c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800265e:	4b4d      	ldr	r3, [pc, #308]	; (8002794 <HAL_ADC_MspInit+0x274>)
 8002660:	2200      	movs	r2, #0
 8002662:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002664:	4b4b      	ldr	r3, [pc, #300]	; (8002794 <HAL_ADC_MspInit+0x274>)
 8002666:	2200      	movs	r2, #0
 8002668:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800266a:	4b4a      	ldr	r3, [pc, #296]	; (8002794 <HAL_ADC_MspInit+0x274>)
 800266c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002670:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002672:	4b48      	ldr	r3, [pc, #288]	; (8002794 <HAL_ADC_MspInit+0x274>)
 8002674:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002678:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800267a:	4b46      	ldr	r3, [pc, #280]	; (8002794 <HAL_ADC_MspInit+0x274>)
 800267c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002680:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002682:	4b44      	ldr	r3, [pc, #272]	; (8002794 <HAL_ADC_MspInit+0x274>)
 8002684:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002688:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800268a:	4b42      	ldr	r3, [pc, #264]	; (8002794 <HAL_ADC_MspInit+0x274>)
 800268c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002690:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002692:	4b40      	ldr	r3, [pc, #256]	; (8002794 <HAL_ADC_MspInit+0x274>)
 8002694:	2200      	movs	r2, #0
 8002696:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002698:	483e      	ldr	r0, [pc, #248]	; (8002794 <HAL_ADC_MspInit+0x274>)
 800269a:	f001 f86f 	bl	800377c <HAL_DMA_Init>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <HAL_ADC_MspInit+0x188>
      Error_Handler();
 80026a4:	f7ff ff0e 	bl	80024c4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a3a      	ldr	r2, [pc, #232]	; (8002794 <HAL_ADC_MspInit+0x274>)
 80026ac:	639a      	str	r2, [r3, #56]	; 0x38
 80026ae:	4a39      	ldr	r2, [pc, #228]	; (8002794 <HAL_ADC_MspInit+0x274>)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80026b4:	e05e      	b.n	8002774 <HAL_ADC_MspInit+0x254>
  else if(hadc->Instance==ADC3)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a38      	ldr	r2, [pc, #224]	; (800279c <HAL_ADC_MspInit+0x27c>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d159      	bne.n	8002774 <HAL_ADC_MspInit+0x254>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80026c0:	2300      	movs	r3, #0
 80026c2:	613b      	str	r3, [r7, #16]
 80026c4:	4b2e      	ldr	r3, [pc, #184]	; (8002780 <HAL_ADC_MspInit+0x260>)
 80026c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c8:	4a2d      	ldr	r2, [pc, #180]	; (8002780 <HAL_ADC_MspInit+0x260>)
 80026ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026ce:	6453      	str	r3, [r2, #68]	; 0x44
 80026d0:	4b2b      	ldr	r3, [pc, #172]	; (8002780 <HAL_ADC_MspInit+0x260>)
 80026d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026dc:	2300      	movs	r3, #0
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	4b27      	ldr	r3, [pc, #156]	; (8002780 <HAL_ADC_MspInit+0x260>)
 80026e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e4:	4a26      	ldr	r2, [pc, #152]	; (8002780 <HAL_ADC_MspInit+0x260>)
 80026e6:	f043 0304 	orr.w	r3, r3, #4
 80026ea:	6313      	str	r3, [r2, #48]	; 0x30
 80026ec:	4b24      	ldr	r3, [pc, #144]	; (8002780 <HAL_ADC_MspInit+0x260>)
 80026ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026f8:	2301      	movs	r3, #1
 80026fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026fc:	2303      	movs	r3, #3
 80026fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002700:	2300      	movs	r3, #0
 8002702:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002708:	4619      	mov	r1, r3
 800270a:	4825      	ldr	r0, [pc, #148]	; (80027a0 <HAL_ADC_MspInit+0x280>)
 800270c:	f001 fba6 	bl	8003e5c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8002710:	4b24      	ldr	r3, [pc, #144]	; (80027a4 <HAL_ADC_MspInit+0x284>)
 8002712:	4a25      	ldr	r2, [pc, #148]	; (80027a8 <HAL_ADC_MspInit+0x288>)
 8002714:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8002716:	4b23      	ldr	r3, [pc, #140]	; (80027a4 <HAL_ADC_MspInit+0x284>)
 8002718:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800271c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800271e:	4b21      	ldr	r3, [pc, #132]	; (80027a4 <HAL_ADC_MspInit+0x284>)
 8002720:	2200      	movs	r2, #0
 8002722:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002724:	4b1f      	ldr	r3, [pc, #124]	; (80027a4 <HAL_ADC_MspInit+0x284>)
 8002726:	2200      	movs	r2, #0
 8002728:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800272a:	4b1e      	ldr	r3, [pc, #120]	; (80027a4 <HAL_ADC_MspInit+0x284>)
 800272c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002730:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002732:	4b1c      	ldr	r3, [pc, #112]	; (80027a4 <HAL_ADC_MspInit+0x284>)
 8002734:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002738:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800273a:	4b1a      	ldr	r3, [pc, #104]	; (80027a4 <HAL_ADC_MspInit+0x284>)
 800273c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002740:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002742:	4b18      	ldr	r3, [pc, #96]	; (80027a4 <HAL_ADC_MspInit+0x284>)
 8002744:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002748:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800274a:	4b16      	ldr	r3, [pc, #88]	; (80027a4 <HAL_ADC_MspInit+0x284>)
 800274c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002750:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002752:	4b14      	ldr	r3, [pc, #80]	; (80027a4 <HAL_ADC_MspInit+0x284>)
 8002754:	2200      	movs	r2, #0
 8002756:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002758:	4812      	ldr	r0, [pc, #72]	; (80027a4 <HAL_ADC_MspInit+0x284>)
 800275a:	f001 f80f 	bl	800377c <HAL_DMA_Init>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <HAL_ADC_MspInit+0x248>
      Error_Handler();
 8002764:	f7ff feae 	bl	80024c4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a0e      	ldr	r2, [pc, #56]	; (80027a4 <HAL_ADC_MspInit+0x284>)
 800276c:	639a      	str	r2, [r3, #56]	; 0x38
 800276e:	4a0d      	ldr	r2, [pc, #52]	; (80027a4 <HAL_ADC_MspInit+0x284>)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002774:	bf00      	nop
 8002776:	3738      	adds	r7, #56	; 0x38
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40012000 	.word	0x40012000
 8002780:	40023800 	.word	0x40023800
 8002784:	40020000 	.word	0x40020000
 8002788:	20000104 	.word	0x20000104
 800278c:	40026410 	.word	0x40026410
 8002790:	40012100 	.word	0x40012100
 8002794:	20000164 	.word	0x20000164
 8002798:	40026440 	.word	0x40026440
 800279c:	40012200 	.word	0x40012200
 80027a0:	40020800 	.word	0x40020800
 80027a4:	200001c4 	.word	0x200001c4
 80027a8:	40026428 	.word	0x40026428

080027ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a2c      	ldr	r2, [pc, #176]	; (800286c <HAL_TIM_Base_MspInit+0xc0>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d116      	bne.n	80027ec <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	4b2b      	ldr	r3, [pc, #172]	; (8002870 <HAL_TIM_Base_MspInit+0xc4>)
 80027c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c6:	4a2a      	ldr	r2, [pc, #168]	; (8002870 <HAL_TIM_Base_MspInit+0xc4>)
 80027c8:	f043 0301 	orr.w	r3, r3, #1
 80027cc:	6453      	str	r3, [r2, #68]	; 0x44
 80027ce:	4b28      	ldr	r3, [pc, #160]	; (8002870 <HAL_TIM_Base_MspInit+0xc4>)
 80027d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	617b      	str	r3, [r7, #20]
 80027d8:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80027da:	2200      	movs	r2, #0
 80027dc:	2100      	movs	r1, #0
 80027de:	201b      	movs	r0, #27
 80027e0:	f000 ff95 	bl	800370e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80027e4:	201b      	movs	r0, #27
 80027e6:	f000 ffae 	bl	8003746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80027ea:	e03a      	b.n	8002862 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a20      	ldr	r2, [pc, #128]	; (8002874 <HAL_TIM_Base_MspInit+0xc8>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d10e      	bne.n	8002814 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	4b1d      	ldr	r3, [pc, #116]	; (8002870 <HAL_TIM_Base_MspInit+0xc4>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	4a1c      	ldr	r2, [pc, #112]	; (8002870 <HAL_TIM_Base_MspInit+0xc4>)
 8002800:	f043 0302 	orr.w	r3, r3, #2
 8002804:	6413      	str	r3, [r2, #64]	; 0x40
 8002806:	4b1a      	ldr	r3, [pc, #104]	; (8002870 <HAL_TIM_Base_MspInit+0xc4>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	693b      	ldr	r3, [r7, #16]
}
 8002812:	e026      	b.n	8002862 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a17      	ldr	r2, [pc, #92]	; (8002878 <HAL_TIM_Base_MspInit+0xcc>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d10e      	bne.n	800283c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	4b13      	ldr	r3, [pc, #76]	; (8002870 <HAL_TIM_Base_MspInit+0xc4>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	4a12      	ldr	r2, [pc, #72]	; (8002870 <HAL_TIM_Base_MspInit+0xc4>)
 8002828:	f043 0304 	orr.w	r3, r3, #4
 800282c:	6413      	str	r3, [r2, #64]	; 0x40
 800282e:	4b10      	ldr	r3, [pc, #64]	; (8002870 <HAL_TIM_Base_MspInit+0xc4>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	f003 0304 	and.w	r3, r3, #4
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]
}
 800283a:	e012      	b.n	8002862 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM12)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a0e      	ldr	r2, [pc, #56]	; (800287c <HAL_TIM_Base_MspInit+0xd0>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d10d      	bne.n	8002862 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	4b09      	ldr	r3, [pc, #36]	; (8002870 <HAL_TIM_Base_MspInit+0xc4>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	4a08      	ldr	r2, [pc, #32]	; (8002870 <HAL_TIM_Base_MspInit+0xc4>)
 8002850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002854:	6413      	str	r3, [r2, #64]	; 0x40
 8002856:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_TIM_Base_MspInit+0xc4>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	68bb      	ldr	r3, [r7, #8]
}
 8002862:	bf00      	nop
 8002864:	3718      	adds	r7, #24
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40010000 	.word	0x40010000
 8002870:	40023800 	.word	0x40023800
 8002874:	40000400 	.word	0x40000400
 8002878:	40000800 	.word	0x40000800
 800287c:	40001800 	.word	0x40001800

08002880 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b08a      	sub	sp, #40	; 0x28
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002888:	f107 0314 	add.w	r3, r7, #20
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	60da      	str	r2, [r3, #12]
 8002896:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a0:	d14b      	bne.n	800293a <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	613b      	str	r3, [r7, #16]
 80028a6:	4b27      	ldr	r3, [pc, #156]	; (8002944 <HAL_TIM_Encoder_MspInit+0xc4>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	4a26      	ldr	r2, [pc, #152]	; (8002944 <HAL_TIM_Encoder_MspInit+0xc4>)
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	6413      	str	r3, [r2, #64]	; 0x40
 80028b2:	4b24      	ldr	r3, [pc, #144]	; (8002944 <HAL_TIM_Encoder_MspInit+0xc4>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	613b      	str	r3, [r7, #16]
 80028bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	4b20      	ldr	r3, [pc, #128]	; (8002944 <HAL_TIM_Encoder_MspInit+0xc4>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	4a1f      	ldr	r2, [pc, #124]	; (8002944 <HAL_TIM_Encoder_MspInit+0xc4>)
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	6313      	str	r3, [r2, #48]	; 0x30
 80028ce:	4b1d      	ldr	r3, [pc, #116]	; (8002944 <HAL_TIM_Encoder_MspInit+0xc4>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	4b19      	ldr	r3, [pc, #100]	; (8002944 <HAL_TIM_Encoder_MspInit+0xc4>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	4a18      	ldr	r2, [pc, #96]	; (8002944 <HAL_TIM_Encoder_MspInit+0xc4>)
 80028e4:	f043 0302 	orr.w	r3, r3, #2
 80028e8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ea:	4b16      	ldr	r3, [pc, #88]	; (8002944 <HAL_TIM_Encoder_MspInit+0xc4>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80028f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fc:	2302      	movs	r3, #2
 80028fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002900:	2300      	movs	r3, #0
 8002902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002904:	2300      	movs	r3, #0
 8002906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002908:	2301      	movs	r3, #1
 800290a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800290c:	f107 0314 	add.w	r3, r7, #20
 8002910:	4619      	mov	r1, r3
 8002912:	480d      	ldr	r0, [pc, #52]	; (8002948 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002914:	f001 faa2 	bl	8003e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002918:	f44f 7300 	mov.w	r3, #512	; 0x200
 800291c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291e:	2302      	movs	r3, #2
 8002920:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002922:	2300      	movs	r3, #0
 8002924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002926:	2300      	movs	r3, #0
 8002928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800292a:	2301      	movs	r3, #1
 800292c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800292e:	f107 0314 	add.w	r3, r7, #20
 8002932:	4619      	mov	r1, r3
 8002934:	4805      	ldr	r0, [pc, #20]	; (800294c <HAL_TIM_Encoder_MspInit+0xcc>)
 8002936:	f001 fa91 	bl	8003e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800293a:	bf00      	nop
 800293c:	3728      	adds	r7, #40	; 0x28
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40023800 	.word	0x40023800
 8002948:	40020000 	.word	0x40020000
 800294c:	40020400 	.word	0x40020400

08002950 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08a      	sub	sp, #40	; 0x28
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002958:	f107 0314 	add.w	r3, r7, #20
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	605a      	str	r2, [r3, #4]
 8002962:	609a      	str	r2, [r3, #8]
 8002964:	60da      	str	r2, [r3, #12]
 8002966:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a33      	ldr	r2, [pc, #204]	; (8002a3c <HAL_TIM_MspPostInit+0xec>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d13c      	bne.n	80029ec <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	613b      	str	r3, [r7, #16]
 8002976:	4b32      	ldr	r3, [pc, #200]	; (8002a40 <HAL_TIM_MspPostInit+0xf0>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	4a31      	ldr	r2, [pc, #196]	; (8002a40 <HAL_TIM_MspPostInit+0xf0>)
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	6313      	str	r3, [r2, #48]	; 0x30
 8002982:	4b2f      	ldr	r3, [pc, #188]	; (8002a40 <HAL_TIM_MspPostInit+0xf0>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	4b2b      	ldr	r3, [pc, #172]	; (8002a40 <HAL_TIM_MspPostInit+0xf0>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	4a2a      	ldr	r2, [pc, #168]	; (8002a40 <HAL_TIM_MspPostInit+0xf0>)
 8002998:	f043 0302 	orr.w	r3, r3, #2
 800299c:	6313      	str	r3, [r2, #48]	; 0x30
 800299e:	4b28      	ldr	r3, [pc, #160]	; (8002a40 <HAL_TIM_MspPostInit+0xf0>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029aa:	23c0      	movs	r3, #192	; 0xc0
 80029ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ae:	2302      	movs	r3, #2
 80029b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b6:	2300      	movs	r3, #0
 80029b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029ba:	2302      	movs	r3, #2
 80029bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029be:	f107 0314 	add.w	r3, r7, #20
 80029c2:	4619      	mov	r1, r3
 80029c4:	481f      	ldr	r0, [pc, #124]	; (8002a44 <HAL_TIM_MspPostInit+0xf4>)
 80029c6:	f001 fa49 	bl	8003e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80029ca:	2301      	movs	r3, #1
 80029cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ce:	2302      	movs	r3, #2
 80029d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d6:	2300      	movs	r3, #0
 80029d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029da:	2302      	movs	r3, #2
 80029dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029de:	f107 0314 	add.w	r3, r7, #20
 80029e2:	4619      	mov	r1, r3
 80029e4:	4818      	ldr	r0, [pc, #96]	; (8002a48 <HAL_TIM_MspPostInit+0xf8>)
 80029e6:	f001 fa39 	bl	8003e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80029ea:	e023      	b.n	8002a34 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM4)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a16      	ldr	r2, [pc, #88]	; (8002a4c <HAL_TIM_MspPostInit+0xfc>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d11e      	bne.n	8002a34 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <HAL_TIM_MspPostInit+0xf0>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	4a10      	ldr	r2, [pc, #64]	; (8002a40 <HAL_TIM_MspPostInit+0xf0>)
 8002a00:	f043 0302 	orr.w	r3, r3, #2
 8002a04:	6313      	str	r3, [r2, #48]	; 0x30
 8002a06:	4b0e      	ldr	r3, [pc, #56]	; (8002a40 <HAL_TIM_MspPostInit+0xf0>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	60bb      	str	r3, [r7, #8]
 8002a10:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8002a12:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a20:	2300      	movs	r3, #0
 8002a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a24:	2302      	movs	r3, #2
 8002a26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a28:	f107 0314 	add.w	r3, r7, #20
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4806      	ldr	r0, [pc, #24]	; (8002a48 <HAL_TIM_MspPostInit+0xf8>)
 8002a30:	f001 fa14 	bl	8003e5c <HAL_GPIO_Init>
}
 8002a34:	bf00      	nop
 8002a36:	3728      	adds	r7, #40	; 0x28
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40000400 	.word	0x40000400
 8002a40:	40023800 	.word	0x40023800
 8002a44:	40020000 	.word	0x40020000
 8002a48:	40020400 	.word	0x40020400
 8002a4c:	40000800 	.word	0x40000800

08002a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08a      	sub	sp, #40	; 0x28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a58:	f107 0314 	add.w	r3, r7, #20
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	605a      	str	r2, [r3, #4]
 8002a62:	609a      	str	r2, [r3, #8]
 8002a64:	60da      	str	r2, [r3, #12]
 8002a66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a19      	ldr	r2, [pc, #100]	; (8002ad4 <HAL_UART_MspInit+0x84>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d12b      	bne.n	8002aca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	613b      	str	r3, [r7, #16]
 8002a76:	4b18      	ldr	r3, [pc, #96]	; (8002ad8 <HAL_UART_MspInit+0x88>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	4a17      	ldr	r2, [pc, #92]	; (8002ad8 <HAL_UART_MspInit+0x88>)
 8002a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a80:	6413      	str	r3, [r2, #64]	; 0x40
 8002a82:	4b15      	ldr	r3, [pc, #84]	; (8002ad8 <HAL_UART_MspInit+0x88>)
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8a:	613b      	str	r3, [r7, #16]
 8002a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	4b11      	ldr	r3, [pc, #68]	; (8002ad8 <HAL_UART_MspInit+0x88>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	4a10      	ldr	r2, [pc, #64]	; (8002ad8 <HAL_UART_MspInit+0x88>)
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a9e:	4b0e      	ldr	r3, [pc, #56]	; (8002ad8 <HAL_UART_MspInit+0x88>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002aaa:	230c      	movs	r3, #12
 8002aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002aba:	2307      	movs	r3, #7
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002abe:	f107 0314 	add.w	r3, r7, #20
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4805      	ldr	r0, [pc, #20]	; (8002adc <HAL_UART_MspInit+0x8c>)
 8002ac6:	f001 f9c9 	bl	8003e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002aca:	bf00      	nop
 8002acc:	3728      	adds	r7, #40	; 0x28
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40004400 	.word	0x40004400
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	40020000 	.word	0x40020000

08002ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ae4:	e7fe      	b.n	8002ae4 <NMI_Handler+0x4>

08002ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aea:	e7fe      	b.n	8002aea <HardFault_Handler+0x4>

08002aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002af0:	e7fe      	b.n	8002af0 <MemManage_Handler+0x4>

08002af2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002af2:	b480      	push	{r7}
 8002af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002af6:	e7fe      	b.n	8002af6 <BusFault_Handler+0x4>

08002af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002afc:	e7fe      	b.n	8002afc <UsageFault_Handler+0x4>

08002afe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002afe:	b480      	push	{r7}
 8002b00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b02:	bf00      	nop
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b10:	bf00      	nop
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b2c:	f000 f8b8 	bl	8002ca0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b30:	bf00      	nop
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b38:	4802      	ldr	r0, [pc, #8]	; (8002b44 <TIM1_CC_IRQHandler+0x10>)
 8002b3a:	f002 fc33 	bl	80053a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002b3e:	bf00      	nop
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20000224 	.word	0x20000224

08002b48 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b4c:	4802      	ldr	r0, [pc, #8]	; (8002b58 <DMA2_Stream0_IRQHandler+0x10>)
 8002b4e:	f000 ff1b 	bl	8003988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002b52:	bf00      	nop
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	20000104 	.word	0x20000104

08002b5c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002b60:	4802      	ldr	r0, [pc, #8]	; (8002b6c <DMA2_Stream1_IRQHandler+0x10>)
 8002b62:	f000 ff11 	bl	8003988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	200001c4 	.word	0x200001c4

08002b70 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002b74:	4802      	ldr	r0, [pc, #8]	; (8002b80 <DMA2_Stream2_IRQHandler+0x10>)
 8002b76:	f000 ff07 	bl	8003988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000164 	.word	0x20000164

08002b84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b88:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <SystemInit+0x20>)
 8002b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8e:	4a05      	ldr	r2, [pc, #20]	; (8002ba4 <SystemInit+0x20>)
 8002b90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b98:	bf00      	nop
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	e000ed00 	.word	0xe000ed00

08002ba8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ba8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002be0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bac:	480d      	ldr	r0, [pc, #52]	; (8002be4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bae:	490e      	ldr	r1, [pc, #56]	; (8002be8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002bb0:	4a0e      	ldr	r2, [pc, #56]	; (8002bec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bb4:	e002      	b.n	8002bbc <LoopCopyDataInit>

08002bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bba:	3304      	adds	r3, #4

08002bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bc0:	d3f9      	bcc.n	8002bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bc2:	4a0b      	ldr	r2, [pc, #44]	; (8002bf0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002bc4:	4c0b      	ldr	r4, [pc, #44]	; (8002bf4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bc8:	e001      	b.n	8002bce <LoopFillZerobss>

08002bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bcc:	3204      	adds	r2, #4

08002bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bd0:	d3fb      	bcc.n	8002bca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bd2:	f7ff ffd7 	bl	8002b84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bd6:	f003 fd0b 	bl	80065f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bda:	f7fe ff79 	bl	8001ad0 <main>
  bx  lr    
 8002bde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002be0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002be8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002bec:	08006e90 	.word	0x08006e90
  ldr r2, =_sbss
 8002bf0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002bf4:	20000434 	.word	0x20000434

08002bf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bf8:	e7fe      	b.n	8002bf8 <ADC_IRQHandler>
	...

08002bfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c00:	4b0e      	ldr	r3, [pc, #56]	; (8002c3c <HAL_Init+0x40>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a0d      	ldr	r2, [pc, #52]	; (8002c3c <HAL_Init+0x40>)
 8002c06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <HAL_Init+0x40>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a0a      	ldr	r2, [pc, #40]	; (8002c3c <HAL_Init+0x40>)
 8002c12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c18:	4b08      	ldr	r3, [pc, #32]	; (8002c3c <HAL_Init+0x40>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a07      	ldr	r2, [pc, #28]	; (8002c3c <HAL_Init+0x40>)
 8002c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c24:	2003      	movs	r0, #3
 8002c26:	f000 fd67 	bl	80036f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	f000 f808 	bl	8002c40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c30:	f7ff fc4e 	bl	80024d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40023c00 	.word	0x40023c00

08002c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c48:	4b12      	ldr	r3, [pc, #72]	; (8002c94 <HAL_InitTick+0x54>)
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	4b12      	ldr	r3, [pc, #72]	; (8002c98 <HAL_InitTick+0x58>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	4619      	mov	r1, r3
 8002c52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 fd7f 	bl	8003762 <HAL_SYSTICK_Config>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e00e      	b.n	8002c8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b0f      	cmp	r3, #15
 8002c72:	d80a      	bhi.n	8002c8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c74:	2200      	movs	r2, #0
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	f04f 30ff 	mov.w	r0, #4294967295
 8002c7c:	f000 fd47 	bl	800370e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c80:	4a06      	ldr	r2, [pc, #24]	; (8002c9c <HAL_InitTick+0x5c>)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
 8002c88:	e000      	b.n	8002c8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	20000004 	.word	0x20000004
 8002c98:	2000000c 	.word	0x2000000c
 8002c9c:	20000008 	.word	0x20000008

08002ca0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ca4:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <HAL_IncTick+0x20>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	461a      	mov	r2, r3
 8002caa:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <HAL_IncTick+0x24>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4413      	add	r3, r2
 8002cb0:	4a04      	ldr	r2, [pc, #16]	; (8002cc4 <HAL_IncTick+0x24>)
 8002cb2:	6013      	str	r3, [r2, #0]
}
 8002cb4:	bf00      	nop
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	2000000c 	.word	0x2000000c
 8002cc4:	20000430 	.word	0x20000430

08002cc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  return uwTick;
 8002ccc:	4b03      	ldr	r3, [pc, #12]	; (8002cdc <HAL_GetTick+0x14>)
 8002cce:	681b      	ldr	r3, [r3, #0]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	20000430 	.word	0x20000430

08002ce0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ce8:	f7ff ffee 	bl	8002cc8 <HAL_GetTick>
 8002cec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf8:	d005      	beq.n	8002d06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cfa:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <HAL_Delay+0x44>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4413      	add	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d06:	bf00      	nop
 8002d08:	f7ff ffde 	bl	8002cc8 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d8f7      	bhi.n	8002d08 <HAL_Delay+0x28>
  {
  }
}
 8002d18:	bf00      	nop
 8002d1a:	bf00      	nop
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	2000000c 	.word	0x2000000c

08002d28 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e033      	b.n	8002da6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d109      	bne.n	8002d5a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7ff fbea 	bl	8002520 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	f003 0310 	and.w	r3, r3, #16
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d118      	bne.n	8002d98 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d6e:	f023 0302 	bic.w	r3, r3, #2
 8002d72:	f043 0202 	orr.w	r2, r3, #2
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 fa6e 	bl	800325c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	f023 0303 	bic.w	r3, r3, #3
 8002d8e:	f043 0201 	orr.w	r2, r3, #1
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	641a      	str	r2, [r3, #64]	; 0x40
 8002d96:	e001      	b.n	8002d9c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <HAL_ADC_Start_DMA+0x1e>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	e0e9      	b.n	8002fa2 <HAL_ADC_Start_DMA+0x1f2>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d018      	beq.n	8002e16 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0201 	orr.w	r2, r2, #1
 8002df2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002df4:	4b6d      	ldr	r3, [pc, #436]	; (8002fac <HAL_ADC_Start_DMA+0x1fc>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a6d      	ldr	r2, [pc, #436]	; (8002fb0 <HAL_ADC_Start_DMA+0x200>)
 8002dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfe:	0c9a      	lsrs	r2, r3, #18
 8002e00:	4613      	mov	r3, r2
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	4413      	add	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002e08:	e002      	b.n	8002e10 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f9      	bne.n	8002e0a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e24:	d107      	bne.n	8002e36 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e34:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	f040 80a1 	bne.w	8002f88 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002e4e:	f023 0301 	bic.w	r3, r3, #1
 8002e52:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d007      	beq.n	8002e78 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e70:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e84:	d106      	bne.n	8002e94 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8a:	f023 0206 	bic.w	r2, r3, #6
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	645a      	str	r2, [r3, #68]	; 0x44
 8002e92:	e002      	b.n	8002e9a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ea2:	4b44      	ldr	r3, [pc, #272]	; (8002fb4 <HAL_ADC_Start_DMA+0x204>)
 8002ea4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eaa:	4a43      	ldr	r2, [pc, #268]	; (8002fb8 <HAL_ADC_Start_DMA+0x208>)
 8002eac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb2:	4a42      	ldr	r2, [pc, #264]	; (8002fbc <HAL_ADC_Start_DMA+0x20c>)
 8002eb4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eba:	4a41      	ldr	r2, [pc, #260]	; (8002fc0 <HAL_ADC_Start_DMA+0x210>)
 8002ebc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002ec6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002ed6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ee6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	334c      	adds	r3, #76	; 0x4c
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f000 fcee 	bl	80038d8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 031f 	and.w	r3, r3, #31
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d12a      	bne.n	8002f5e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a2d      	ldr	r2, [pc, #180]	; (8002fc4 <HAL_ADC_Start_DMA+0x214>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d015      	beq.n	8002f3e <HAL_ADC_Start_DMA+0x18e>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a2c      	ldr	r2, [pc, #176]	; (8002fc8 <HAL_ADC_Start_DMA+0x218>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d105      	bne.n	8002f28 <HAL_ADC_Start_DMA+0x178>
 8002f1c:	4b25      	ldr	r3, [pc, #148]	; (8002fb4 <HAL_ADC_Start_DMA+0x204>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 031f 	and.w	r3, r3, #31
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00a      	beq.n	8002f3e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a27      	ldr	r2, [pc, #156]	; (8002fcc <HAL_ADC_Start_DMA+0x21c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d136      	bne.n	8002fa0 <HAL_ADC_Start_DMA+0x1f0>
 8002f32:	4b20      	ldr	r3, [pc, #128]	; (8002fb4 <HAL_ADC_Start_DMA+0x204>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f003 0310 	and.w	r3, r3, #16
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d130      	bne.n	8002fa0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d129      	bne.n	8002fa0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689a      	ldr	r2, [r3, #8]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	e020      	b.n	8002fa0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a18      	ldr	r2, [pc, #96]	; (8002fc4 <HAL_ADC_Start_DMA+0x214>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d11b      	bne.n	8002fa0 <HAL_ADC_Start_DMA+0x1f0>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d114      	bne.n	8002fa0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f84:	609a      	str	r2, [r3, #8]
 8002f86:	e00b      	b.n	8002fa0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	f043 0210 	orr.w	r2, r3, #16
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f98:	f043 0201 	orr.w	r2, r3, #1
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	20000004 	.word	0x20000004
 8002fb0:	431bde83 	.word	0x431bde83
 8002fb4:	40012300 	.word	0x40012300
 8002fb8:	08003455 	.word	0x08003455
 8002fbc:	0800350f 	.word	0x0800350f
 8002fc0:	0800352b 	.word	0x0800352b
 8002fc4:	40012000 	.word	0x40012000
 8002fc8:	40012100 	.word	0x40012100
 8002fcc:	40012200 	.word	0x40012200

08002fd0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003002:	2300      	movs	r3, #0
 8003004:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <HAL_ADC_ConfigChannel+0x1c>
 8003010:	2302      	movs	r3, #2
 8003012:	e113      	b.n	800323c <HAL_ADC_ConfigChannel+0x244>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2b09      	cmp	r3, #9
 8003022:	d925      	bls.n	8003070 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68d9      	ldr	r1, [r3, #12]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	b29b      	uxth	r3, r3
 8003030:	461a      	mov	r2, r3
 8003032:	4613      	mov	r3, r2
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	4413      	add	r3, r2
 8003038:	3b1e      	subs	r3, #30
 800303a:	2207      	movs	r2, #7
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	43da      	mvns	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	400a      	ands	r2, r1
 8003048:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68d9      	ldr	r1, [r3, #12]
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	b29b      	uxth	r3, r3
 800305a:	4618      	mov	r0, r3
 800305c:	4603      	mov	r3, r0
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	4403      	add	r3, r0
 8003062:	3b1e      	subs	r3, #30
 8003064:	409a      	lsls	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	60da      	str	r2, [r3, #12]
 800306e:	e022      	b.n	80030b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6919      	ldr	r1, [r3, #16]
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	b29b      	uxth	r3, r3
 800307c:	461a      	mov	r2, r3
 800307e:	4613      	mov	r3, r2
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	4413      	add	r3, r2
 8003084:	2207      	movs	r2, #7
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	43da      	mvns	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	400a      	ands	r2, r1
 8003092:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6919      	ldr	r1, [r3, #16]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	4618      	mov	r0, r3
 80030a6:	4603      	mov	r3, r0
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	4403      	add	r3, r0
 80030ac:	409a      	lsls	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b06      	cmp	r3, #6
 80030bc:	d824      	bhi.n	8003108 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	3b05      	subs	r3, #5
 80030d0:	221f      	movs	r2, #31
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	43da      	mvns	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	400a      	ands	r2, r1
 80030de:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	4618      	mov	r0, r3
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	4613      	mov	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	3b05      	subs	r3, #5
 80030fa:	fa00 f203 	lsl.w	r2, r0, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	635a      	str	r2, [r3, #52]	; 0x34
 8003106:	e04c      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b0c      	cmp	r3, #12
 800310e:	d824      	bhi.n	800315a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	4613      	mov	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	3b23      	subs	r3, #35	; 0x23
 8003122:	221f      	movs	r2, #31
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	43da      	mvns	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	400a      	ands	r2, r1
 8003130:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	b29b      	uxth	r3, r3
 800313e:	4618      	mov	r0, r3
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	3b23      	subs	r3, #35	; 0x23
 800314c:	fa00 f203 	lsl.w	r2, r0, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	631a      	str	r2, [r3, #48]	; 0x30
 8003158:	e023      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	3b41      	subs	r3, #65	; 0x41
 800316c:	221f      	movs	r2, #31
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43da      	mvns	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	400a      	ands	r2, r1
 800317a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	b29b      	uxth	r3, r3
 8003188:	4618      	mov	r0, r3
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	3b41      	subs	r3, #65	; 0x41
 8003196:	fa00 f203 	lsl.w	r2, r0, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031a2:	4b29      	ldr	r3, [pc, #164]	; (8003248 <HAL_ADC_ConfigChannel+0x250>)
 80031a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a28      	ldr	r2, [pc, #160]	; (800324c <HAL_ADC_ConfigChannel+0x254>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d10f      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x1d8>
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b12      	cmp	r3, #18
 80031b6:	d10b      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a1d      	ldr	r2, [pc, #116]	; (800324c <HAL_ADC_ConfigChannel+0x254>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d12b      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x23a>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a1c      	ldr	r2, [pc, #112]	; (8003250 <HAL_ADC_ConfigChannel+0x258>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d003      	beq.n	80031ec <HAL_ADC_ConfigChannel+0x1f4>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b11      	cmp	r3, #17
 80031ea:	d122      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a11      	ldr	r2, [pc, #68]	; (8003250 <HAL_ADC_ConfigChannel+0x258>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d111      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800320e:	4b11      	ldr	r3, [pc, #68]	; (8003254 <HAL_ADC_ConfigChannel+0x25c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a11      	ldr	r2, [pc, #68]	; (8003258 <HAL_ADC_ConfigChannel+0x260>)
 8003214:	fba2 2303 	umull	r2, r3, r2, r3
 8003218:	0c9a      	lsrs	r2, r3, #18
 800321a:	4613      	mov	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4413      	add	r3, r2
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003224:	e002      	b.n	800322c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	3b01      	subs	r3, #1
 800322a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f9      	bne.n	8003226 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	40012300 	.word	0x40012300
 800324c:	40012000 	.word	0x40012000
 8003250:	10000012 	.word	0x10000012
 8003254:	20000004 	.word	0x20000004
 8003258:	431bde83 	.word	0x431bde83

0800325c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003264:	4b79      	ldr	r3, [pc, #484]	; (800344c <ADC_Init+0x1f0>)
 8003266:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	431a      	orrs	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003290:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6859      	ldr	r1, [r3, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	021a      	lsls	r2, r3, #8
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80032b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6859      	ldr	r1, [r3, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689a      	ldr	r2, [r3, #8]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6899      	ldr	r1, [r3, #8]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ee:	4a58      	ldr	r2, [pc, #352]	; (8003450 <ADC_Init+0x1f4>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d022      	beq.n	800333a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003302:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6899      	ldr	r1, [r3, #8]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003324:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6899      	ldr	r1, [r3, #8]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	609a      	str	r2, [r3, #8]
 8003338:	e00f      	b.n	800335a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003348:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003358:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0202 	bic.w	r2, r2, #2
 8003368:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6899      	ldr	r1, [r3, #8]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	7e1b      	ldrb	r3, [r3, #24]
 8003374:	005a      	lsls	r2, r3, #1
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d01b      	beq.n	80033c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003396:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80033a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6859      	ldr	r1, [r3, #4]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	3b01      	subs	r3, #1
 80033b4:	035a      	lsls	r2, r3, #13
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	605a      	str	r2, [r3, #4]
 80033be:	e007      	b.n	80033d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80033de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	3b01      	subs	r3, #1
 80033ec:	051a      	lsls	r2, r3, #20
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003404:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6899      	ldr	r1, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003412:	025a      	lsls	r2, r3, #9
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	430a      	orrs	r2, r1
 800341a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800342a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6899      	ldr	r1, [r3, #8]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	029a      	lsls	r2, r3, #10
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	609a      	str	r2, [r3, #8]
}
 8003440:	bf00      	nop
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	40012300 	.word	0x40012300
 8003450:	0f000001 	.word	0x0f000001

08003454 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003460:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800346a:	2b00      	cmp	r3, #0
 800346c:	d13c      	bne.n	80034e8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d12b      	bne.n	80034e0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800348c:	2b00      	cmp	r3, #0
 800348e:	d127      	bne.n	80034e0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003496:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800349a:	2b00      	cmp	r3, #0
 800349c:	d006      	beq.n	80034ac <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d119      	bne.n	80034e0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 0220 	bic.w	r2, r2, #32
 80034ba:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d105      	bne.n	80034e0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	f043 0201 	orr.w	r2, r3, #1
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f7fd fc9d 	bl	8000e20 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80034e6:	e00e      	b.n	8003506 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	f003 0310 	and.w	r3, r3, #16
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f7ff fd75 	bl	8002fe4 <HAL_ADC_ErrorCallback>
}
 80034fa:	e004      	b.n	8003506 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	4798      	blx	r3
}
 8003506:	bf00      	nop
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b084      	sub	sp, #16
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f7ff fd57 	bl	8002fd0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003522:	bf00      	nop
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b084      	sub	sp, #16
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003536:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2240      	movs	r2, #64	; 0x40
 800353c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003542:	f043 0204 	orr.w	r2, r3, #4
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f7ff fd4a 	bl	8002fe4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003550:	bf00      	nop
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003568:	4b0c      	ldr	r3, [pc, #48]	; (800359c <__NVIC_SetPriorityGrouping+0x44>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003574:	4013      	ands	r3, r2
 8003576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003580:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800358a:	4a04      	ldr	r2, [pc, #16]	; (800359c <__NVIC_SetPriorityGrouping+0x44>)
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	60d3      	str	r3, [r2, #12]
}
 8003590:	bf00      	nop
 8003592:	3714      	adds	r7, #20
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	e000ed00 	.word	0xe000ed00

080035a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035a4:	4b04      	ldr	r3, [pc, #16]	; (80035b8 <__NVIC_GetPriorityGrouping+0x18>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	0a1b      	lsrs	r3, r3, #8
 80035aa:	f003 0307 	and.w	r3, r3, #7
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr
 80035b8:	e000ed00 	.word	0xe000ed00

080035bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	4603      	mov	r3, r0
 80035c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	db0b      	blt.n	80035e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ce:	79fb      	ldrb	r3, [r7, #7]
 80035d0:	f003 021f 	and.w	r2, r3, #31
 80035d4:	4907      	ldr	r1, [pc, #28]	; (80035f4 <__NVIC_EnableIRQ+0x38>)
 80035d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035da:	095b      	lsrs	r3, r3, #5
 80035dc:	2001      	movs	r0, #1
 80035de:	fa00 f202 	lsl.w	r2, r0, r2
 80035e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	e000e100 	.word	0xe000e100

080035f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	4603      	mov	r3, r0
 8003600:	6039      	str	r1, [r7, #0]
 8003602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003608:	2b00      	cmp	r3, #0
 800360a:	db0a      	blt.n	8003622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	b2da      	uxtb	r2, r3
 8003610:	490c      	ldr	r1, [pc, #48]	; (8003644 <__NVIC_SetPriority+0x4c>)
 8003612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003616:	0112      	lsls	r2, r2, #4
 8003618:	b2d2      	uxtb	r2, r2
 800361a:	440b      	add	r3, r1
 800361c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003620:	e00a      	b.n	8003638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	b2da      	uxtb	r2, r3
 8003626:	4908      	ldr	r1, [pc, #32]	; (8003648 <__NVIC_SetPriority+0x50>)
 8003628:	79fb      	ldrb	r3, [r7, #7]
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	3b04      	subs	r3, #4
 8003630:	0112      	lsls	r2, r2, #4
 8003632:	b2d2      	uxtb	r2, r2
 8003634:	440b      	add	r3, r1
 8003636:	761a      	strb	r2, [r3, #24]
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	e000e100 	.word	0xe000e100
 8003648:	e000ed00 	.word	0xe000ed00

0800364c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800364c:	b480      	push	{r7}
 800364e:	b089      	sub	sp, #36	; 0x24
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f1c3 0307 	rsb	r3, r3, #7
 8003666:	2b04      	cmp	r3, #4
 8003668:	bf28      	it	cs
 800366a:	2304      	movcs	r3, #4
 800366c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	3304      	adds	r3, #4
 8003672:	2b06      	cmp	r3, #6
 8003674:	d902      	bls.n	800367c <NVIC_EncodePriority+0x30>
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	3b03      	subs	r3, #3
 800367a:	e000      	b.n	800367e <NVIC_EncodePriority+0x32>
 800367c:	2300      	movs	r3, #0
 800367e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003680:	f04f 32ff 	mov.w	r2, #4294967295
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	43da      	mvns	r2, r3
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	401a      	ands	r2, r3
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003694:	f04f 31ff 	mov.w	r1, #4294967295
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	fa01 f303 	lsl.w	r3, r1, r3
 800369e:	43d9      	mvns	r1, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a4:	4313      	orrs	r3, r2
         );
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3724      	adds	r7, #36	; 0x24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
	...

080036b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3b01      	subs	r3, #1
 80036c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036c4:	d301      	bcc.n	80036ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036c6:	2301      	movs	r3, #1
 80036c8:	e00f      	b.n	80036ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036ca:	4a0a      	ldr	r2, [pc, #40]	; (80036f4 <SysTick_Config+0x40>)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036d2:	210f      	movs	r1, #15
 80036d4:	f04f 30ff 	mov.w	r0, #4294967295
 80036d8:	f7ff ff8e 	bl	80035f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036dc:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <SysTick_Config+0x40>)
 80036de:	2200      	movs	r2, #0
 80036e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036e2:	4b04      	ldr	r3, [pc, #16]	; (80036f4 <SysTick_Config+0x40>)
 80036e4:	2207      	movs	r2, #7
 80036e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	e000e010 	.word	0xe000e010

080036f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7ff ff29 	bl	8003558 <__NVIC_SetPriorityGrouping>
}
 8003706:	bf00      	nop
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800370e:	b580      	push	{r7, lr}
 8003710:	b086      	sub	sp, #24
 8003712:	af00      	add	r7, sp, #0
 8003714:	4603      	mov	r3, r0
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	607a      	str	r2, [r7, #4]
 800371a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800371c:	2300      	movs	r3, #0
 800371e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003720:	f7ff ff3e 	bl	80035a0 <__NVIC_GetPriorityGrouping>
 8003724:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	68b9      	ldr	r1, [r7, #8]
 800372a:	6978      	ldr	r0, [r7, #20]
 800372c:	f7ff ff8e 	bl	800364c <NVIC_EncodePriority>
 8003730:	4602      	mov	r2, r0
 8003732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003736:	4611      	mov	r1, r2
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff ff5d 	bl	80035f8 <__NVIC_SetPriority>
}
 800373e:	bf00      	nop
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b082      	sub	sp, #8
 800374a:	af00      	add	r7, sp, #0
 800374c:	4603      	mov	r3, r0
 800374e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff ff31 	bl	80035bc <__NVIC_EnableIRQ>
}
 800375a:	bf00      	nop
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b082      	sub	sp, #8
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7ff ffa2 	bl	80036b4 <SysTick_Config>
 8003770:	4603      	mov	r3, r0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
	...

0800377c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003788:	f7ff fa9e 	bl	8002cc8 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e099      	b.n	80038cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2202      	movs	r2, #2
 800379c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0201 	bic.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037b8:	e00f      	b.n	80037da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037ba:	f7ff fa85 	bl	8002cc8 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b05      	cmp	r3, #5
 80037c6:	d908      	bls.n	80037da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2220      	movs	r2, #32
 80037cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2203      	movs	r2, #3
 80037d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e078      	b.n	80038cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1e8      	bne.n	80037ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	4b38      	ldr	r3, [pc, #224]	; (80038d4 <HAL_DMA_Init+0x158>)
 80037f4:	4013      	ands	r3, r2
 80037f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003806:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003812:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800381e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	4313      	orrs	r3, r2
 800382a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	2b04      	cmp	r3, #4
 8003832:	d107      	bne.n	8003844 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383c:	4313      	orrs	r3, r2
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	4313      	orrs	r3, r2
 8003842:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f023 0307 	bic.w	r3, r3, #7
 800385a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	4313      	orrs	r3, r2
 8003864:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	2b04      	cmp	r3, #4
 800386c:	d117      	bne.n	800389e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	4313      	orrs	r3, r2
 8003876:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00e      	beq.n	800389e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 fa6f 	bl	8003d64 <DMA_CheckFifoParam>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d008      	beq.n	800389e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2240      	movs	r2, #64	; 0x40
 8003890:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800389a:	2301      	movs	r3, #1
 800389c:	e016      	b.n	80038cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 fa26 	bl	8003cf8 <DMA_CalcBaseAndBitshift>
 80038ac:	4603      	mov	r3, r0
 80038ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b4:	223f      	movs	r2, #63	; 0x3f
 80038b6:	409a      	lsls	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3718      	adds	r7, #24
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	f010803f 	.word	0xf010803f

080038d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
 80038e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038e6:	2300      	movs	r3, #0
 80038e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d101      	bne.n	80038fe <HAL_DMA_Start_IT+0x26>
 80038fa:	2302      	movs	r3, #2
 80038fc:	e040      	b.n	8003980 <HAL_DMA_Start_IT+0xa8>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b01      	cmp	r3, #1
 8003910:	d12f      	bne.n	8003972 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2202      	movs	r2, #2
 8003916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	68b9      	ldr	r1, [r7, #8]
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 f9b8 	bl	8003c9c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003930:	223f      	movs	r2, #63	; 0x3f
 8003932:	409a      	lsls	r2, r3
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0216 	orr.w	r2, r2, #22
 8003946:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394c:	2b00      	cmp	r3, #0
 800394e:	d007      	beq.n	8003960 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 0208 	orr.w	r2, r2, #8
 800395e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 0201 	orr.w	r2, r2, #1
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	e005      	b.n	800397e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800397a:	2302      	movs	r3, #2
 800397c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800397e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003990:	2300      	movs	r3, #0
 8003992:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003994:	4b8e      	ldr	r3, [pc, #568]	; (8003bd0 <HAL_DMA_IRQHandler+0x248>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a8e      	ldr	r2, [pc, #568]	; (8003bd4 <HAL_DMA_IRQHandler+0x24c>)
 800399a:	fba2 2303 	umull	r2, r3, r2, r3
 800399e:	0a9b      	lsrs	r3, r3, #10
 80039a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b2:	2208      	movs	r2, #8
 80039b4:	409a      	lsls	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	4013      	ands	r3, r2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d01a      	beq.n	80039f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d013      	beq.n	80039f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0204 	bic.w	r2, r2, #4
 80039da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e0:	2208      	movs	r2, #8
 80039e2:	409a      	lsls	r2, r3
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ec:	f043 0201 	orr.w	r2, r3, #1
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f8:	2201      	movs	r2, #1
 80039fa:	409a      	lsls	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4013      	ands	r3, r2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d012      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00b      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a16:	2201      	movs	r2, #1
 8003a18:	409a      	lsls	r2, r3
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a22:	f043 0202 	orr.w	r2, r3, #2
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2e:	2204      	movs	r2, #4
 8003a30:	409a      	lsls	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4013      	ands	r3, r2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d012      	beq.n	8003a60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00b      	beq.n	8003a60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4c:	2204      	movs	r2, #4
 8003a4e:	409a      	lsls	r2, r3
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a58:	f043 0204 	orr.w	r2, r3, #4
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a64:	2210      	movs	r2, #16
 8003a66:	409a      	lsls	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d043      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d03c      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a82:	2210      	movs	r2, #16
 8003a84:	409a      	lsls	r2, r3
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d018      	beq.n	8003aca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d108      	bne.n	8003ab8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d024      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	4798      	blx	r3
 8003ab6:	e01f      	b.n	8003af8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d01b      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	4798      	blx	r3
 8003ac8:	e016      	b.n	8003af8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d107      	bne.n	8003ae8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 0208 	bic.w	r2, r2, #8
 8003ae6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003afc:	2220      	movs	r2, #32
 8003afe:	409a      	lsls	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4013      	ands	r3, r2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 808f 	beq.w	8003c28 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0310 	and.w	r3, r3, #16
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 8087 	beq.w	8003c28 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b1e:	2220      	movs	r2, #32
 8003b20:	409a      	lsls	r2, r3
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b05      	cmp	r3, #5
 8003b30:	d136      	bne.n	8003ba0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0216 	bic.w	r2, r2, #22
 8003b40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	695a      	ldr	r2, [r3, #20]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d103      	bne.n	8003b62 <HAL_DMA_IRQHandler+0x1da>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d007      	beq.n	8003b72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0208 	bic.w	r2, r2, #8
 8003b70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b76:	223f      	movs	r2, #63	; 0x3f
 8003b78:	409a      	lsls	r2, r3
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d07e      	beq.n	8003c94 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	4798      	blx	r3
        }
        return;
 8003b9e:	e079      	b.n	8003c94 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d01d      	beq.n	8003bea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10d      	bne.n	8003bd8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d031      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	4798      	blx	r3
 8003bcc:	e02c      	b.n	8003c28 <HAL_DMA_IRQHandler+0x2a0>
 8003bce:	bf00      	nop
 8003bd0:	20000004 	.word	0x20000004
 8003bd4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d023      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	4798      	blx	r3
 8003be8:	e01e      	b.n	8003c28 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10f      	bne.n	8003c18 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0210 	bic.w	r2, r2, #16
 8003c06:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d032      	beq.n	8003c96 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d022      	beq.n	8003c82 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2205      	movs	r2, #5
 8003c40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0201 	bic.w	r2, r2, #1
 8003c52:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	3301      	adds	r3, #1
 8003c58:	60bb      	str	r3, [r7, #8]
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d307      	bcc.n	8003c70 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1f2      	bne.n	8003c54 <HAL_DMA_IRQHandler+0x2cc>
 8003c6e:	e000      	b.n	8003c72 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c70:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d005      	beq.n	8003c96 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	4798      	blx	r3
 8003c92:	e000      	b.n	8003c96 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c94:	bf00      	nop
    }
  }
}
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
 8003ca8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003cb8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	2b40      	cmp	r3, #64	; 0x40
 8003cc8:	d108      	bne.n	8003cdc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003cda:	e007      	b.n	8003cec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	60da      	str	r2, [r3, #12]
}
 8003cec:	bf00      	nop
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	3b10      	subs	r3, #16
 8003d08:	4a14      	ldr	r2, [pc, #80]	; (8003d5c <DMA_CalcBaseAndBitshift+0x64>)
 8003d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0e:	091b      	lsrs	r3, r3, #4
 8003d10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d12:	4a13      	ldr	r2, [pc, #76]	; (8003d60 <DMA_CalcBaseAndBitshift+0x68>)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4413      	add	r3, r2
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2b03      	cmp	r3, #3
 8003d24:	d909      	bls.n	8003d3a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d2e:	f023 0303 	bic.w	r3, r3, #3
 8003d32:	1d1a      	adds	r2, r3, #4
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	659a      	str	r2, [r3, #88]	; 0x58
 8003d38:	e007      	b.n	8003d4a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d42:	f023 0303 	bic.w	r3, r3, #3
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3714      	adds	r7, #20
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	aaaaaaab 	.word	0xaaaaaaab
 8003d60:	08006e78 	.word	0x08006e78

08003d64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d11f      	bne.n	8003dbe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2b03      	cmp	r3, #3
 8003d82:	d856      	bhi.n	8003e32 <DMA_CheckFifoParam+0xce>
 8003d84:	a201      	add	r2, pc, #4	; (adr r2, 8003d8c <DMA_CheckFifoParam+0x28>)
 8003d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8a:	bf00      	nop
 8003d8c:	08003d9d 	.word	0x08003d9d
 8003d90:	08003daf 	.word	0x08003daf
 8003d94:	08003d9d 	.word	0x08003d9d
 8003d98:	08003e33 	.word	0x08003e33
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d046      	beq.n	8003e36 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dac:	e043      	b.n	8003e36 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003db6:	d140      	bne.n	8003e3a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dbc:	e03d      	b.n	8003e3a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dc6:	d121      	bne.n	8003e0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	2b03      	cmp	r3, #3
 8003dcc:	d837      	bhi.n	8003e3e <DMA_CheckFifoParam+0xda>
 8003dce:	a201      	add	r2, pc, #4	; (adr r2, 8003dd4 <DMA_CheckFifoParam+0x70>)
 8003dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd4:	08003de5 	.word	0x08003de5
 8003dd8:	08003deb 	.word	0x08003deb
 8003ddc:	08003de5 	.word	0x08003de5
 8003de0:	08003dfd 	.word	0x08003dfd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	73fb      	strb	r3, [r7, #15]
      break;
 8003de8:	e030      	b.n	8003e4c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d025      	beq.n	8003e42 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dfa:	e022      	b.n	8003e42 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e04:	d11f      	bne.n	8003e46 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e0a:	e01c      	b.n	8003e46 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d903      	bls.n	8003e1a <DMA_CheckFifoParam+0xb6>
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	2b03      	cmp	r3, #3
 8003e16:	d003      	beq.n	8003e20 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e18:	e018      	b.n	8003e4c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	73fb      	strb	r3, [r7, #15]
      break;
 8003e1e:	e015      	b.n	8003e4c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00e      	beq.n	8003e4a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e30:	e00b      	b.n	8003e4a <DMA_CheckFifoParam+0xe6>
      break;
 8003e32:	bf00      	nop
 8003e34:	e00a      	b.n	8003e4c <DMA_CheckFifoParam+0xe8>
      break;
 8003e36:	bf00      	nop
 8003e38:	e008      	b.n	8003e4c <DMA_CheckFifoParam+0xe8>
      break;
 8003e3a:	bf00      	nop
 8003e3c:	e006      	b.n	8003e4c <DMA_CheckFifoParam+0xe8>
      break;
 8003e3e:	bf00      	nop
 8003e40:	e004      	b.n	8003e4c <DMA_CheckFifoParam+0xe8>
      break;
 8003e42:	bf00      	nop
 8003e44:	e002      	b.n	8003e4c <DMA_CheckFifoParam+0xe8>
      break;   
 8003e46:	bf00      	nop
 8003e48:	e000      	b.n	8003e4c <DMA_CheckFifoParam+0xe8>
      break;
 8003e4a:	bf00      	nop
    }
  } 
  
  return status; 
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3714      	adds	r7, #20
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop

08003e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b089      	sub	sp, #36	; 0x24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e72:	2300      	movs	r3, #0
 8003e74:	61fb      	str	r3, [r7, #28]
 8003e76:	e165      	b.n	8004144 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e78:	2201      	movs	r2, #1
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	f040 8154 	bne.w	800413e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f003 0303 	and.w	r3, r3, #3
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d005      	beq.n	8003eae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d130      	bne.n	8003f10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	2203      	movs	r2, #3
 8003eba:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebe:	43db      	mvns	r3, r3
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	43db      	mvns	r3, r3
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	091b      	lsrs	r3, r3, #4
 8003efa:	f003 0201 	and.w	r2, r3, #1
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f003 0303 	and.w	r3, r3, #3
 8003f18:	2b03      	cmp	r3, #3
 8003f1a:	d017      	beq.n	8003f4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	2203      	movs	r2, #3
 8003f28:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	4013      	ands	r3, r2
 8003f32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	689a      	ldr	r2, [r3, #8]
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f003 0303 	and.w	r3, r3, #3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d123      	bne.n	8003fa0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	08da      	lsrs	r2, r3, #3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3208      	adds	r2, #8
 8003f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	220f      	movs	r2, #15
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	43db      	mvns	r3, r3
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	691a      	ldr	r2, [r3, #16]
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	08da      	lsrs	r2, r3, #3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3208      	adds	r2, #8
 8003f9a:	69b9      	ldr	r1, [r7, #24]
 8003f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	2203      	movs	r2, #3
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f003 0203 	and.w	r2, r3, #3
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 80ae 	beq.w	800413e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	4b5d      	ldr	r3, [pc, #372]	; (800415c <HAL_GPIO_Init+0x300>)
 8003fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fea:	4a5c      	ldr	r2, [pc, #368]	; (800415c <HAL_GPIO_Init+0x300>)
 8003fec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ff2:	4b5a      	ldr	r3, [pc, #360]	; (800415c <HAL_GPIO_Init+0x300>)
 8003ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ffe:	4a58      	ldr	r2, [pc, #352]	; (8004160 <HAL_GPIO_Init+0x304>)
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	089b      	lsrs	r3, r3, #2
 8004004:	3302      	adds	r3, #2
 8004006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800400a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	220f      	movs	r2, #15
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	43db      	mvns	r3, r3
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	4013      	ands	r3, r2
 8004020:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a4f      	ldr	r2, [pc, #316]	; (8004164 <HAL_GPIO_Init+0x308>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d025      	beq.n	8004076 <HAL_GPIO_Init+0x21a>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a4e      	ldr	r2, [pc, #312]	; (8004168 <HAL_GPIO_Init+0x30c>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d01f      	beq.n	8004072 <HAL_GPIO_Init+0x216>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a4d      	ldr	r2, [pc, #308]	; (800416c <HAL_GPIO_Init+0x310>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d019      	beq.n	800406e <HAL_GPIO_Init+0x212>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a4c      	ldr	r2, [pc, #304]	; (8004170 <HAL_GPIO_Init+0x314>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d013      	beq.n	800406a <HAL_GPIO_Init+0x20e>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a4b      	ldr	r2, [pc, #300]	; (8004174 <HAL_GPIO_Init+0x318>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d00d      	beq.n	8004066 <HAL_GPIO_Init+0x20a>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a4a      	ldr	r2, [pc, #296]	; (8004178 <HAL_GPIO_Init+0x31c>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d007      	beq.n	8004062 <HAL_GPIO_Init+0x206>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a49      	ldr	r2, [pc, #292]	; (800417c <HAL_GPIO_Init+0x320>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d101      	bne.n	800405e <HAL_GPIO_Init+0x202>
 800405a:	2306      	movs	r3, #6
 800405c:	e00c      	b.n	8004078 <HAL_GPIO_Init+0x21c>
 800405e:	2307      	movs	r3, #7
 8004060:	e00a      	b.n	8004078 <HAL_GPIO_Init+0x21c>
 8004062:	2305      	movs	r3, #5
 8004064:	e008      	b.n	8004078 <HAL_GPIO_Init+0x21c>
 8004066:	2304      	movs	r3, #4
 8004068:	e006      	b.n	8004078 <HAL_GPIO_Init+0x21c>
 800406a:	2303      	movs	r3, #3
 800406c:	e004      	b.n	8004078 <HAL_GPIO_Init+0x21c>
 800406e:	2302      	movs	r3, #2
 8004070:	e002      	b.n	8004078 <HAL_GPIO_Init+0x21c>
 8004072:	2301      	movs	r3, #1
 8004074:	e000      	b.n	8004078 <HAL_GPIO_Init+0x21c>
 8004076:	2300      	movs	r3, #0
 8004078:	69fa      	ldr	r2, [r7, #28]
 800407a:	f002 0203 	and.w	r2, r2, #3
 800407e:	0092      	lsls	r2, r2, #2
 8004080:	4093      	lsls	r3, r2
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	4313      	orrs	r3, r2
 8004086:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004088:	4935      	ldr	r1, [pc, #212]	; (8004160 <HAL_GPIO_Init+0x304>)
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	089b      	lsrs	r3, r3, #2
 800408e:	3302      	adds	r3, #2
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004096:	4b3a      	ldr	r3, [pc, #232]	; (8004180 <HAL_GPIO_Init+0x324>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	43db      	mvns	r3, r3
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	4013      	ands	r3, r2
 80040a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040ba:	4a31      	ldr	r2, [pc, #196]	; (8004180 <HAL_GPIO_Init+0x324>)
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040c0:	4b2f      	ldr	r3, [pc, #188]	; (8004180 <HAL_GPIO_Init+0x324>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	43db      	mvns	r3, r3
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	4013      	ands	r3, r2
 80040ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040e4:	4a26      	ldr	r2, [pc, #152]	; (8004180 <HAL_GPIO_Init+0x324>)
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040ea:	4b25      	ldr	r3, [pc, #148]	; (8004180 <HAL_GPIO_Init+0x324>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	43db      	mvns	r3, r3
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	4013      	ands	r3, r2
 80040f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	4313      	orrs	r3, r2
 800410c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800410e:	4a1c      	ldr	r2, [pc, #112]	; (8004180 <HAL_GPIO_Init+0x324>)
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004114:	4b1a      	ldr	r3, [pc, #104]	; (8004180 <HAL_GPIO_Init+0x324>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	43db      	mvns	r3, r3
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	4013      	ands	r3, r2
 8004122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d003      	beq.n	8004138 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	4313      	orrs	r3, r2
 8004136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004138:	4a11      	ldr	r2, [pc, #68]	; (8004180 <HAL_GPIO_Init+0x324>)
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	3301      	adds	r3, #1
 8004142:	61fb      	str	r3, [r7, #28]
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	2b0f      	cmp	r3, #15
 8004148:	f67f ae96 	bls.w	8003e78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800414c:	bf00      	nop
 800414e:	bf00      	nop
 8004150:	3724      	adds	r7, #36	; 0x24
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	40023800 	.word	0x40023800
 8004160:	40013800 	.word	0x40013800
 8004164:	40020000 	.word	0x40020000
 8004168:	40020400 	.word	0x40020400
 800416c:	40020800 	.word	0x40020800
 8004170:	40020c00 	.word	0x40020c00
 8004174:	40021000 	.word	0x40021000
 8004178:	40021400 	.word	0x40021400
 800417c:	40021800 	.word	0x40021800
 8004180:	40013c00 	.word	0x40013c00

08004184 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	460b      	mov	r3, r1
 800418e:	807b      	strh	r3, [r7, #2]
 8004190:	4613      	mov	r3, r2
 8004192:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004194:	787b      	ldrb	r3, [r7, #1]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d003      	beq.n	80041a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800419a:	887a      	ldrh	r2, [r7, #2]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041a0:	e003      	b.n	80041aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041a2:	887b      	ldrh	r3, [r7, #2]
 80041a4:	041a      	lsls	r2, r3, #16
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	619a      	str	r2, [r3, #24]
}
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
	...

080041b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e0cc      	b.n	8004366 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041cc:	4b68      	ldr	r3, [pc, #416]	; (8004370 <HAL_RCC_ClockConfig+0x1b8>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 030f 	and.w	r3, r3, #15
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d90c      	bls.n	80041f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041da:	4b65      	ldr	r3, [pc, #404]	; (8004370 <HAL_RCC_ClockConfig+0x1b8>)
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041e2:	4b63      	ldr	r3, [pc, #396]	; (8004370 <HAL_RCC_ClockConfig+0x1b8>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 030f 	and.w	r3, r3, #15
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d001      	beq.n	80041f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e0b8      	b.n	8004366 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d020      	beq.n	8004242 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b00      	cmp	r3, #0
 800420a:	d005      	beq.n	8004218 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800420c:	4b59      	ldr	r3, [pc, #356]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	4a58      	ldr	r2, [pc, #352]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 8004212:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004216:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0308 	and.w	r3, r3, #8
 8004220:	2b00      	cmp	r3, #0
 8004222:	d005      	beq.n	8004230 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004224:	4b53      	ldr	r3, [pc, #332]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	4a52      	ldr	r2, [pc, #328]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 800422a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800422e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004230:	4b50      	ldr	r3, [pc, #320]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	494d      	ldr	r1, [pc, #308]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 800423e:	4313      	orrs	r3, r2
 8004240:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d044      	beq.n	80042d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d107      	bne.n	8004266 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004256:	4b47      	ldr	r3, [pc, #284]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d119      	bne.n	8004296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e07f      	b.n	8004366 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	2b02      	cmp	r3, #2
 800426c:	d003      	beq.n	8004276 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004272:	2b03      	cmp	r3, #3
 8004274:	d107      	bne.n	8004286 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004276:	4b3f      	ldr	r3, [pc, #252]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d109      	bne.n	8004296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e06f      	b.n	8004366 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004286:	4b3b      	ldr	r3, [pc, #236]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e067      	b.n	8004366 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004296:	4b37      	ldr	r3, [pc, #220]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f023 0203 	bic.w	r2, r3, #3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	4934      	ldr	r1, [pc, #208]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042a8:	f7fe fd0e 	bl	8002cc8 <HAL_GetTick>
 80042ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ae:	e00a      	b.n	80042c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042b0:	f7fe fd0a 	bl	8002cc8 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80042be:	4293      	cmp	r3, r2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e04f      	b.n	8004366 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c6:	4b2b      	ldr	r3, [pc, #172]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 020c 	and.w	r2, r3, #12
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d1eb      	bne.n	80042b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042d8:	4b25      	ldr	r3, [pc, #148]	; (8004370 <HAL_RCC_ClockConfig+0x1b8>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 030f 	and.w	r3, r3, #15
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d20c      	bcs.n	8004300 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042e6:	4b22      	ldr	r3, [pc, #136]	; (8004370 <HAL_RCC_ClockConfig+0x1b8>)
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	b2d2      	uxtb	r2, r2
 80042ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ee:	4b20      	ldr	r3, [pc, #128]	; (8004370 <HAL_RCC_ClockConfig+0x1b8>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 030f 	and.w	r3, r3, #15
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d001      	beq.n	8004300 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e032      	b.n	8004366 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b00      	cmp	r3, #0
 800430a:	d008      	beq.n	800431e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800430c:	4b19      	ldr	r3, [pc, #100]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	4916      	ldr	r1, [pc, #88]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 800431a:	4313      	orrs	r3, r2
 800431c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0308 	and.w	r3, r3, #8
 8004326:	2b00      	cmp	r3, #0
 8004328:	d009      	beq.n	800433e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800432a:	4b12      	ldr	r3, [pc, #72]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	490e      	ldr	r1, [pc, #56]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 800433a:	4313      	orrs	r3, r2
 800433c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800433e:	f000 f855 	bl	80043ec <HAL_RCC_GetSysClockFreq>
 8004342:	4602      	mov	r2, r0
 8004344:	4b0b      	ldr	r3, [pc, #44]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	091b      	lsrs	r3, r3, #4
 800434a:	f003 030f 	and.w	r3, r3, #15
 800434e:	490a      	ldr	r1, [pc, #40]	; (8004378 <HAL_RCC_ClockConfig+0x1c0>)
 8004350:	5ccb      	ldrb	r3, [r1, r3]
 8004352:	fa22 f303 	lsr.w	r3, r2, r3
 8004356:	4a09      	ldr	r2, [pc, #36]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 8004358:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800435a:	4b09      	ldr	r3, [pc, #36]	; (8004380 <HAL_RCC_ClockConfig+0x1c8>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4618      	mov	r0, r3
 8004360:	f7fe fc6e 	bl	8002c40 <HAL_InitTick>

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	40023c00 	.word	0x40023c00
 8004374:	40023800 	.word	0x40023800
 8004378:	08006e60 	.word	0x08006e60
 800437c:	20000004 	.word	0x20000004
 8004380:	20000008 	.word	0x20000008

08004384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004388:	4b03      	ldr	r3, [pc, #12]	; (8004398 <HAL_RCC_GetHCLKFreq+0x14>)
 800438a:	681b      	ldr	r3, [r3, #0]
}
 800438c:	4618      	mov	r0, r3
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	20000004 	.word	0x20000004

0800439c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043a0:	f7ff fff0 	bl	8004384 <HAL_RCC_GetHCLKFreq>
 80043a4:	4602      	mov	r2, r0
 80043a6:	4b05      	ldr	r3, [pc, #20]	; (80043bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	0a9b      	lsrs	r3, r3, #10
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	4903      	ldr	r1, [pc, #12]	; (80043c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043b2:	5ccb      	ldrb	r3, [r1, r3]
 80043b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	40023800 	.word	0x40023800
 80043c0:	08006e70 	.word	0x08006e70

080043c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80043c8:	f7ff ffdc 	bl	8004384 <HAL_RCC_GetHCLKFreq>
 80043cc:	4602      	mov	r2, r0
 80043ce:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	0b5b      	lsrs	r3, r3, #13
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	4903      	ldr	r1, [pc, #12]	; (80043e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043da:	5ccb      	ldrb	r3, [r1, r3]
 80043dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	40023800 	.word	0x40023800
 80043e8:	08006e70 	.word	0x08006e70

080043ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043f0:	b0ae      	sub	sp, #184	; 0xb8
 80043f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80043fa:	2300      	movs	r3, #0
 80043fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004400:	2300      	movs	r3, #0
 8004402:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004406:	2300      	movs	r3, #0
 8004408:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800440c:	2300      	movs	r3, #0
 800440e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004412:	4bcb      	ldr	r3, [pc, #812]	; (8004740 <HAL_RCC_GetSysClockFreq+0x354>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f003 030c 	and.w	r3, r3, #12
 800441a:	2b0c      	cmp	r3, #12
 800441c:	f200 8206 	bhi.w	800482c <HAL_RCC_GetSysClockFreq+0x440>
 8004420:	a201      	add	r2, pc, #4	; (adr r2, 8004428 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004426:	bf00      	nop
 8004428:	0800445d 	.word	0x0800445d
 800442c:	0800482d 	.word	0x0800482d
 8004430:	0800482d 	.word	0x0800482d
 8004434:	0800482d 	.word	0x0800482d
 8004438:	08004465 	.word	0x08004465
 800443c:	0800482d 	.word	0x0800482d
 8004440:	0800482d 	.word	0x0800482d
 8004444:	0800482d 	.word	0x0800482d
 8004448:	0800446d 	.word	0x0800446d
 800444c:	0800482d 	.word	0x0800482d
 8004450:	0800482d 	.word	0x0800482d
 8004454:	0800482d 	.word	0x0800482d
 8004458:	0800465d 	.word	0x0800465d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800445c:	4bb9      	ldr	r3, [pc, #740]	; (8004744 <HAL_RCC_GetSysClockFreq+0x358>)
 800445e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004462:	e1e7      	b.n	8004834 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004464:	4bb8      	ldr	r3, [pc, #736]	; (8004748 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004466:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800446a:	e1e3      	b.n	8004834 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800446c:	4bb4      	ldr	r3, [pc, #720]	; (8004740 <HAL_RCC_GetSysClockFreq+0x354>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004474:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004478:	4bb1      	ldr	r3, [pc, #708]	; (8004740 <HAL_RCC_GetSysClockFreq+0x354>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d071      	beq.n	8004568 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004484:	4bae      	ldr	r3, [pc, #696]	; (8004740 <HAL_RCC_GetSysClockFreq+0x354>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	099b      	lsrs	r3, r3, #6
 800448a:	2200      	movs	r2, #0
 800448c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004490:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004494:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800449c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044a0:	2300      	movs	r3, #0
 80044a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80044aa:	4622      	mov	r2, r4
 80044ac:	462b      	mov	r3, r5
 80044ae:	f04f 0000 	mov.w	r0, #0
 80044b2:	f04f 0100 	mov.w	r1, #0
 80044b6:	0159      	lsls	r1, r3, #5
 80044b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044bc:	0150      	lsls	r0, r2, #5
 80044be:	4602      	mov	r2, r0
 80044c0:	460b      	mov	r3, r1
 80044c2:	4621      	mov	r1, r4
 80044c4:	1a51      	subs	r1, r2, r1
 80044c6:	6439      	str	r1, [r7, #64]	; 0x40
 80044c8:	4629      	mov	r1, r5
 80044ca:	eb63 0301 	sbc.w	r3, r3, r1
 80044ce:	647b      	str	r3, [r7, #68]	; 0x44
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80044dc:	4649      	mov	r1, r9
 80044de:	018b      	lsls	r3, r1, #6
 80044e0:	4641      	mov	r1, r8
 80044e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044e6:	4641      	mov	r1, r8
 80044e8:	018a      	lsls	r2, r1, #6
 80044ea:	4641      	mov	r1, r8
 80044ec:	1a51      	subs	r1, r2, r1
 80044ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80044f0:	4649      	mov	r1, r9
 80044f2:	eb63 0301 	sbc.w	r3, r3, r1
 80044f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044f8:	f04f 0200 	mov.w	r2, #0
 80044fc:	f04f 0300 	mov.w	r3, #0
 8004500:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004504:	4649      	mov	r1, r9
 8004506:	00cb      	lsls	r3, r1, #3
 8004508:	4641      	mov	r1, r8
 800450a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800450e:	4641      	mov	r1, r8
 8004510:	00ca      	lsls	r2, r1, #3
 8004512:	4610      	mov	r0, r2
 8004514:	4619      	mov	r1, r3
 8004516:	4603      	mov	r3, r0
 8004518:	4622      	mov	r2, r4
 800451a:	189b      	adds	r3, r3, r2
 800451c:	633b      	str	r3, [r7, #48]	; 0x30
 800451e:	462b      	mov	r3, r5
 8004520:	460a      	mov	r2, r1
 8004522:	eb42 0303 	adc.w	r3, r2, r3
 8004526:	637b      	str	r3, [r7, #52]	; 0x34
 8004528:	f04f 0200 	mov.w	r2, #0
 800452c:	f04f 0300 	mov.w	r3, #0
 8004530:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004534:	4629      	mov	r1, r5
 8004536:	024b      	lsls	r3, r1, #9
 8004538:	4621      	mov	r1, r4
 800453a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800453e:	4621      	mov	r1, r4
 8004540:	024a      	lsls	r2, r1, #9
 8004542:	4610      	mov	r0, r2
 8004544:	4619      	mov	r1, r3
 8004546:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800454a:	2200      	movs	r2, #0
 800454c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004550:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004554:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004558:	f7fc fa9c 	bl	8000a94 <__aeabi_uldivmod>
 800455c:	4602      	mov	r2, r0
 800455e:	460b      	mov	r3, r1
 8004560:	4613      	mov	r3, r2
 8004562:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004566:	e067      	b.n	8004638 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004568:	4b75      	ldr	r3, [pc, #468]	; (8004740 <HAL_RCC_GetSysClockFreq+0x354>)
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	099b      	lsrs	r3, r3, #6
 800456e:	2200      	movs	r2, #0
 8004570:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004574:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004578:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800457c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004580:	67bb      	str	r3, [r7, #120]	; 0x78
 8004582:	2300      	movs	r3, #0
 8004584:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004586:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800458a:	4622      	mov	r2, r4
 800458c:	462b      	mov	r3, r5
 800458e:	f04f 0000 	mov.w	r0, #0
 8004592:	f04f 0100 	mov.w	r1, #0
 8004596:	0159      	lsls	r1, r3, #5
 8004598:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800459c:	0150      	lsls	r0, r2, #5
 800459e:	4602      	mov	r2, r0
 80045a0:	460b      	mov	r3, r1
 80045a2:	4621      	mov	r1, r4
 80045a4:	1a51      	subs	r1, r2, r1
 80045a6:	62b9      	str	r1, [r7, #40]	; 0x28
 80045a8:	4629      	mov	r1, r5
 80045aa:	eb63 0301 	sbc.w	r3, r3, r1
 80045ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045b0:	f04f 0200 	mov.w	r2, #0
 80045b4:	f04f 0300 	mov.w	r3, #0
 80045b8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80045bc:	4649      	mov	r1, r9
 80045be:	018b      	lsls	r3, r1, #6
 80045c0:	4641      	mov	r1, r8
 80045c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045c6:	4641      	mov	r1, r8
 80045c8:	018a      	lsls	r2, r1, #6
 80045ca:	4641      	mov	r1, r8
 80045cc:	ebb2 0a01 	subs.w	sl, r2, r1
 80045d0:	4649      	mov	r1, r9
 80045d2:	eb63 0b01 	sbc.w	fp, r3, r1
 80045d6:	f04f 0200 	mov.w	r2, #0
 80045da:	f04f 0300 	mov.w	r3, #0
 80045de:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80045e2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80045e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045ea:	4692      	mov	sl, r2
 80045ec:	469b      	mov	fp, r3
 80045ee:	4623      	mov	r3, r4
 80045f0:	eb1a 0303 	adds.w	r3, sl, r3
 80045f4:	623b      	str	r3, [r7, #32]
 80045f6:	462b      	mov	r3, r5
 80045f8:	eb4b 0303 	adc.w	r3, fp, r3
 80045fc:	627b      	str	r3, [r7, #36]	; 0x24
 80045fe:	f04f 0200 	mov.w	r2, #0
 8004602:	f04f 0300 	mov.w	r3, #0
 8004606:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800460a:	4629      	mov	r1, r5
 800460c:	028b      	lsls	r3, r1, #10
 800460e:	4621      	mov	r1, r4
 8004610:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004614:	4621      	mov	r1, r4
 8004616:	028a      	lsls	r2, r1, #10
 8004618:	4610      	mov	r0, r2
 800461a:	4619      	mov	r1, r3
 800461c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004620:	2200      	movs	r2, #0
 8004622:	673b      	str	r3, [r7, #112]	; 0x70
 8004624:	677a      	str	r2, [r7, #116]	; 0x74
 8004626:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800462a:	f7fc fa33 	bl	8000a94 <__aeabi_uldivmod>
 800462e:	4602      	mov	r2, r0
 8004630:	460b      	mov	r3, r1
 8004632:	4613      	mov	r3, r2
 8004634:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004638:	4b41      	ldr	r3, [pc, #260]	; (8004740 <HAL_RCC_GetSysClockFreq+0x354>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	0c1b      	lsrs	r3, r3, #16
 800463e:	f003 0303 	and.w	r3, r3, #3
 8004642:	3301      	adds	r3, #1
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800464a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800464e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004652:	fbb2 f3f3 	udiv	r3, r2, r3
 8004656:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800465a:	e0eb      	b.n	8004834 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800465c:	4b38      	ldr	r3, [pc, #224]	; (8004740 <HAL_RCC_GetSysClockFreq+0x354>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004664:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004668:	4b35      	ldr	r3, [pc, #212]	; (8004740 <HAL_RCC_GetSysClockFreq+0x354>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d06b      	beq.n	800474c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004674:	4b32      	ldr	r3, [pc, #200]	; (8004740 <HAL_RCC_GetSysClockFreq+0x354>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	099b      	lsrs	r3, r3, #6
 800467a:	2200      	movs	r2, #0
 800467c:	66bb      	str	r3, [r7, #104]	; 0x68
 800467e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004680:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004686:	663b      	str	r3, [r7, #96]	; 0x60
 8004688:	2300      	movs	r3, #0
 800468a:	667b      	str	r3, [r7, #100]	; 0x64
 800468c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004690:	4622      	mov	r2, r4
 8004692:	462b      	mov	r3, r5
 8004694:	f04f 0000 	mov.w	r0, #0
 8004698:	f04f 0100 	mov.w	r1, #0
 800469c:	0159      	lsls	r1, r3, #5
 800469e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046a2:	0150      	lsls	r0, r2, #5
 80046a4:	4602      	mov	r2, r0
 80046a6:	460b      	mov	r3, r1
 80046a8:	4621      	mov	r1, r4
 80046aa:	1a51      	subs	r1, r2, r1
 80046ac:	61b9      	str	r1, [r7, #24]
 80046ae:	4629      	mov	r1, r5
 80046b0:	eb63 0301 	sbc.w	r3, r3, r1
 80046b4:	61fb      	str	r3, [r7, #28]
 80046b6:	f04f 0200 	mov.w	r2, #0
 80046ba:	f04f 0300 	mov.w	r3, #0
 80046be:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80046c2:	4659      	mov	r1, fp
 80046c4:	018b      	lsls	r3, r1, #6
 80046c6:	4651      	mov	r1, sl
 80046c8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046cc:	4651      	mov	r1, sl
 80046ce:	018a      	lsls	r2, r1, #6
 80046d0:	4651      	mov	r1, sl
 80046d2:	ebb2 0801 	subs.w	r8, r2, r1
 80046d6:	4659      	mov	r1, fp
 80046d8:	eb63 0901 	sbc.w	r9, r3, r1
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	f04f 0300 	mov.w	r3, #0
 80046e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046f0:	4690      	mov	r8, r2
 80046f2:	4699      	mov	r9, r3
 80046f4:	4623      	mov	r3, r4
 80046f6:	eb18 0303 	adds.w	r3, r8, r3
 80046fa:	613b      	str	r3, [r7, #16]
 80046fc:	462b      	mov	r3, r5
 80046fe:	eb49 0303 	adc.w	r3, r9, r3
 8004702:	617b      	str	r3, [r7, #20]
 8004704:	f04f 0200 	mov.w	r2, #0
 8004708:	f04f 0300 	mov.w	r3, #0
 800470c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004710:	4629      	mov	r1, r5
 8004712:	024b      	lsls	r3, r1, #9
 8004714:	4621      	mov	r1, r4
 8004716:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800471a:	4621      	mov	r1, r4
 800471c:	024a      	lsls	r2, r1, #9
 800471e:	4610      	mov	r0, r2
 8004720:	4619      	mov	r1, r3
 8004722:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004726:	2200      	movs	r2, #0
 8004728:	65bb      	str	r3, [r7, #88]	; 0x58
 800472a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800472c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004730:	f7fc f9b0 	bl	8000a94 <__aeabi_uldivmod>
 8004734:	4602      	mov	r2, r0
 8004736:	460b      	mov	r3, r1
 8004738:	4613      	mov	r3, r2
 800473a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800473e:	e065      	b.n	800480c <HAL_RCC_GetSysClockFreq+0x420>
 8004740:	40023800 	.word	0x40023800
 8004744:	00f42400 	.word	0x00f42400
 8004748:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800474c:	4b3d      	ldr	r3, [pc, #244]	; (8004844 <HAL_RCC_GetSysClockFreq+0x458>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	099b      	lsrs	r3, r3, #6
 8004752:	2200      	movs	r2, #0
 8004754:	4618      	mov	r0, r3
 8004756:	4611      	mov	r1, r2
 8004758:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800475c:	653b      	str	r3, [r7, #80]	; 0x50
 800475e:	2300      	movs	r3, #0
 8004760:	657b      	str	r3, [r7, #84]	; 0x54
 8004762:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004766:	4642      	mov	r2, r8
 8004768:	464b      	mov	r3, r9
 800476a:	f04f 0000 	mov.w	r0, #0
 800476e:	f04f 0100 	mov.w	r1, #0
 8004772:	0159      	lsls	r1, r3, #5
 8004774:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004778:	0150      	lsls	r0, r2, #5
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	4641      	mov	r1, r8
 8004780:	1a51      	subs	r1, r2, r1
 8004782:	60b9      	str	r1, [r7, #8]
 8004784:	4649      	mov	r1, r9
 8004786:	eb63 0301 	sbc.w	r3, r3, r1
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	f04f 0200 	mov.w	r2, #0
 8004790:	f04f 0300 	mov.w	r3, #0
 8004794:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004798:	4659      	mov	r1, fp
 800479a:	018b      	lsls	r3, r1, #6
 800479c:	4651      	mov	r1, sl
 800479e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047a2:	4651      	mov	r1, sl
 80047a4:	018a      	lsls	r2, r1, #6
 80047a6:	4651      	mov	r1, sl
 80047a8:	1a54      	subs	r4, r2, r1
 80047aa:	4659      	mov	r1, fp
 80047ac:	eb63 0501 	sbc.w	r5, r3, r1
 80047b0:	f04f 0200 	mov.w	r2, #0
 80047b4:	f04f 0300 	mov.w	r3, #0
 80047b8:	00eb      	lsls	r3, r5, #3
 80047ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047be:	00e2      	lsls	r2, r4, #3
 80047c0:	4614      	mov	r4, r2
 80047c2:	461d      	mov	r5, r3
 80047c4:	4643      	mov	r3, r8
 80047c6:	18e3      	adds	r3, r4, r3
 80047c8:	603b      	str	r3, [r7, #0]
 80047ca:	464b      	mov	r3, r9
 80047cc:	eb45 0303 	adc.w	r3, r5, r3
 80047d0:	607b      	str	r3, [r7, #4]
 80047d2:	f04f 0200 	mov.w	r2, #0
 80047d6:	f04f 0300 	mov.w	r3, #0
 80047da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047de:	4629      	mov	r1, r5
 80047e0:	028b      	lsls	r3, r1, #10
 80047e2:	4621      	mov	r1, r4
 80047e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047e8:	4621      	mov	r1, r4
 80047ea:	028a      	lsls	r2, r1, #10
 80047ec:	4610      	mov	r0, r2
 80047ee:	4619      	mov	r1, r3
 80047f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80047f4:	2200      	movs	r2, #0
 80047f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80047f8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80047fa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80047fe:	f7fc f949 	bl	8000a94 <__aeabi_uldivmod>
 8004802:	4602      	mov	r2, r0
 8004804:	460b      	mov	r3, r1
 8004806:	4613      	mov	r3, r2
 8004808:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800480c:	4b0d      	ldr	r3, [pc, #52]	; (8004844 <HAL_RCC_GetSysClockFreq+0x458>)
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	0f1b      	lsrs	r3, r3, #28
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800481a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800481e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004822:	fbb2 f3f3 	udiv	r3, r2, r3
 8004826:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800482a:	e003      	b.n	8004834 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800482c:	4b06      	ldr	r3, [pc, #24]	; (8004848 <HAL_RCC_GetSysClockFreq+0x45c>)
 800482e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004832:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004834:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004838:	4618      	mov	r0, r3
 800483a:	37b8      	adds	r7, #184	; 0xb8
 800483c:	46bd      	mov	sp, r7
 800483e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004842:	bf00      	nop
 8004844:	40023800 	.word	0x40023800
 8004848:	00f42400 	.word	0x00f42400

0800484c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e28d      	b.n	8004d7a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 8083 	beq.w	8004972 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800486c:	4b94      	ldr	r3, [pc, #592]	; (8004ac0 <HAL_RCC_OscConfig+0x274>)
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f003 030c 	and.w	r3, r3, #12
 8004874:	2b04      	cmp	r3, #4
 8004876:	d019      	beq.n	80048ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004878:	4b91      	ldr	r3, [pc, #580]	; (8004ac0 <HAL_RCC_OscConfig+0x274>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004880:	2b08      	cmp	r3, #8
 8004882:	d106      	bne.n	8004892 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004884:	4b8e      	ldr	r3, [pc, #568]	; (8004ac0 <HAL_RCC_OscConfig+0x274>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800488c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004890:	d00c      	beq.n	80048ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004892:	4b8b      	ldr	r3, [pc, #556]	; (8004ac0 <HAL_RCC_OscConfig+0x274>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800489a:	2b0c      	cmp	r3, #12
 800489c:	d112      	bne.n	80048c4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800489e:	4b88      	ldr	r3, [pc, #544]	; (8004ac0 <HAL_RCC_OscConfig+0x274>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048aa:	d10b      	bne.n	80048c4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048ac:	4b84      	ldr	r3, [pc, #528]	; (8004ac0 <HAL_RCC_OscConfig+0x274>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d05b      	beq.n	8004970 <HAL_RCC_OscConfig+0x124>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d157      	bne.n	8004970 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e25a      	b.n	8004d7a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048cc:	d106      	bne.n	80048dc <HAL_RCC_OscConfig+0x90>
 80048ce:	4b7c      	ldr	r3, [pc, #496]	; (8004ac0 <HAL_RCC_OscConfig+0x274>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a7b      	ldr	r2, [pc, #492]	; (8004ac0 <HAL_RCC_OscConfig+0x274>)
 80048d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048d8:	6013      	str	r3, [r2, #0]
 80048da:	e01d      	b.n	8004918 <HAL_RCC_OscConfig+0xcc>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048e4:	d10c      	bne.n	8004900 <HAL_RCC_OscConfig+0xb4>
 80048e6:	4b76      	ldr	r3, [pc, #472]	; (8004ac0 <HAL_RCC_OscConfig+0x274>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a75      	ldr	r2, [pc, #468]	; (8004ac0 <HAL_RCC_OscConfig+0x274>)
 80048ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	4b73      	ldr	r3, [pc, #460]	; (8004ac0 <HAL_RCC_OscConfig+0x274>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a72      	ldr	r2, [pc, #456]	; (8004ac0 <HAL_RCC_OscConfig+0x274>)
 80048f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048fc:	6013      	str	r3, [r2, #0]
 80048fe:	e00b      	b.n	8004918 <HAL_RCC_OscConfig+0xcc>
 8004900:	4b6f      	ldr	r3, [pc, #444]	; (8004ac0 <HAL_RCC_OscConfig+0x274>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a6e      	ldr	r2, [pc, #440]	; (8004ac0 <HAL_RCC_OscConfig+0x274>)
 8004906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800490a:	6013      	str	r3, [r2, #0]
 800490c:	4b6c      	ldr	r3, [pc, #432]	; (8004ac0 <HAL_RCC_OscConfig+0x274>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a6b      	ldr	r2, [pc, #428]	; (8004ac0 <HAL_RCC_OscConfig+0x274>)
 8004912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004916:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d013      	beq.n	8004948 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004920:	f7fe f9d2 	bl	8002cc8 <HAL_GetTick>
 8004924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004926:	e008      	b.n	800493a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004928:	f7fe f9ce 	bl	8002cc8 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b64      	cmp	r3, #100	; 0x64
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e21f      	b.n	8004d7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800493a:	4b61      	ldr	r3, [pc, #388]	; (8004ac0 <HAL_RCC_OscConfig+0x274>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d0f0      	beq.n	8004928 <HAL_RCC_OscConfig+0xdc>
 8004946:	e014      	b.n	8004972 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004948:	f7fe f9be 	bl	8002cc8 <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004950:	f7fe f9ba 	bl	8002cc8 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b64      	cmp	r3, #100	; 0x64
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e20b      	b.n	8004d7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004962:	4b57      	ldr	r3, [pc, #348]	; (8004ac0 <HAL_RCC_OscConfig+0x274>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1f0      	bne.n	8004950 <HAL_RCC_OscConfig+0x104>
 800496e:	e000      	b.n	8004972 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d06f      	beq.n	8004a5e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800497e:	4b50      	ldr	r3, [pc, #320]	; (8004ac0 <HAL_RCC_OscConfig+0x274>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f003 030c 	and.w	r3, r3, #12
 8004986:	2b00      	cmp	r3, #0
 8004988:	d017      	beq.n	80049ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800498a:	4b4d      	ldr	r3, [pc, #308]	; (8004ac0 <HAL_RCC_OscConfig+0x274>)
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004992:	2b08      	cmp	r3, #8
 8004994:	d105      	bne.n	80049a2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004996:	4b4a      	ldr	r3, [pc, #296]	; (8004ac0 <HAL_RCC_OscConfig+0x274>)
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00b      	beq.n	80049ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049a2:	4b47      	ldr	r3, [pc, #284]	; (8004ac0 <HAL_RCC_OscConfig+0x274>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80049aa:	2b0c      	cmp	r3, #12
 80049ac:	d11c      	bne.n	80049e8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ae:	4b44      	ldr	r3, [pc, #272]	; (8004ac0 <HAL_RCC_OscConfig+0x274>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d116      	bne.n	80049e8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ba:	4b41      	ldr	r3, [pc, #260]	; (8004ac0 <HAL_RCC_OscConfig+0x274>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d005      	beq.n	80049d2 <HAL_RCC_OscConfig+0x186>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d001      	beq.n	80049d2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e1d3      	b.n	8004d7a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049d2:	4b3b      	ldr	r3, [pc, #236]	; (8004ac0 <HAL_RCC_OscConfig+0x274>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	4937      	ldr	r1, [pc, #220]	; (8004ac0 <HAL_RCC_OscConfig+0x274>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049e6:	e03a      	b.n	8004a5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d020      	beq.n	8004a32 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049f0:	4b34      	ldr	r3, [pc, #208]	; (8004ac4 <HAL_RCC_OscConfig+0x278>)
 80049f2:	2201      	movs	r2, #1
 80049f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f6:	f7fe f967 	bl	8002cc8 <HAL_GetTick>
 80049fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049fc:	e008      	b.n	8004a10 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049fe:	f7fe f963 	bl	8002cc8 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d901      	bls.n	8004a10 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e1b4      	b.n	8004d7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a10:	4b2b      	ldr	r3, [pc, #172]	; (8004ac0 <HAL_RCC_OscConfig+0x274>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0f0      	beq.n	80049fe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a1c:	4b28      	ldr	r3, [pc, #160]	; (8004ac0 <HAL_RCC_OscConfig+0x274>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	00db      	lsls	r3, r3, #3
 8004a2a:	4925      	ldr	r1, [pc, #148]	; (8004ac0 <HAL_RCC_OscConfig+0x274>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	600b      	str	r3, [r1, #0]
 8004a30:	e015      	b.n	8004a5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a32:	4b24      	ldr	r3, [pc, #144]	; (8004ac4 <HAL_RCC_OscConfig+0x278>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a38:	f7fe f946 	bl	8002cc8 <HAL_GetTick>
 8004a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a3e:	e008      	b.n	8004a52 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a40:	f7fe f942 	bl	8002cc8 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e193      	b.n	8004d7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a52:	4b1b      	ldr	r3, [pc, #108]	; (8004ac0 <HAL_RCC_OscConfig+0x274>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1f0      	bne.n	8004a40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0308 	and.w	r3, r3, #8
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d036      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d016      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a72:	4b15      	ldr	r3, [pc, #84]	; (8004ac8 <HAL_RCC_OscConfig+0x27c>)
 8004a74:	2201      	movs	r2, #1
 8004a76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a78:	f7fe f926 	bl	8002cc8 <HAL_GetTick>
 8004a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a80:	f7fe f922 	bl	8002cc8 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e173      	b.n	8004d7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a92:	4b0b      	ldr	r3, [pc, #44]	; (8004ac0 <HAL_RCC_OscConfig+0x274>)
 8004a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d0f0      	beq.n	8004a80 <HAL_RCC_OscConfig+0x234>
 8004a9e:	e01b      	b.n	8004ad8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004aa0:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <HAL_RCC_OscConfig+0x27c>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa6:	f7fe f90f 	bl	8002cc8 <HAL_GetTick>
 8004aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aac:	e00e      	b.n	8004acc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004aae:	f7fe f90b 	bl	8002cc8 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d907      	bls.n	8004acc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e15c      	b.n	8004d7a <HAL_RCC_OscConfig+0x52e>
 8004ac0:	40023800 	.word	0x40023800
 8004ac4:	42470000 	.word	0x42470000
 8004ac8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004acc:	4b8a      	ldr	r3, [pc, #552]	; (8004cf8 <HAL_RCC_OscConfig+0x4ac>)
 8004ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1ea      	bne.n	8004aae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 8097 	beq.w	8004c14 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aea:	4b83      	ldr	r3, [pc, #524]	; (8004cf8 <HAL_RCC_OscConfig+0x4ac>)
 8004aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10f      	bne.n	8004b16 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004af6:	2300      	movs	r3, #0
 8004af8:	60bb      	str	r3, [r7, #8]
 8004afa:	4b7f      	ldr	r3, [pc, #508]	; (8004cf8 <HAL_RCC_OscConfig+0x4ac>)
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	4a7e      	ldr	r2, [pc, #504]	; (8004cf8 <HAL_RCC_OscConfig+0x4ac>)
 8004b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b04:	6413      	str	r3, [r2, #64]	; 0x40
 8004b06:	4b7c      	ldr	r3, [pc, #496]	; (8004cf8 <HAL_RCC_OscConfig+0x4ac>)
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b0e:	60bb      	str	r3, [r7, #8]
 8004b10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b12:	2301      	movs	r3, #1
 8004b14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b16:	4b79      	ldr	r3, [pc, #484]	; (8004cfc <HAL_RCC_OscConfig+0x4b0>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d118      	bne.n	8004b54 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b22:	4b76      	ldr	r3, [pc, #472]	; (8004cfc <HAL_RCC_OscConfig+0x4b0>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a75      	ldr	r2, [pc, #468]	; (8004cfc <HAL_RCC_OscConfig+0x4b0>)
 8004b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b2e:	f7fe f8cb 	bl	8002cc8 <HAL_GetTick>
 8004b32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b34:	e008      	b.n	8004b48 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b36:	f7fe f8c7 	bl	8002cc8 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d901      	bls.n	8004b48 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e118      	b.n	8004d7a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b48:	4b6c      	ldr	r3, [pc, #432]	; (8004cfc <HAL_RCC_OscConfig+0x4b0>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d0f0      	beq.n	8004b36 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d106      	bne.n	8004b6a <HAL_RCC_OscConfig+0x31e>
 8004b5c:	4b66      	ldr	r3, [pc, #408]	; (8004cf8 <HAL_RCC_OscConfig+0x4ac>)
 8004b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b60:	4a65      	ldr	r2, [pc, #404]	; (8004cf8 <HAL_RCC_OscConfig+0x4ac>)
 8004b62:	f043 0301 	orr.w	r3, r3, #1
 8004b66:	6713      	str	r3, [r2, #112]	; 0x70
 8004b68:	e01c      	b.n	8004ba4 <HAL_RCC_OscConfig+0x358>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	2b05      	cmp	r3, #5
 8004b70:	d10c      	bne.n	8004b8c <HAL_RCC_OscConfig+0x340>
 8004b72:	4b61      	ldr	r3, [pc, #388]	; (8004cf8 <HAL_RCC_OscConfig+0x4ac>)
 8004b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b76:	4a60      	ldr	r2, [pc, #384]	; (8004cf8 <HAL_RCC_OscConfig+0x4ac>)
 8004b78:	f043 0304 	orr.w	r3, r3, #4
 8004b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b7e:	4b5e      	ldr	r3, [pc, #376]	; (8004cf8 <HAL_RCC_OscConfig+0x4ac>)
 8004b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b82:	4a5d      	ldr	r2, [pc, #372]	; (8004cf8 <HAL_RCC_OscConfig+0x4ac>)
 8004b84:	f043 0301 	orr.w	r3, r3, #1
 8004b88:	6713      	str	r3, [r2, #112]	; 0x70
 8004b8a:	e00b      	b.n	8004ba4 <HAL_RCC_OscConfig+0x358>
 8004b8c:	4b5a      	ldr	r3, [pc, #360]	; (8004cf8 <HAL_RCC_OscConfig+0x4ac>)
 8004b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b90:	4a59      	ldr	r2, [pc, #356]	; (8004cf8 <HAL_RCC_OscConfig+0x4ac>)
 8004b92:	f023 0301 	bic.w	r3, r3, #1
 8004b96:	6713      	str	r3, [r2, #112]	; 0x70
 8004b98:	4b57      	ldr	r3, [pc, #348]	; (8004cf8 <HAL_RCC_OscConfig+0x4ac>)
 8004b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9c:	4a56      	ldr	r2, [pc, #344]	; (8004cf8 <HAL_RCC_OscConfig+0x4ac>)
 8004b9e:	f023 0304 	bic.w	r3, r3, #4
 8004ba2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d015      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bac:	f7fe f88c 	bl	8002cc8 <HAL_GetTick>
 8004bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bb2:	e00a      	b.n	8004bca <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bb4:	f7fe f888 	bl	8002cc8 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e0d7      	b.n	8004d7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bca:	4b4b      	ldr	r3, [pc, #300]	; (8004cf8 <HAL_RCC_OscConfig+0x4ac>)
 8004bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0ee      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x368>
 8004bd6:	e014      	b.n	8004c02 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd8:	f7fe f876 	bl	8002cc8 <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bde:	e00a      	b.n	8004bf6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004be0:	f7fe f872 	bl	8002cc8 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e0c1      	b.n	8004d7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bf6:	4b40      	ldr	r3, [pc, #256]	; (8004cf8 <HAL_RCC_OscConfig+0x4ac>)
 8004bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1ee      	bne.n	8004be0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c02:	7dfb      	ldrb	r3, [r7, #23]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d105      	bne.n	8004c14 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c08:	4b3b      	ldr	r3, [pc, #236]	; (8004cf8 <HAL_RCC_OscConfig+0x4ac>)
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0c:	4a3a      	ldr	r2, [pc, #232]	; (8004cf8 <HAL_RCC_OscConfig+0x4ac>)
 8004c0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 80ad 	beq.w	8004d78 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c1e:	4b36      	ldr	r3, [pc, #216]	; (8004cf8 <HAL_RCC_OscConfig+0x4ac>)
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f003 030c 	and.w	r3, r3, #12
 8004c26:	2b08      	cmp	r3, #8
 8004c28:	d060      	beq.n	8004cec <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d145      	bne.n	8004cbe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c32:	4b33      	ldr	r3, [pc, #204]	; (8004d00 <HAL_RCC_OscConfig+0x4b4>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c38:	f7fe f846 	bl	8002cc8 <HAL_GetTick>
 8004c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c3e:	e008      	b.n	8004c52 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c40:	f7fe f842 	bl	8002cc8 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e093      	b.n	8004d7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c52:	4b29      	ldr	r3, [pc, #164]	; (8004cf8 <HAL_RCC_OscConfig+0x4ac>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1f0      	bne.n	8004c40 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	69da      	ldr	r2, [r3, #28]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	431a      	orrs	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6c:	019b      	lsls	r3, r3, #6
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c74:	085b      	lsrs	r3, r3, #1
 8004c76:	3b01      	subs	r3, #1
 8004c78:	041b      	lsls	r3, r3, #16
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c80:	061b      	lsls	r3, r3, #24
 8004c82:	431a      	orrs	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c88:	071b      	lsls	r3, r3, #28
 8004c8a:	491b      	ldr	r1, [pc, #108]	; (8004cf8 <HAL_RCC_OscConfig+0x4ac>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c90:	4b1b      	ldr	r3, [pc, #108]	; (8004d00 <HAL_RCC_OscConfig+0x4b4>)
 8004c92:	2201      	movs	r2, #1
 8004c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c96:	f7fe f817 	bl	8002cc8 <HAL_GetTick>
 8004c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c9c:	e008      	b.n	8004cb0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c9e:	f7fe f813 	bl	8002cc8 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e064      	b.n	8004d7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cb0:	4b11      	ldr	r3, [pc, #68]	; (8004cf8 <HAL_RCC_OscConfig+0x4ac>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d0f0      	beq.n	8004c9e <HAL_RCC_OscConfig+0x452>
 8004cbc:	e05c      	b.n	8004d78 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cbe:	4b10      	ldr	r3, [pc, #64]	; (8004d00 <HAL_RCC_OscConfig+0x4b4>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc4:	f7fe f800 	bl	8002cc8 <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ccc:	f7fd fffc 	bl	8002cc8 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e04d      	b.n	8004d7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cde:	4b06      	ldr	r3, [pc, #24]	; (8004cf8 <HAL_RCC_OscConfig+0x4ac>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1f0      	bne.n	8004ccc <HAL_RCC_OscConfig+0x480>
 8004cea:	e045      	b.n	8004d78 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d107      	bne.n	8004d04 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e040      	b.n	8004d7a <HAL_RCC_OscConfig+0x52e>
 8004cf8:	40023800 	.word	0x40023800
 8004cfc:	40007000 	.word	0x40007000
 8004d00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d04:	4b1f      	ldr	r3, [pc, #124]	; (8004d84 <HAL_RCC_OscConfig+0x538>)
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d030      	beq.n	8004d74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d129      	bne.n	8004d74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d122      	bne.n	8004d74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d34:	4013      	ands	r3, r2
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d119      	bne.n	8004d74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4a:	085b      	lsrs	r3, r3, #1
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d10f      	bne.n	8004d74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d107      	bne.n	8004d74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d001      	beq.n	8004d78 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e000      	b.n	8004d7a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3718      	adds	r7, #24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	40023800 	.word	0x40023800

08004d88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e041      	b.n	8004e1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d106      	bne.n	8004db4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7fd fcfc 	bl	80027ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2202      	movs	r2, #2
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3304      	adds	r3, #4
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4610      	mov	r0, r2
 8004dc8:	f000 fdb0 	bl	800592c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
	...

08004e28 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d001      	beq.n	8004e40 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e046      	b.n	8004ece <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2202      	movs	r2, #2
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a23      	ldr	r2, [pc, #140]	; (8004edc <HAL_TIM_Base_Start+0xb4>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d022      	beq.n	8004e98 <HAL_TIM_Base_Start+0x70>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e5a:	d01d      	beq.n	8004e98 <HAL_TIM_Base_Start+0x70>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a1f      	ldr	r2, [pc, #124]	; (8004ee0 <HAL_TIM_Base_Start+0xb8>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d018      	beq.n	8004e98 <HAL_TIM_Base_Start+0x70>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a1e      	ldr	r2, [pc, #120]	; (8004ee4 <HAL_TIM_Base_Start+0xbc>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d013      	beq.n	8004e98 <HAL_TIM_Base_Start+0x70>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a1c      	ldr	r2, [pc, #112]	; (8004ee8 <HAL_TIM_Base_Start+0xc0>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d00e      	beq.n	8004e98 <HAL_TIM_Base_Start+0x70>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a1b      	ldr	r2, [pc, #108]	; (8004eec <HAL_TIM_Base_Start+0xc4>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d009      	beq.n	8004e98 <HAL_TIM_Base_Start+0x70>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a19      	ldr	r2, [pc, #100]	; (8004ef0 <HAL_TIM_Base_Start+0xc8>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d004      	beq.n	8004e98 <HAL_TIM_Base_Start+0x70>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a18      	ldr	r2, [pc, #96]	; (8004ef4 <HAL_TIM_Base_Start+0xcc>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d111      	bne.n	8004ebc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f003 0307 	and.w	r3, r3, #7
 8004ea2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2b06      	cmp	r3, #6
 8004ea8:	d010      	beq.n	8004ecc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f042 0201 	orr.w	r2, r2, #1
 8004eb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eba:	e007      	b.n	8004ecc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f042 0201 	orr.w	r2, r2, #1
 8004eca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	40010000 	.word	0x40010000
 8004ee0:	40000400 	.word	0x40000400
 8004ee4:	40000800 	.word	0x40000800
 8004ee8:	40000c00 	.word	0x40000c00
 8004eec:	40010400 	.word	0x40010400
 8004ef0:	40014000 	.word	0x40014000
 8004ef4:	40001800 	.word	0x40001800

08004ef8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e041      	b.n	8004f8e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d106      	bne.n	8004f24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f839 	bl	8004f96 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3304      	adds	r3, #4
 8004f34:	4619      	mov	r1, r3
 8004f36:	4610      	mov	r0, r2
 8004f38:	f000 fcf8 	bl	800592c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3708      	adds	r7, #8
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b083      	sub	sp, #12
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f9e:	bf00      	nop
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
	...

08004fac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d109      	bne.n	8004fd0 <HAL_TIM_PWM_Start+0x24>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	bf14      	ite	ne
 8004fc8:	2301      	movne	r3, #1
 8004fca:	2300      	moveq	r3, #0
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	e022      	b.n	8005016 <HAL_TIM_PWM_Start+0x6a>
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	d109      	bne.n	8004fea <HAL_TIM_PWM_Start+0x3e>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	bf14      	ite	ne
 8004fe2:	2301      	movne	r3, #1
 8004fe4:	2300      	moveq	r3, #0
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	e015      	b.n	8005016 <HAL_TIM_PWM_Start+0x6a>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2b08      	cmp	r3, #8
 8004fee:	d109      	bne.n	8005004 <HAL_TIM_PWM_Start+0x58>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	bf14      	ite	ne
 8004ffc:	2301      	movne	r3, #1
 8004ffe:	2300      	moveq	r3, #0
 8005000:	b2db      	uxtb	r3, r3
 8005002:	e008      	b.n	8005016 <HAL_TIM_PWM_Start+0x6a>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b01      	cmp	r3, #1
 800500e:	bf14      	ite	ne
 8005010:	2301      	movne	r3, #1
 8005012:	2300      	moveq	r3, #0
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e07c      	b.n	8005118 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d104      	bne.n	800502e <HAL_TIM_PWM_Start+0x82>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2202      	movs	r2, #2
 8005028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800502c:	e013      	b.n	8005056 <HAL_TIM_PWM_Start+0xaa>
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	2b04      	cmp	r3, #4
 8005032:	d104      	bne.n	800503e <HAL_TIM_PWM_Start+0x92>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2202      	movs	r2, #2
 8005038:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800503c:	e00b      	b.n	8005056 <HAL_TIM_PWM_Start+0xaa>
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	2b08      	cmp	r3, #8
 8005042:	d104      	bne.n	800504e <HAL_TIM_PWM_Start+0xa2>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2202      	movs	r2, #2
 8005048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800504c:	e003      	b.n	8005056 <HAL_TIM_PWM_Start+0xaa>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2202      	movs	r2, #2
 8005052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2201      	movs	r2, #1
 800505c:	6839      	ldr	r1, [r7, #0]
 800505e:	4618      	mov	r0, r3
 8005060:	f000 ff4e 	bl	8005f00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a2d      	ldr	r2, [pc, #180]	; (8005120 <HAL_TIM_PWM_Start+0x174>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d004      	beq.n	8005078 <HAL_TIM_PWM_Start+0xcc>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a2c      	ldr	r2, [pc, #176]	; (8005124 <HAL_TIM_PWM_Start+0x178>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d101      	bne.n	800507c <HAL_TIM_PWM_Start+0xd0>
 8005078:	2301      	movs	r3, #1
 800507a:	e000      	b.n	800507e <HAL_TIM_PWM_Start+0xd2>
 800507c:	2300      	movs	r3, #0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d007      	beq.n	8005092 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005090:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a22      	ldr	r2, [pc, #136]	; (8005120 <HAL_TIM_PWM_Start+0x174>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d022      	beq.n	80050e2 <HAL_TIM_PWM_Start+0x136>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a4:	d01d      	beq.n	80050e2 <HAL_TIM_PWM_Start+0x136>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a1f      	ldr	r2, [pc, #124]	; (8005128 <HAL_TIM_PWM_Start+0x17c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d018      	beq.n	80050e2 <HAL_TIM_PWM_Start+0x136>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a1d      	ldr	r2, [pc, #116]	; (800512c <HAL_TIM_PWM_Start+0x180>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d013      	beq.n	80050e2 <HAL_TIM_PWM_Start+0x136>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a1c      	ldr	r2, [pc, #112]	; (8005130 <HAL_TIM_PWM_Start+0x184>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d00e      	beq.n	80050e2 <HAL_TIM_PWM_Start+0x136>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a16      	ldr	r2, [pc, #88]	; (8005124 <HAL_TIM_PWM_Start+0x178>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d009      	beq.n	80050e2 <HAL_TIM_PWM_Start+0x136>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a18      	ldr	r2, [pc, #96]	; (8005134 <HAL_TIM_PWM_Start+0x188>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d004      	beq.n	80050e2 <HAL_TIM_PWM_Start+0x136>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a16      	ldr	r2, [pc, #88]	; (8005138 <HAL_TIM_PWM_Start+0x18c>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d111      	bne.n	8005106 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f003 0307 	and.w	r3, r3, #7
 80050ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2b06      	cmp	r3, #6
 80050f2:	d010      	beq.n	8005116 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f042 0201 	orr.w	r2, r2, #1
 8005102:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005104:	e007      	b.n	8005116 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f042 0201 	orr.w	r2, r2, #1
 8005114:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	40010000 	.word	0x40010000
 8005124:	40010400 	.word	0x40010400
 8005128:	40000400 	.word	0x40000400
 800512c:	40000800 	.word	0x40000800
 8005130:	40000c00 	.word	0x40000c00
 8005134:	40014000 	.word	0x40014000
 8005138:	40001800 	.word	0x40001800

0800513c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b086      	sub	sp, #24
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d101      	bne.n	8005150 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e097      	b.n	8005280 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b00      	cmp	r3, #0
 800515a:	d106      	bne.n	800516a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f7fd fb8b 	bl	8002880 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2202      	movs	r2, #2
 800516e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	6812      	ldr	r2, [r2, #0]
 800517c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005180:	f023 0307 	bic.w	r3, r3, #7
 8005184:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	3304      	adds	r3, #4
 800518e:	4619      	mov	r1, r3
 8005190:	4610      	mov	r0, r2
 8005192:	f000 fbcb 	bl	800592c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	6a1b      	ldr	r3, [r3, #32]
 80051ac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051be:	f023 0303 	bic.w	r3, r3, #3
 80051c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	689a      	ldr	r2, [r3, #8]
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	021b      	lsls	r3, r3, #8
 80051ce:	4313      	orrs	r3, r2
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80051dc:	f023 030c 	bic.w	r3, r3, #12
 80051e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	68da      	ldr	r2, [r3, #12]
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	021b      	lsls	r3, r3, #8
 80051f8:	4313      	orrs	r3, r2
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	011a      	lsls	r2, r3, #4
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	031b      	lsls	r3, r3, #12
 800520c:	4313      	orrs	r3, r2
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	4313      	orrs	r3, r2
 8005212:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800521a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005222:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	011b      	lsls	r3, r3, #4
 800522e:	4313      	orrs	r3, r2
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	4313      	orrs	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3718      	adds	r7, #24
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005298:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052a0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80052a8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80052b0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d110      	bne.n	80052da <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80052b8:	7bfb      	ldrb	r3, [r7, #15]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d102      	bne.n	80052c4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80052be:	7b7b      	ldrb	r3, [r7, #13]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d001      	beq.n	80052c8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e069      	b.n	800539c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2202      	movs	r2, #2
 80052cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052d8:	e031      	b.n	800533e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b04      	cmp	r3, #4
 80052de:	d110      	bne.n	8005302 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80052e0:	7bbb      	ldrb	r3, [r7, #14]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d102      	bne.n	80052ec <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80052e6:	7b3b      	ldrb	r3, [r7, #12]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d001      	beq.n	80052f0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e055      	b.n	800539c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2202      	movs	r2, #2
 80052fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005300:	e01d      	b.n	800533e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005302:	7bfb      	ldrb	r3, [r7, #15]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d108      	bne.n	800531a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005308:	7bbb      	ldrb	r3, [r7, #14]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d105      	bne.n	800531a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800530e:	7b7b      	ldrb	r3, [r7, #13]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d102      	bne.n	800531a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005314:	7b3b      	ldrb	r3, [r7, #12]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d001      	beq.n	800531e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e03e      	b.n	800539c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2202      	movs	r2, #2
 8005322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2202      	movs	r2, #2
 800532a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2202      	movs	r2, #2
 8005332:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2202      	movs	r2, #2
 800533a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d003      	beq.n	800534c <HAL_TIM_Encoder_Start+0xc4>
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	2b04      	cmp	r3, #4
 8005348:	d008      	beq.n	800535c <HAL_TIM_Encoder_Start+0xd4>
 800534a:	e00f      	b.n	800536c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2201      	movs	r2, #1
 8005352:	2100      	movs	r1, #0
 8005354:	4618      	mov	r0, r3
 8005356:	f000 fdd3 	bl	8005f00 <TIM_CCxChannelCmd>
      break;
 800535a:	e016      	b.n	800538a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2201      	movs	r2, #1
 8005362:	2104      	movs	r1, #4
 8005364:	4618      	mov	r0, r3
 8005366:	f000 fdcb 	bl	8005f00 <TIM_CCxChannelCmd>
      break;
 800536a:	e00e      	b.n	800538a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2201      	movs	r2, #1
 8005372:	2100      	movs	r1, #0
 8005374:	4618      	mov	r0, r3
 8005376:	f000 fdc3 	bl	8005f00 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2201      	movs	r2, #1
 8005380:	2104      	movs	r1, #4
 8005382:	4618      	mov	r0, r3
 8005384:	f000 fdbc 	bl	8005f00 <TIM_CCxChannelCmd>
      break;
 8005388:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f042 0201 	orr.w	r2, r2, #1
 8005398:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d122      	bne.n	8005400 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d11b      	bne.n	8005400 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f06f 0202 	mvn.w	r2, #2
 80053d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	f003 0303 	and.w	r3, r3, #3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d003      	beq.n	80053ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 fa81 	bl	80058ee <HAL_TIM_IC_CaptureCallback>
 80053ec:	e005      	b.n	80053fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 fa73 	bl	80058da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 fa84 	bl	8005902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	f003 0304 	and.w	r3, r3, #4
 800540a:	2b04      	cmp	r3, #4
 800540c:	d122      	bne.n	8005454 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	f003 0304 	and.w	r3, r3, #4
 8005418:	2b04      	cmp	r3, #4
 800541a:	d11b      	bne.n	8005454 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f06f 0204 	mvn.w	r2, #4
 8005424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2202      	movs	r2, #2
 800542a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005436:	2b00      	cmp	r3, #0
 8005438:	d003      	beq.n	8005442 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 fa57 	bl	80058ee <HAL_TIM_IC_CaptureCallback>
 8005440:	e005      	b.n	800544e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 fa49 	bl	80058da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 fa5a 	bl	8005902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	f003 0308 	and.w	r3, r3, #8
 800545e:	2b08      	cmp	r3, #8
 8005460:	d122      	bne.n	80054a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	f003 0308 	and.w	r3, r3, #8
 800546c:	2b08      	cmp	r3, #8
 800546e:	d11b      	bne.n	80054a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f06f 0208 	mvn.w	r2, #8
 8005478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2204      	movs	r2, #4
 800547e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	f003 0303 	and.w	r3, r3, #3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d003      	beq.n	8005496 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 fa2d 	bl	80058ee <HAL_TIM_IC_CaptureCallback>
 8005494:	e005      	b.n	80054a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 fa1f 	bl	80058da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 fa30 	bl	8005902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	f003 0310 	and.w	r3, r3, #16
 80054b2:	2b10      	cmp	r3, #16
 80054b4:	d122      	bne.n	80054fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	f003 0310 	and.w	r3, r3, #16
 80054c0:	2b10      	cmp	r3, #16
 80054c2:	d11b      	bne.n	80054fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f06f 0210 	mvn.w	r2, #16
 80054cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2208      	movs	r2, #8
 80054d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d003      	beq.n	80054ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 fa03 	bl	80058ee <HAL_TIM_IC_CaptureCallback>
 80054e8:	e005      	b.n	80054f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 f9f5 	bl	80058da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 fa06 	bl	8005902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b01      	cmp	r3, #1
 8005508:	d10e      	bne.n	8005528 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	2b01      	cmp	r3, #1
 8005516:	d107      	bne.n	8005528 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f06f 0201 	mvn.w	r2, #1
 8005520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f9cf 	bl	80058c6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005532:	2b80      	cmp	r3, #128	; 0x80
 8005534:	d10e      	bne.n	8005554 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005540:	2b80      	cmp	r3, #128	; 0x80
 8005542:	d107      	bne.n	8005554 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800554c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 fd82 	bl	8006058 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800555e:	2b40      	cmp	r3, #64	; 0x40
 8005560:	d10e      	bne.n	8005580 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556c:	2b40      	cmp	r3, #64	; 0x40
 800556e:	d107      	bne.n	8005580 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f9cb 	bl	8005916 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	f003 0320 	and.w	r3, r3, #32
 800558a:	2b20      	cmp	r3, #32
 800558c:	d10e      	bne.n	80055ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	f003 0320 	and.w	r3, r3, #32
 8005598:	2b20      	cmp	r3, #32
 800559a:	d107      	bne.n	80055ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f06f 0220 	mvn.w	r2, #32
 80055a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 fd4c 	bl	8006044 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055ac:	bf00      	nop
 80055ae:	3708      	adds	r7, #8
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055c0:	2300      	movs	r3, #0
 80055c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d101      	bne.n	80055d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055ce:	2302      	movs	r3, #2
 80055d0:	e0ae      	b.n	8005730 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2b0c      	cmp	r3, #12
 80055de:	f200 809f 	bhi.w	8005720 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80055e2:	a201      	add	r2, pc, #4	; (adr r2, 80055e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80055e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e8:	0800561d 	.word	0x0800561d
 80055ec:	08005721 	.word	0x08005721
 80055f0:	08005721 	.word	0x08005721
 80055f4:	08005721 	.word	0x08005721
 80055f8:	0800565d 	.word	0x0800565d
 80055fc:	08005721 	.word	0x08005721
 8005600:	08005721 	.word	0x08005721
 8005604:	08005721 	.word	0x08005721
 8005608:	0800569f 	.word	0x0800569f
 800560c:	08005721 	.word	0x08005721
 8005610:	08005721 	.word	0x08005721
 8005614:	08005721 	.word	0x08005721
 8005618:	080056df 	.word	0x080056df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68b9      	ldr	r1, [r7, #8]
 8005622:	4618      	mov	r0, r3
 8005624:	f000 fa22 	bl	8005a6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	699a      	ldr	r2, [r3, #24]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f042 0208 	orr.w	r2, r2, #8
 8005636:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	699a      	ldr	r2, [r3, #24]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f022 0204 	bic.w	r2, r2, #4
 8005646:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6999      	ldr	r1, [r3, #24]
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	691a      	ldr	r2, [r3, #16]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	430a      	orrs	r2, r1
 8005658:	619a      	str	r2, [r3, #24]
      break;
 800565a:	e064      	b.n	8005726 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68b9      	ldr	r1, [r7, #8]
 8005662:	4618      	mov	r0, r3
 8005664:	f000 fa72 	bl	8005b4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	699a      	ldr	r2, [r3, #24]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005676:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	699a      	ldr	r2, [r3, #24]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005686:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6999      	ldr	r1, [r3, #24]
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	021a      	lsls	r2, r3, #8
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	430a      	orrs	r2, r1
 800569a:	619a      	str	r2, [r3, #24]
      break;
 800569c:	e043      	b.n	8005726 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68b9      	ldr	r1, [r7, #8]
 80056a4:	4618      	mov	r0, r3
 80056a6:	f000 fac7 	bl	8005c38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	69da      	ldr	r2, [r3, #28]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f042 0208 	orr.w	r2, r2, #8
 80056b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	69da      	ldr	r2, [r3, #28]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f022 0204 	bic.w	r2, r2, #4
 80056c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	69d9      	ldr	r1, [r3, #28]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	691a      	ldr	r2, [r3, #16]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	430a      	orrs	r2, r1
 80056da:	61da      	str	r2, [r3, #28]
      break;
 80056dc:	e023      	b.n	8005726 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68b9      	ldr	r1, [r7, #8]
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 fb1b 	bl	8005d20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	69da      	ldr	r2, [r3, #28]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	69da      	ldr	r2, [r3, #28]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005708:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	69d9      	ldr	r1, [r3, #28]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	021a      	lsls	r2, r3, #8
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	61da      	str	r2, [r3, #28]
      break;
 800571e:	e002      	b.n	8005726 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	75fb      	strb	r3, [r7, #23]
      break;
 8005724:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800572e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005730:	4618      	mov	r0, r3
 8005732:	3718      	adds	r7, #24
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005742:	2300      	movs	r3, #0
 8005744:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800574c:	2b01      	cmp	r3, #1
 800574e:	d101      	bne.n	8005754 <HAL_TIM_ConfigClockSource+0x1c>
 8005750:	2302      	movs	r3, #2
 8005752:	e0b4      	b.n	80058be <HAL_TIM_ConfigClockSource+0x186>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2202      	movs	r2, #2
 8005760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005772:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800577a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800578c:	d03e      	beq.n	800580c <HAL_TIM_ConfigClockSource+0xd4>
 800578e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005792:	f200 8087 	bhi.w	80058a4 <HAL_TIM_ConfigClockSource+0x16c>
 8005796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800579a:	f000 8086 	beq.w	80058aa <HAL_TIM_ConfigClockSource+0x172>
 800579e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057a2:	d87f      	bhi.n	80058a4 <HAL_TIM_ConfigClockSource+0x16c>
 80057a4:	2b70      	cmp	r3, #112	; 0x70
 80057a6:	d01a      	beq.n	80057de <HAL_TIM_ConfigClockSource+0xa6>
 80057a8:	2b70      	cmp	r3, #112	; 0x70
 80057aa:	d87b      	bhi.n	80058a4 <HAL_TIM_ConfigClockSource+0x16c>
 80057ac:	2b60      	cmp	r3, #96	; 0x60
 80057ae:	d050      	beq.n	8005852 <HAL_TIM_ConfigClockSource+0x11a>
 80057b0:	2b60      	cmp	r3, #96	; 0x60
 80057b2:	d877      	bhi.n	80058a4 <HAL_TIM_ConfigClockSource+0x16c>
 80057b4:	2b50      	cmp	r3, #80	; 0x50
 80057b6:	d03c      	beq.n	8005832 <HAL_TIM_ConfigClockSource+0xfa>
 80057b8:	2b50      	cmp	r3, #80	; 0x50
 80057ba:	d873      	bhi.n	80058a4 <HAL_TIM_ConfigClockSource+0x16c>
 80057bc:	2b40      	cmp	r3, #64	; 0x40
 80057be:	d058      	beq.n	8005872 <HAL_TIM_ConfigClockSource+0x13a>
 80057c0:	2b40      	cmp	r3, #64	; 0x40
 80057c2:	d86f      	bhi.n	80058a4 <HAL_TIM_ConfigClockSource+0x16c>
 80057c4:	2b30      	cmp	r3, #48	; 0x30
 80057c6:	d064      	beq.n	8005892 <HAL_TIM_ConfigClockSource+0x15a>
 80057c8:	2b30      	cmp	r3, #48	; 0x30
 80057ca:	d86b      	bhi.n	80058a4 <HAL_TIM_ConfigClockSource+0x16c>
 80057cc:	2b20      	cmp	r3, #32
 80057ce:	d060      	beq.n	8005892 <HAL_TIM_ConfigClockSource+0x15a>
 80057d0:	2b20      	cmp	r3, #32
 80057d2:	d867      	bhi.n	80058a4 <HAL_TIM_ConfigClockSource+0x16c>
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d05c      	beq.n	8005892 <HAL_TIM_ConfigClockSource+0x15a>
 80057d8:	2b10      	cmp	r3, #16
 80057da:	d05a      	beq.n	8005892 <HAL_TIM_ConfigClockSource+0x15a>
 80057dc:	e062      	b.n	80058a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6818      	ldr	r0, [r3, #0]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	6899      	ldr	r1, [r3, #8]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	685a      	ldr	r2, [r3, #4]
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	f000 fb67 	bl	8005ec0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005800:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	609a      	str	r2, [r3, #8]
      break;
 800580a:	e04f      	b.n	80058ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6818      	ldr	r0, [r3, #0]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	6899      	ldr	r1, [r3, #8]
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685a      	ldr	r2, [r3, #4]
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f000 fb50 	bl	8005ec0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689a      	ldr	r2, [r3, #8]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800582e:	609a      	str	r2, [r3, #8]
      break;
 8005830:	e03c      	b.n	80058ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6818      	ldr	r0, [r3, #0]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	6859      	ldr	r1, [r3, #4]
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	461a      	mov	r2, r3
 8005840:	f000 fac4 	bl	8005dcc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2150      	movs	r1, #80	; 0x50
 800584a:	4618      	mov	r0, r3
 800584c:	f000 fb1d 	bl	8005e8a <TIM_ITRx_SetConfig>
      break;
 8005850:	e02c      	b.n	80058ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6818      	ldr	r0, [r3, #0]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	6859      	ldr	r1, [r3, #4]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	461a      	mov	r2, r3
 8005860:	f000 fae3 	bl	8005e2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2160      	movs	r1, #96	; 0x60
 800586a:	4618      	mov	r0, r3
 800586c:	f000 fb0d 	bl	8005e8a <TIM_ITRx_SetConfig>
      break;
 8005870:	e01c      	b.n	80058ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6818      	ldr	r0, [r3, #0]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	6859      	ldr	r1, [r3, #4]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	461a      	mov	r2, r3
 8005880:	f000 faa4 	bl	8005dcc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2140      	movs	r1, #64	; 0x40
 800588a:	4618      	mov	r0, r3
 800588c:	f000 fafd 	bl	8005e8a <TIM_ITRx_SetConfig>
      break;
 8005890:	e00c      	b.n	80058ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4619      	mov	r1, r3
 800589c:	4610      	mov	r0, r2
 800589e:	f000 faf4 	bl	8005e8a <TIM_ITRx_SetConfig>
      break;
 80058a2:	e003      	b.n	80058ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	73fb      	strb	r3, [r7, #15]
      break;
 80058a8:	e000      	b.n	80058ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80058aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b083      	sub	sp, #12
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80058ce:	bf00      	nop
 80058d0:	370c      	adds	r7, #12
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058da:	b480      	push	{r7}
 80058dc:	b083      	sub	sp, #12
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058e2:	bf00      	nop
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b083      	sub	sp, #12
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058f6:	bf00      	nop
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005902:	b480      	push	{r7}
 8005904:	b083      	sub	sp, #12
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800590a:	bf00      	nop
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr

08005916 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005916:	b480      	push	{r7}
 8005918:	b083      	sub	sp, #12
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800591e:	bf00      	nop
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
	...

0800592c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a40      	ldr	r2, [pc, #256]	; (8005a40 <TIM_Base_SetConfig+0x114>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d013      	beq.n	800596c <TIM_Base_SetConfig+0x40>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800594a:	d00f      	beq.n	800596c <TIM_Base_SetConfig+0x40>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a3d      	ldr	r2, [pc, #244]	; (8005a44 <TIM_Base_SetConfig+0x118>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d00b      	beq.n	800596c <TIM_Base_SetConfig+0x40>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a3c      	ldr	r2, [pc, #240]	; (8005a48 <TIM_Base_SetConfig+0x11c>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d007      	beq.n	800596c <TIM_Base_SetConfig+0x40>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a3b      	ldr	r2, [pc, #236]	; (8005a4c <TIM_Base_SetConfig+0x120>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d003      	beq.n	800596c <TIM_Base_SetConfig+0x40>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a3a      	ldr	r2, [pc, #232]	; (8005a50 <TIM_Base_SetConfig+0x124>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d108      	bne.n	800597e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	4313      	orrs	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a2f      	ldr	r2, [pc, #188]	; (8005a40 <TIM_Base_SetConfig+0x114>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d02b      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800598c:	d027      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a2c      	ldr	r2, [pc, #176]	; (8005a44 <TIM_Base_SetConfig+0x118>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d023      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a2b      	ldr	r2, [pc, #172]	; (8005a48 <TIM_Base_SetConfig+0x11c>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d01f      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a2a      	ldr	r2, [pc, #168]	; (8005a4c <TIM_Base_SetConfig+0x120>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d01b      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a29      	ldr	r2, [pc, #164]	; (8005a50 <TIM_Base_SetConfig+0x124>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d017      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a28      	ldr	r2, [pc, #160]	; (8005a54 <TIM_Base_SetConfig+0x128>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d013      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a27      	ldr	r2, [pc, #156]	; (8005a58 <TIM_Base_SetConfig+0x12c>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d00f      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a26      	ldr	r2, [pc, #152]	; (8005a5c <TIM_Base_SetConfig+0x130>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d00b      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a25      	ldr	r2, [pc, #148]	; (8005a60 <TIM_Base_SetConfig+0x134>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d007      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a24      	ldr	r2, [pc, #144]	; (8005a64 <TIM_Base_SetConfig+0x138>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d003      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a23      	ldr	r2, [pc, #140]	; (8005a68 <TIM_Base_SetConfig+0x13c>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d108      	bne.n	80059f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	689a      	ldr	r2, [r3, #8]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a0a      	ldr	r2, [pc, #40]	; (8005a40 <TIM_Base_SetConfig+0x114>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d003      	beq.n	8005a24 <TIM_Base_SetConfig+0xf8>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a0c      	ldr	r2, [pc, #48]	; (8005a50 <TIM_Base_SetConfig+0x124>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d103      	bne.n	8005a2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	691a      	ldr	r2, [r3, #16]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	615a      	str	r2, [r3, #20]
}
 8005a32:	bf00      	nop
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	40010000 	.word	0x40010000
 8005a44:	40000400 	.word	0x40000400
 8005a48:	40000800 	.word	0x40000800
 8005a4c:	40000c00 	.word	0x40000c00
 8005a50:	40010400 	.word	0x40010400
 8005a54:	40014000 	.word	0x40014000
 8005a58:	40014400 	.word	0x40014400
 8005a5c:	40014800 	.word	0x40014800
 8005a60:	40001800 	.word	0x40001800
 8005a64:	40001c00 	.word	0x40001c00
 8005a68:	40002000 	.word	0x40002000

08005a6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b087      	sub	sp, #28
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	f023 0201 	bic.w	r2, r3, #1
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f023 0303 	bic.w	r3, r3, #3
 8005aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	f023 0302 	bic.w	r3, r3, #2
 8005ab4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a20      	ldr	r2, [pc, #128]	; (8005b44 <TIM_OC1_SetConfig+0xd8>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d003      	beq.n	8005ad0 <TIM_OC1_SetConfig+0x64>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a1f      	ldr	r2, [pc, #124]	; (8005b48 <TIM_OC1_SetConfig+0xdc>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d10c      	bne.n	8005aea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f023 0308 	bic.w	r3, r3, #8
 8005ad6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	f023 0304 	bic.w	r3, r3, #4
 8005ae8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a15      	ldr	r2, [pc, #84]	; (8005b44 <TIM_OC1_SetConfig+0xd8>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d003      	beq.n	8005afa <TIM_OC1_SetConfig+0x8e>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a14      	ldr	r2, [pc, #80]	; (8005b48 <TIM_OC1_SetConfig+0xdc>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d111      	bne.n	8005b1e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	685a      	ldr	r2, [r3, #4]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	621a      	str	r2, [r3, #32]
}
 8005b38:	bf00      	nop
 8005b3a:	371c      	adds	r7, #28
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr
 8005b44:	40010000 	.word	0x40010000
 8005b48:	40010400 	.word	0x40010400

08005b4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b087      	sub	sp, #28
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	f023 0210 	bic.w	r2, r3, #16
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	021b      	lsls	r3, r3, #8
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	f023 0320 	bic.w	r3, r3, #32
 8005b96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	011b      	lsls	r3, r3, #4
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a22      	ldr	r2, [pc, #136]	; (8005c30 <TIM_OC2_SetConfig+0xe4>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d003      	beq.n	8005bb4 <TIM_OC2_SetConfig+0x68>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a21      	ldr	r2, [pc, #132]	; (8005c34 <TIM_OC2_SetConfig+0xe8>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d10d      	bne.n	8005bd0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	011b      	lsls	r3, r3, #4
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a17      	ldr	r2, [pc, #92]	; (8005c30 <TIM_OC2_SetConfig+0xe4>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d003      	beq.n	8005be0 <TIM_OC2_SetConfig+0x94>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a16      	ldr	r2, [pc, #88]	; (8005c34 <TIM_OC2_SetConfig+0xe8>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d113      	bne.n	8005c08 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005be6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	685a      	ldr	r2, [r3, #4]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	621a      	str	r2, [r3, #32]
}
 8005c22:	bf00      	nop
 8005c24:	371c      	adds	r7, #28
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	40010000 	.word	0x40010000
 8005c34:	40010400 	.word	0x40010400

08005c38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b087      	sub	sp, #28
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f023 0303 	bic.w	r3, r3, #3
 8005c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	021b      	lsls	r3, r3, #8
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a21      	ldr	r2, [pc, #132]	; (8005d18 <TIM_OC3_SetConfig+0xe0>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d003      	beq.n	8005c9e <TIM_OC3_SetConfig+0x66>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a20      	ldr	r2, [pc, #128]	; (8005d1c <TIM_OC3_SetConfig+0xe4>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d10d      	bne.n	8005cba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ca4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	021b      	lsls	r3, r3, #8
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a16      	ldr	r2, [pc, #88]	; (8005d18 <TIM_OC3_SetConfig+0xe0>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d003      	beq.n	8005cca <TIM_OC3_SetConfig+0x92>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a15      	ldr	r2, [pc, #84]	; (8005d1c <TIM_OC3_SetConfig+0xe4>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d113      	bne.n	8005cf2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	011b      	lsls	r3, r3, #4
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	011b      	lsls	r3, r3, #4
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	621a      	str	r2, [r3, #32]
}
 8005d0c:	bf00      	nop
 8005d0e:	371c      	adds	r7, #28
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr
 8005d18:	40010000 	.word	0x40010000
 8005d1c:	40010400 	.word	0x40010400

08005d20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b087      	sub	sp, #28
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	69db      	ldr	r3, [r3, #28]
 8005d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	021b      	lsls	r3, r3, #8
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	031b      	lsls	r3, r3, #12
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a12      	ldr	r2, [pc, #72]	; (8005dc4 <TIM_OC4_SetConfig+0xa4>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d003      	beq.n	8005d88 <TIM_OC4_SetConfig+0x68>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a11      	ldr	r2, [pc, #68]	; (8005dc8 <TIM_OC4_SetConfig+0xa8>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d109      	bne.n	8005d9c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	695b      	ldr	r3, [r3, #20]
 8005d94:	019b      	lsls	r3, r3, #6
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	621a      	str	r2, [r3, #32]
}
 8005db6:	bf00      	nop
 8005db8:	371c      	adds	r7, #28
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	40010000 	.word	0x40010000
 8005dc8:	40010400 	.word	0x40010400

08005dcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b087      	sub	sp, #28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	f023 0201 	bic.w	r2, r3, #1
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005df6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	011b      	lsls	r3, r3, #4
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	f023 030a 	bic.w	r3, r3, #10
 8005e08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	621a      	str	r2, [r3, #32]
}
 8005e1e:	bf00      	nop
 8005e20:	371c      	adds	r7, #28
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b087      	sub	sp, #28
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	60f8      	str	r0, [r7, #12]
 8005e32:	60b9      	str	r1, [r7, #8]
 8005e34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	f023 0210 	bic.w	r2, r3, #16
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	031b      	lsls	r3, r3, #12
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	011b      	lsls	r3, r3, #4
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	621a      	str	r2, [r3, #32]
}
 8005e7e:	bf00      	nop
 8005e80:	371c      	adds	r7, #28
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b085      	sub	sp, #20
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
 8005e92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ea0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ea2:	683a      	ldr	r2, [r7, #0]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	f043 0307 	orr.w	r3, r3, #7
 8005eac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	609a      	str	r2, [r3, #8]
}
 8005eb4:	bf00      	nop
 8005eb6:	3714      	adds	r7, #20
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b087      	sub	sp, #28
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
 8005ecc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005eda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	021a      	lsls	r2, r3, #8
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	431a      	orrs	r2, r3
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	697a      	ldr	r2, [r7, #20]
 8005ef2:	609a      	str	r2, [r3, #8]
}
 8005ef4:	bf00      	nop
 8005ef6:	371c      	adds	r7, #28
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b087      	sub	sp, #28
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	f003 031f 	and.w	r3, r3, #31
 8005f12:	2201      	movs	r2, #1
 8005f14:	fa02 f303 	lsl.w	r3, r2, r3
 8005f18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6a1a      	ldr	r2, [r3, #32]
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	43db      	mvns	r3, r3
 8005f22:	401a      	ands	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6a1a      	ldr	r2, [r3, #32]
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	f003 031f 	and.w	r3, r3, #31
 8005f32:	6879      	ldr	r1, [r7, #4]
 8005f34:	fa01 f303 	lsl.w	r3, r1, r3
 8005f38:	431a      	orrs	r2, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	621a      	str	r2, [r3, #32]
}
 8005f3e:	bf00      	nop
 8005f40:	371c      	adds	r7, #28
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
	...

08005f4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d101      	bne.n	8005f64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f60:	2302      	movs	r3, #2
 8005f62:	e05a      	b.n	800601a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2202      	movs	r2, #2
 8005f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a21      	ldr	r2, [pc, #132]	; (8006028 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d022      	beq.n	8005fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fb0:	d01d      	beq.n	8005fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a1d      	ldr	r2, [pc, #116]	; (800602c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d018      	beq.n	8005fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a1b      	ldr	r2, [pc, #108]	; (8006030 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d013      	beq.n	8005fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a1a      	ldr	r2, [pc, #104]	; (8006034 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d00e      	beq.n	8005fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a18      	ldr	r2, [pc, #96]	; (8006038 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d009      	beq.n	8005fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a17      	ldr	r2, [pc, #92]	; (800603c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d004      	beq.n	8005fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a15      	ldr	r2, [pc, #84]	; (8006040 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d10c      	bne.n	8006008 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ff4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3714      	adds	r7, #20
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	40010000 	.word	0x40010000
 800602c:	40000400 	.word	0x40000400
 8006030:	40000800 	.word	0x40000800
 8006034:	40000c00 	.word	0x40000c00
 8006038:	40010400 	.word	0x40010400
 800603c:	40014000 	.word	0x40014000
 8006040:	40001800 	.word	0x40001800

08006044 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e03f      	b.n	80060fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d106      	bne.n	8006098 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7fc fcdc 	bl	8002a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2224      	movs	r2, #36	; 0x24
 800609c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68da      	ldr	r2, [r3, #12]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 f829 	bl	8006108 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	691a      	ldr	r2, [r3, #16]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	695a      	ldr	r2, [r3, #20]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68da      	ldr	r2, [r3, #12]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2220      	movs	r2, #32
 80060f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2220      	movs	r2, #32
 80060f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3708      	adds	r7, #8
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
	...

08006108 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800610c:	b0c0      	sub	sp, #256	; 0x100
 800610e:	af00      	add	r7, sp, #0
 8006110:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006124:	68d9      	ldr	r1, [r3, #12]
 8006126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	ea40 0301 	orr.w	r3, r0, r1
 8006130:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006136:	689a      	ldr	r2, [r3, #8]
 8006138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	431a      	orrs	r2, r3
 8006140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	431a      	orrs	r2, r3
 8006148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800614c:	69db      	ldr	r3, [r3, #28]
 800614e:	4313      	orrs	r3, r2
 8006150:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006160:	f021 010c 	bic.w	r1, r1, #12
 8006164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800616e:	430b      	orrs	r3, r1
 8006170:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800617e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006182:	6999      	ldr	r1, [r3, #24]
 8006184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	ea40 0301 	orr.w	r3, r0, r1
 800618e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	4b8f      	ldr	r3, [pc, #572]	; (80063d4 <UART_SetConfig+0x2cc>)
 8006198:	429a      	cmp	r2, r3
 800619a:	d005      	beq.n	80061a8 <UART_SetConfig+0xa0>
 800619c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	4b8d      	ldr	r3, [pc, #564]	; (80063d8 <UART_SetConfig+0x2d0>)
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d104      	bne.n	80061b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80061a8:	f7fe f90c 	bl	80043c4 <HAL_RCC_GetPCLK2Freq>
 80061ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80061b0:	e003      	b.n	80061ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061b2:	f7fe f8f3 	bl	800439c <HAL_RCC_GetPCLK1Freq>
 80061b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061be:	69db      	ldr	r3, [r3, #28]
 80061c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061c4:	f040 810c 	bne.w	80063e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061cc:	2200      	movs	r2, #0
 80061ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80061d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80061d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80061da:	4622      	mov	r2, r4
 80061dc:	462b      	mov	r3, r5
 80061de:	1891      	adds	r1, r2, r2
 80061e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80061e2:	415b      	adcs	r3, r3
 80061e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80061ea:	4621      	mov	r1, r4
 80061ec:	eb12 0801 	adds.w	r8, r2, r1
 80061f0:	4629      	mov	r1, r5
 80061f2:	eb43 0901 	adc.w	r9, r3, r1
 80061f6:	f04f 0200 	mov.w	r2, #0
 80061fa:	f04f 0300 	mov.w	r3, #0
 80061fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006202:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006206:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800620a:	4690      	mov	r8, r2
 800620c:	4699      	mov	r9, r3
 800620e:	4623      	mov	r3, r4
 8006210:	eb18 0303 	adds.w	r3, r8, r3
 8006214:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006218:	462b      	mov	r3, r5
 800621a:	eb49 0303 	adc.w	r3, r9, r3
 800621e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800622e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006232:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006236:	460b      	mov	r3, r1
 8006238:	18db      	adds	r3, r3, r3
 800623a:	653b      	str	r3, [r7, #80]	; 0x50
 800623c:	4613      	mov	r3, r2
 800623e:	eb42 0303 	adc.w	r3, r2, r3
 8006242:	657b      	str	r3, [r7, #84]	; 0x54
 8006244:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006248:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800624c:	f7fa fc22 	bl	8000a94 <__aeabi_uldivmod>
 8006250:	4602      	mov	r2, r0
 8006252:	460b      	mov	r3, r1
 8006254:	4b61      	ldr	r3, [pc, #388]	; (80063dc <UART_SetConfig+0x2d4>)
 8006256:	fba3 2302 	umull	r2, r3, r3, r2
 800625a:	095b      	lsrs	r3, r3, #5
 800625c:	011c      	lsls	r4, r3, #4
 800625e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006262:	2200      	movs	r2, #0
 8006264:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006268:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800626c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006270:	4642      	mov	r2, r8
 8006272:	464b      	mov	r3, r9
 8006274:	1891      	adds	r1, r2, r2
 8006276:	64b9      	str	r1, [r7, #72]	; 0x48
 8006278:	415b      	adcs	r3, r3
 800627a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800627c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006280:	4641      	mov	r1, r8
 8006282:	eb12 0a01 	adds.w	sl, r2, r1
 8006286:	4649      	mov	r1, r9
 8006288:	eb43 0b01 	adc.w	fp, r3, r1
 800628c:	f04f 0200 	mov.w	r2, #0
 8006290:	f04f 0300 	mov.w	r3, #0
 8006294:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006298:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800629c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062a0:	4692      	mov	sl, r2
 80062a2:	469b      	mov	fp, r3
 80062a4:	4643      	mov	r3, r8
 80062a6:	eb1a 0303 	adds.w	r3, sl, r3
 80062aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062ae:	464b      	mov	r3, r9
 80062b0:	eb4b 0303 	adc.w	r3, fp, r3
 80062b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80062b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80062c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80062cc:	460b      	mov	r3, r1
 80062ce:	18db      	adds	r3, r3, r3
 80062d0:	643b      	str	r3, [r7, #64]	; 0x40
 80062d2:	4613      	mov	r3, r2
 80062d4:	eb42 0303 	adc.w	r3, r2, r3
 80062d8:	647b      	str	r3, [r7, #68]	; 0x44
 80062da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80062de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80062e2:	f7fa fbd7 	bl	8000a94 <__aeabi_uldivmod>
 80062e6:	4602      	mov	r2, r0
 80062e8:	460b      	mov	r3, r1
 80062ea:	4611      	mov	r1, r2
 80062ec:	4b3b      	ldr	r3, [pc, #236]	; (80063dc <UART_SetConfig+0x2d4>)
 80062ee:	fba3 2301 	umull	r2, r3, r3, r1
 80062f2:	095b      	lsrs	r3, r3, #5
 80062f4:	2264      	movs	r2, #100	; 0x64
 80062f6:	fb02 f303 	mul.w	r3, r2, r3
 80062fa:	1acb      	subs	r3, r1, r3
 80062fc:	00db      	lsls	r3, r3, #3
 80062fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006302:	4b36      	ldr	r3, [pc, #216]	; (80063dc <UART_SetConfig+0x2d4>)
 8006304:	fba3 2302 	umull	r2, r3, r3, r2
 8006308:	095b      	lsrs	r3, r3, #5
 800630a:	005b      	lsls	r3, r3, #1
 800630c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006310:	441c      	add	r4, r3
 8006312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006316:	2200      	movs	r2, #0
 8006318:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800631c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006320:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006324:	4642      	mov	r2, r8
 8006326:	464b      	mov	r3, r9
 8006328:	1891      	adds	r1, r2, r2
 800632a:	63b9      	str	r1, [r7, #56]	; 0x38
 800632c:	415b      	adcs	r3, r3
 800632e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006330:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006334:	4641      	mov	r1, r8
 8006336:	1851      	adds	r1, r2, r1
 8006338:	6339      	str	r1, [r7, #48]	; 0x30
 800633a:	4649      	mov	r1, r9
 800633c:	414b      	adcs	r3, r1
 800633e:	637b      	str	r3, [r7, #52]	; 0x34
 8006340:	f04f 0200 	mov.w	r2, #0
 8006344:	f04f 0300 	mov.w	r3, #0
 8006348:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800634c:	4659      	mov	r1, fp
 800634e:	00cb      	lsls	r3, r1, #3
 8006350:	4651      	mov	r1, sl
 8006352:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006356:	4651      	mov	r1, sl
 8006358:	00ca      	lsls	r2, r1, #3
 800635a:	4610      	mov	r0, r2
 800635c:	4619      	mov	r1, r3
 800635e:	4603      	mov	r3, r0
 8006360:	4642      	mov	r2, r8
 8006362:	189b      	adds	r3, r3, r2
 8006364:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006368:	464b      	mov	r3, r9
 800636a:	460a      	mov	r2, r1
 800636c:	eb42 0303 	adc.w	r3, r2, r3
 8006370:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006380:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006384:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006388:	460b      	mov	r3, r1
 800638a:	18db      	adds	r3, r3, r3
 800638c:	62bb      	str	r3, [r7, #40]	; 0x28
 800638e:	4613      	mov	r3, r2
 8006390:	eb42 0303 	adc.w	r3, r2, r3
 8006394:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006396:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800639a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800639e:	f7fa fb79 	bl	8000a94 <__aeabi_uldivmod>
 80063a2:	4602      	mov	r2, r0
 80063a4:	460b      	mov	r3, r1
 80063a6:	4b0d      	ldr	r3, [pc, #52]	; (80063dc <UART_SetConfig+0x2d4>)
 80063a8:	fba3 1302 	umull	r1, r3, r3, r2
 80063ac:	095b      	lsrs	r3, r3, #5
 80063ae:	2164      	movs	r1, #100	; 0x64
 80063b0:	fb01 f303 	mul.w	r3, r1, r3
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	00db      	lsls	r3, r3, #3
 80063b8:	3332      	adds	r3, #50	; 0x32
 80063ba:	4a08      	ldr	r2, [pc, #32]	; (80063dc <UART_SetConfig+0x2d4>)
 80063bc:	fba2 2303 	umull	r2, r3, r2, r3
 80063c0:	095b      	lsrs	r3, r3, #5
 80063c2:	f003 0207 	and.w	r2, r3, #7
 80063c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4422      	add	r2, r4
 80063ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80063d0:	e105      	b.n	80065de <UART_SetConfig+0x4d6>
 80063d2:	bf00      	nop
 80063d4:	40011000 	.word	0x40011000
 80063d8:	40011400 	.word	0x40011400
 80063dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063e4:	2200      	movs	r2, #0
 80063e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80063ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80063ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80063f2:	4642      	mov	r2, r8
 80063f4:	464b      	mov	r3, r9
 80063f6:	1891      	adds	r1, r2, r2
 80063f8:	6239      	str	r1, [r7, #32]
 80063fa:	415b      	adcs	r3, r3
 80063fc:	627b      	str	r3, [r7, #36]	; 0x24
 80063fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006402:	4641      	mov	r1, r8
 8006404:	1854      	adds	r4, r2, r1
 8006406:	4649      	mov	r1, r9
 8006408:	eb43 0501 	adc.w	r5, r3, r1
 800640c:	f04f 0200 	mov.w	r2, #0
 8006410:	f04f 0300 	mov.w	r3, #0
 8006414:	00eb      	lsls	r3, r5, #3
 8006416:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800641a:	00e2      	lsls	r2, r4, #3
 800641c:	4614      	mov	r4, r2
 800641e:	461d      	mov	r5, r3
 8006420:	4643      	mov	r3, r8
 8006422:	18e3      	adds	r3, r4, r3
 8006424:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006428:	464b      	mov	r3, r9
 800642a:	eb45 0303 	adc.w	r3, r5, r3
 800642e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800643e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006442:	f04f 0200 	mov.w	r2, #0
 8006446:	f04f 0300 	mov.w	r3, #0
 800644a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800644e:	4629      	mov	r1, r5
 8006450:	008b      	lsls	r3, r1, #2
 8006452:	4621      	mov	r1, r4
 8006454:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006458:	4621      	mov	r1, r4
 800645a:	008a      	lsls	r2, r1, #2
 800645c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006460:	f7fa fb18 	bl	8000a94 <__aeabi_uldivmod>
 8006464:	4602      	mov	r2, r0
 8006466:	460b      	mov	r3, r1
 8006468:	4b60      	ldr	r3, [pc, #384]	; (80065ec <UART_SetConfig+0x4e4>)
 800646a:	fba3 2302 	umull	r2, r3, r3, r2
 800646e:	095b      	lsrs	r3, r3, #5
 8006470:	011c      	lsls	r4, r3, #4
 8006472:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006476:	2200      	movs	r2, #0
 8006478:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800647c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006480:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006484:	4642      	mov	r2, r8
 8006486:	464b      	mov	r3, r9
 8006488:	1891      	adds	r1, r2, r2
 800648a:	61b9      	str	r1, [r7, #24]
 800648c:	415b      	adcs	r3, r3
 800648e:	61fb      	str	r3, [r7, #28]
 8006490:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006494:	4641      	mov	r1, r8
 8006496:	1851      	adds	r1, r2, r1
 8006498:	6139      	str	r1, [r7, #16]
 800649a:	4649      	mov	r1, r9
 800649c:	414b      	adcs	r3, r1
 800649e:	617b      	str	r3, [r7, #20]
 80064a0:	f04f 0200 	mov.w	r2, #0
 80064a4:	f04f 0300 	mov.w	r3, #0
 80064a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064ac:	4659      	mov	r1, fp
 80064ae:	00cb      	lsls	r3, r1, #3
 80064b0:	4651      	mov	r1, sl
 80064b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064b6:	4651      	mov	r1, sl
 80064b8:	00ca      	lsls	r2, r1, #3
 80064ba:	4610      	mov	r0, r2
 80064bc:	4619      	mov	r1, r3
 80064be:	4603      	mov	r3, r0
 80064c0:	4642      	mov	r2, r8
 80064c2:	189b      	adds	r3, r3, r2
 80064c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80064c8:	464b      	mov	r3, r9
 80064ca:	460a      	mov	r2, r1
 80064cc:	eb42 0303 	adc.w	r3, r2, r3
 80064d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80064d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80064de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80064e0:	f04f 0200 	mov.w	r2, #0
 80064e4:	f04f 0300 	mov.w	r3, #0
 80064e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80064ec:	4649      	mov	r1, r9
 80064ee:	008b      	lsls	r3, r1, #2
 80064f0:	4641      	mov	r1, r8
 80064f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064f6:	4641      	mov	r1, r8
 80064f8:	008a      	lsls	r2, r1, #2
 80064fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80064fe:	f7fa fac9 	bl	8000a94 <__aeabi_uldivmod>
 8006502:	4602      	mov	r2, r0
 8006504:	460b      	mov	r3, r1
 8006506:	4b39      	ldr	r3, [pc, #228]	; (80065ec <UART_SetConfig+0x4e4>)
 8006508:	fba3 1302 	umull	r1, r3, r3, r2
 800650c:	095b      	lsrs	r3, r3, #5
 800650e:	2164      	movs	r1, #100	; 0x64
 8006510:	fb01 f303 	mul.w	r3, r1, r3
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	011b      	lsls	r3, r3, #4
 8006518:	3332      	adds	r3, #50	; 0x32
 800651a:	4a34      	ldr	r2, [pc, #208]	; (80065ec <UART_SetConfig+0x4e4>)
 800651c:	fba2 2303 	umull	r2, r3, r2, r3
 8006520:	095b      	lsrs	r3, r3, #5
 8006522:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006526:	441c      	add	r4, r3
 8006528:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800652c:	2200      	movs	r2, #0
 800652e:	673b      	str	r3, [r7, #112]	; 0x70
 8006530:	677a      	str	r2, [r7, #116]	; 0x74
 8006532:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006536:	4642      	mov	r2, r8
 8006538:	464b      	mov	r3, r9
 800653a:	1891      	adds	r1, r2, r2
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	415b      	adcs	r3, r3
 8006540:	60fb      	str	r3, [r7, #12]
 8006542:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006546:	4641      	mov	r1, r8
 8006548:	1851      	adds	r1, r2, r1
 800654a:	6039      	str	r1, [r7, #0]
 800654c:	4649      	mov	r1, r9
 800654e:	414b      	adcs	r3, r1
 8006550:	607b      	str	r3, [r7, #4]
 8006552:	f04f 0200 	mov.w	r2, #0
 8006556:	f04f 0300 	mov.w	r3, #0
 800655a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800655e:	4659      	mov	r1, fp
 8006560:	00cb      	lsls	r3, r1, #3
 8006562:	4651      	mov	r1, sl
 8006564:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006568:	4651      	mov	r1, sl
 800656a:	00ca      	lsls	r2, r1, #3
 800656c:	4610      	mov	r0, r2
 800656e:	4619      	mov	r1, r3
 8006570:	4603      	mov	r3, r0
 8006572:	4642      	mov	r2, r8
 8006574:	189b      	adds	r3, r3, r2
 8006576:	66bb      	str	r3, [r7, #104]	; 0x68
 8006578:	464b      	mov	r3, r9
 800657a:	460a      	mov	r2, r1
 800657c:	eb42 0303 	adc.w	r3, r2, r3
 8006580:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	663b      	str	r3, [r7, #96]	; 0x60
 800658c:	667a      	str	r2, [r7, #100]	; 0x64
 800658e:	f04f 0200 	mov.w	r2, #0
 8006592:	f04f 0300 	mov.w	r3, #0
 8006596:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800659a:	4649      	mov	r1, r9
 800659c:	008b      	lsls	r3, r1, #2
 800659e:	4641      	mov	r1, r8
 80065a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065a4:	4641      	mov	r1, r8
 80065a6:	008a      	lsls	r2, r1, #2
 80065a8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80065ac:	f7fa fa72 	bl	8000a94 <__aeabi_uldivmod>
 80065b0:	4602      	mov	r2, r0
 80065b2:	460b      	mov	r3, r1
 80065b4:	4b0d      	ldr	r3, [pc, #52]	; (80065ec <UART_SetConfig+0x4e4>)
 80065b6:	fba3 1302 	umull	r1, r3, r3, r2
 80065ba:	095b      	lsrs	r3, r3, #5
 80065bc:	2164      	movs	r1, #100	; 0x64
 80065be:	fb01 f303 	mul.w	r3, r1, r3
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	011b      	lsls	r3, r3, #4
 80065c6:	3332      	adds	r3, #50	; 0x32
 80065c8:	4a08      	ldr	r2, [pc, #32]	; (80065ec <UART_SetConfig+0x4e4>)
 80065ca:	fba2 2303 	umull	r2, r3, r2, r3
 80065ce:	095b      	lsrs	r3, r3, #5
 80065d0:	f003 020f 	and.w	r2, r3, #15
 80065d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4422      	add	r2, r4
 80065dc:	609a      	str	r2, [r3, #8]
}
 80065de:	bf00      	nop
 80065e0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80065e4:	46bd      	mov	sp, r7
 80065e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065ea:	bf00      	nop
 80065ec:	51eb851f 	.word	0x51eb851f

080065f0 <__libc_init_array>:
 80065f0:	b570      	push	{r4, r5, r6, lr}
 80065f2:	4d0d      	ldr	r5, [pc, #52]	; (8006628 <__libc_init_array+0x38>)
 80065f4:	4c0d      	ldr	r4, [pc, #52]	; (800662c <__libc_init_array+0x3c>)
 80065f6:	1b64      	subs	r4, r4, r5
 80065f8:	10a4      	asrs	r4, r4, #2
 80065fa:	2600      	movs	r6, #0
 80065fc:	42a6      	cmp	r6, r4
 80065fe:	d109      	bne.n	8006614 <__libc_init_array+0x24>
 8006600:	4d0b      	ldr	r5, [pc, #44]	; (8006630 <__libc_init_array+0x40>)
 8006602:	4c0c      	ldr	r4, [pc, #48]	; (8006634 <__libc_init_array+0x44>)
 8006604:	f000 f820 	bl	8006648 <_init>
 8006608:	1b64      	subs	r4, r4, r5
 800660a:	10a4      	asrs	r4, r4, #2
 800660c:	2600      	movs	r6, #0
 800660e:	42a6      	cmp	r6, r4
 8006610:	d105      	bne.n	800661e <__libc_init_array+0x2e>
 8006612:	bd70      	pop	{r4, r5, r6, pc}
 8006614:	f855 3b04 	ldr.w	r3, [r5], #4
 8006618:	4798      	blx	r3
 800661a:	3601      	adds	r6, #1
 800661c:	e7ee      	b.n	80065fc <__libc_init_array+0xc>
 800661e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006622:	4798      	blx	r3
 8006624:	3601      	adds	r6, #1
 8006626:	e7f2      	b.n	800660e <__libc_init_array+0x1e>
 8006628:	08006e88 	.word	0x08006e88
 800662c:	08006e88 	.word	0x08006e88
 8006630:	08006e88 	.word	0x08006e88
 8006634:	08006e8c 	.word	0x08006e8c

08006638 <memset>:
 8006638:	4402      	add	r2, r0
 800663a:	4603      	mov	r3, r0
 800663c:	4293      	cmp	r3, r2
 800663e:	d100      	bne.n	8006642 <memset+0xa>
 8006640:	4770      	bx	lr
 8006642:	f803 1b01 	strb.w	r1, [r3], #1
 8006646:	e7f9      	b.n	800663c <memset+0x4>

08006648 <_init>:
 8006648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800664a:	bf00      	nop
 800664c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800664e:	bc08      	pop	{r3}
 8006650:	469e      	mov	lr, r3
 8006652:	4770      	bx	lr

08006654 <_fini>:
 8006654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006656:	bf00      	nop
 8006658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800665a:	bc08      	pop	{r3}
 800665c:	469e      	mov	lr, r3
 800665e:	4770      	bx	lr
